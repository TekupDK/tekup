/**
 * ü§ñ Friday AI - RenOS Intelligent Assistant
 * 
 * Friday er en professionel dansk reng√∏ringsassistent der hj√¶lper med:
 * - Lead h√•ndtering og opf√∏lgning
 * - Booking og kalender styring
 * - Kunde information og historik
 * - Tilbud og prisberegning
 * - Generel hj√¶lp og vejledning
 * 
 * Personlighed: Venlig, professionel, kompetent, dansk
 */

import type { ChatMessage } from "../types";
import { getRecentLeads } from "../services/leadMonitor";
import { getAutoResponseService } from "../services/emailAutoResponseService";
import {
    findNextAvailableSlot,
    listUpcomingEvents
} from "../services/calendarService";
import { logger } from "../logger";
import type { LLMProvider } from "../llm/llmProvider";
import {
    getCurrentDateTime,
    formatDateTimeDanish,
    addDays,
    type CurrentDateTime
} from "../services/dateTimeService";

export interface FridayContext {
    intent?: string;
    confidence?: number;
    userMessage: string;
    history: ChatMessage[];
}

export interface FridayResponse {
    message: string;
    suggestions?: string[];
    data?: unknown;
}

/**
 * Friday AI System Prompt - Definerer personlighed og adf√¶rd
 * Bruges til LLM integration for naturlig samtale
 */
export const FRIDAY_SYSTEM_PROMPT = `Du er Friday, en professionel dansk AI-assistent for Rendetalje - en reng√∏ringsfirma.

üéØ DIN ROLLE:
- Hj√¶lpe med leads, bookinger, kunder og tilbud
- Besvare sp√∏rgsm√•l om RenOS systemet
- Guide brugeren til de rigtige funktioner
- V√¶re venlig, professionel og hj√¶lpsom

üí¨ DIN KOMMUNIKATIONSSTIL:
- Brug dansk sprog naturligt og korrekt
- V√¶r kortfattet og pr√¶cis (max 3-4 linjer for simple svar)
- Brug emojis sparsomt og professionelt (üìß üìÖ üë§ üí∞ ‚úÖ)
- V√¶r positiv og l√∏sningsorienteret
- Undg√• robotagtig eller for formel tone
- Tilpas dit svar til konteksten - v√¶r mere detaljeret n√•r det er n√∏dvendigt
- Brug personlige henvendelser og v√¶r im√∏dekommende

üìä HVAD DU KAN HJ√ÜLPE MED:
1. **Leads** - Vis seneste leads, s√∏g i leads, lead statistik, lead opf√∏lgning
2. **Email Auto-Response** - Se ventende emails, godkend/afvis, send automatiske svar
3. **Kalender & Booking** - Find ledige tider, book m√∏der, tjek tilg√¶ngelighed, flyt aftaler
4. **Kunder** - S√∏g kunder, vis kunde historik, kunde information, kunde kommunikation
5. **Tilbud** - Lav tilbud, send tilbud, tilbuds historik, prisberegning
6. **Statistik** - Dashboard, oms√¶tning, performance metrics, trends
7. **Generel hj√¶lp** - Vejledning, tips, forklaring af funktioner, troubleshooting

üß† INTELLIGENT ADF√ÜRD:
- Husk tidligere samtaler og byg p√• dem
- Foresl√• proaktive handlinger baseret p√• data
- Giv kontekstuelle r√•d og anbefalinger
- Identificer m√∏nstre og trends i data
- Tilbyd relevante follow-up sp√∏rgsm√•l

‚ùå HVAD DU IKKE KAN:
- √Ündre priser eller kontraktvilk√•r
- F√• adgang til andre firmers data
- Lave betalinger eller transaktioner
- Slette kunde data uden godkendelse

üé® FORMATERING:
- Brug **fed** til vigtige n√∏gleord
- Brug lister med ‚Ä¢ for flere punkter
- Brug numre (1. 2. 3.) for trin-for-trin guides
- Brug line breaks for l√¶sbarhed
- Brug tabeller for strukturerede data n√•r relevant

üí° PROAKTIVE FORSLAG:
- Hvis du ser m√∏nstre i data, p√•peg dem
- Foresl√• optimeringsmuligheder
- Giv tips til bedre workflow
- P√•mind om vigtige opgaver eller deadlines

VIGTIG: Hvis brugeren sp√∏rger om noget du ikke kan hj√¶lpe med, v√¶r √¶rlig og suggest hvad du KAN hj√¶lpe med i stedet. V√¶r altid l√∏sningsorienteret og hj√¶lpsom.`;

/**
 * Friday AI - H√•ndterer naturlige samtaler og returnerer intelligente svar
 */
export class FridayAI {
    private llm?: LLMProvider;

    constructor(llmProvider?: LLMProvider) {
        this.llm = llmProvider;
        if (llmProvider) {
            logger.info("Friday AI initialized with LLM provider");
        } else {
            logger.warn("Friday AI initialized without LLM - using heuristic responses");
        }
    }

    /**
     * Main entry point - responds to user messages
     */
    async respond(context: FridayContext): Promise<FridayResponse> {
        try {
            // Use LLM if available, otherwise fall back to heuristics
            if (this.llm) {
                return await this.respondWithLLM(context);
            } else {
                return await this.respondWithHeuristics(context);
            }
        } catch (error) {
            logger.error({ error }, "Friday AI response failed");
            return {
                message: "Beklager, jeg har tekniske problemer lige nu. Pr√∏v venligst igen om lidt. ü§ñ",
                suggestions: ["Pr√∏v igen", "Kontakt support", "Se hj√¶lp"]
            };
        }
    }

    /**
     * Respond using LLM for natural conversation
     */
    private async respondWithLLM(context: FridayContext): Promise<FridayResponse> {
        if (!this.llm) {
            return this.respondWithHeuristics(context);
        }

        try {
            // Build enriched context with current data
            const enrichedContext = await this.buildEnrichedContext(context.intent);
            const conversationContext = this.getConversationContext(context.history);
            const currentTime = getCurrentDateTime();
            const timeContext = this.buildTimeContext(currentTime);

            // Build comprehensive context for better AI responses
            const systemPrompt = `${FRIDAY_SYSTEM_PROMPT}

üìä AKTUEL KONTEKST:
${timeContext}

${enrichedContext}

üí¨ SAMTALE HISTORIK:
${conversationContext}

üéØ BRUGERENS INTENT: ${context.intent || 'ukendt'} (confidence: ${context.confidence || 0})

VIGTIG: Brug ovenst√•ende kontekst til at give et intelligent, relevant og hj√¶lpsomt svar. Hvis du kan se m√∏nstre eller trends i dataene, s√• n√¶vn dem. V√¶r proaktiv med forslag og anbefalinger.`;

            const messages: Array<{ role: "system" | "user" | "assistant"; content: string }> = [
                { role: "system", content: systemPrompt }
            ];

            // Add recent conversation history for better context
            const recentHistory = context.history.slice(-6); // Last 6 messages for context
            for (const msg of recentHistory) {
                if (msg.role === "user" || msg.role === "assistant") {
                    messages.push({
                        role: msg.role,
                        content: msg.content,
                    });
                }
            }

            // Add current user message
            messages.push({
                role: "user",
                content: context.userMessage,
            });

            const response = await this.llm.completeChat(messages, {
                temperature: 0.7,
                maxTokens: 800,
            });

            return {
                message: response,
                suggestions: this.generateSuggestions(context.intent),
            };
        } catch (error) {
            logger.error({ error }, "LLM response failed, falling back to heuristics");
            return this.respondWithHeuristics(context);
        }
    }

    /**
     * Fallback heuristic responses when LLM is not available
     */
    private async respondWithHeuristics(context: FridayContext): Promise<FridayResponse> {
        const { intent, userMessage, history } = context;

        try {
            switch (intent) {
                case "lead":
                    return this.handleLeadQuery(userMessage);
                case "email":
                    return this.handleEmailResponse(userMessage);
                case "booking":
                    return this.handleBookingQuery(userMessage);
                case "availability":
                    return await this.handleAvailabilityQuery(userMessage);
                case "reschedule":
                    return this.handleRescheduleQuery(userMessage);
                case "greeting":
                    return this.handleGreeting(userMessage);
                case "help":
                    return this.handleHelpRequest(userMessage);
                case "analytics":
                    return this.handleAnalyticsQuery(userMessage);
                default:
                    return this.handleUnknownIntent(userMessage, history);
            }
        } catch (error) {
            logger.error({ error }, "Heuristic response failed");
            return {
                message: "Beklager, jeg kunne ikke forst√• din foresp√∏rgsel. Kan du pr√∏ve at omformulere? ü§î",
                suggestions: ["Vis leads", "Book m√∏de", "Se kalender", "Hj√¶lp"]
            };
        }
    }

    /**
     * Build enriched context with current system data
     */
    private async buildEnrichedContext(intent?: string): Promise<string> {
        const contexts: string[] = [];

        try {
            // Add lead information if relevant
            if (!intent || intent === "lead" || intent === "analytics") {
                try {
                    const recentLeads = getRecentLeads(5);
                    if (recentLeads.length > 0) {
                        contexts.push(`üìã SENESTE LEADS (${recentLeads.length}):
${recentLeads.map(lead => `‚Ä¢ ${lead.name ?? "Ukendt"} - ${lead.source} (${lead.taskType ?? "N/A"})`).join('\n')}`);
                    }
                } catch {
                    logger.warn("Could not fetch recent leads for context");
                }
            }

            // Add calendar information if relevant
            if (!intent || intent === "booking" || intent === "availability") {
                try {
                    const upcomingEvents = await listUpcomingEvents({ maxResults: 3 });
                    if (upcomingEvents.length > 0) {
                        contexts.push(`üìÖ KOMMENDE AFTALER (${upcomingEvents.length}):
${upcomingEvents.map(event => `‚Ä¢ ${event.summary ?? "Uden titel"} - ${formatDateTimeDanish(new Date(event.start))}`).join('\n')}`);
                    }
                } catch {
                    logger.warn("Could not fetch calendar events for context");
                }
            }

            // Add email information if relevant
            if (!intent || intent === "email") {
                try {
                    const autoResponseService = getAutoResponseService();
                    const pendingResponses = autoResponseService.getPendingResponses();
                    if (pendingResponses.length > 0) {
                        contexts.push(`üìß VENTENDE EMAILS (${pendingResponses.length}):
${pendingResponses.slice(0, 3).map(item => `‚Ä¢ Til: ${item.response.to} - ${item.response.subject}`).join('\n')}`);
                    }
                } catch {
                    logger.warn("Could not fetch pending emails for context");
                }
            }

        } catch (_error) {
            logger.error({ error: _error }, "Failed to build enriched context");
        }

        return contexts.length > 0 ? contexts.join('\n\n') : "Ingen aktuel data tilg√¶ngelig.";
    }

    /**
     * Generate contextual suggestions based on intent
     */
    private generateSuggestions(intent?: string): string[] {
        switch (intent) {
            case "lead":
                return ["Vis alle leads", "Opret nyt lead", "Lead statistik"];
            case "email":
                return ["Se ventende emails", "Send auto-svar", "Email indstillinger"];
            case "booking":
                return ["Book nyt m√∏de", "Se kalender", "Find ledig tid"];
            case "analytics":
                return ["Dashboard", "M√•nedlig rapport", "Lead konvertering"];
            default:
                return ["Vis leads", "Book m√∏de", "Se kalender", "Hj√¶lp"];
        }
    }

    /**
     * Handle analytics and dashboard queries
     */
    private handleAnalyticsQuery(message: string): FridayResponse {
        if (message.toLowerCase().includes("dashboard") || message.toLowerCase().includes("statistik")) {
            return {
                message: "üìä **Dashboard og Statistik**\n\nHer kan du se:\n‚Ä¢ Lead konvertering og trends\n‚Ä¢ M√•nedlig oms√¶tning\n‚Ä¢ Booking statistik\n‚Ä¢ Performance metrics\n\nHvad vil du gerne se n√¶rmere p√•?",
                suggestions: ["Lead statistik", "Oms√¶tning", "Booking trends", "Performance"]
            };
        }

        return {
            message: "üìà Jeg kan hj√¶lpe med forskellige analyser og rapporter. Hvad vil du gerne vide om din forretning?",
            suggestions: ["Dashboard", "Lead statistik", "Oms√¶tning", "Trends"]
        };
    }

    /**
     * Handle lead-related queries
     */
    private getLeadsResponse(): FridayResponse {
        return {
            message: "üìã **Lead Oversigt**\n\nJeg kan hj√¶lpe dig med:\n‚Ä¢ Se seneste leads\n‚Ä¢ S√∏ge i leads\n‚Ä¢ Lead statistik\n‚Ä¢ Opf√∏lgning p√• leads\n\nHvad vil du gerne g√∏re?",
            suggestions: ["Vis seneste leads", "S√∏g leads", "Lead statistik", "Opf√∏lgning"],
            data: {
                action: "show_leads",
                filters: {}
            }
        };
    }

    private handleLeadQuery(_message: string): FridayResponse {
        return this.getLeadsResponse();
    }

    /**
     * Handle email auto-response queries
     */
    private handleEmailResponse(message: string): FridayResponse {
        if (message.toLowerCase().includes("godkend") || message.toLowerCase().includes("afvis")) {
            return {
                message: "üìß **Email Godkendelse**\n\nJeg kan hj√¶lpe dig med at:\n‚Ä¢ Se ventende emails\n‚Ä¢ Godkende auto-svar\n‚Ä¢ Afvise emails\n‚Ä¢ √Ündre email indstillinger\n\nHvad vil du gerne g√∏re?",
                suggestions: ["Se ventende emails", "Godkend alle", "Email indstillinger"]
            };
        }

        return {
            message: "üìß **Email Auto-Response**\n\nJeg kan hj√¶lpe med:\n‚Ä¢ Ventende emails der skal godkendes\n‚Ä¢ Automatiske svar til kunder\n‚Ä¢ Email indstillinger og regler\n\nHvad har du brug for hj√¶lp til?",
            suggestions: ["Ventende emails", "Auto-svar", "Email regler", "Indstillinger"]
        };
    }

    /**
     * Handle booking queries
     */
    private handleBookingQuery(_message: string): FridayResponse {
        return {
            message: "üìÖ **Booking & Kalender**\n\nJeg kan hj√¶lpe med:\n‚Ä¢ Book nye m√∏der\n‚Ä¢ Se kalender oversigt\n‚Ä¢ Finde ledige tider\n‚Ä¢ Flytte aftaler\n\nHvad vil du gerne g√∏re?",
            suggestions: ["Book m√∏de", "Se kalender", "Find ledig tid", "Flyt aftale"]
        };
    }

    /**
     * Handle availability queries with actual calendar integration
     */
    private async handleAvailabilityQuery(message: string): Promise<FridayResponse> {
        try {
            if (message.toLowerCase().includes("i morgen")) {
                return await this.findTomorrowAvailability();
            }

            if (message.toLowerCase().includes("eftermiddag")) {
                return await this.findAfternoonAvailability();
            }

            // Default availability check
            const DEFAULT_CALENDAR_ID = 'primary';
            const DEFAULT_DURATION = 120; // 2 hours
            const nextSlot = await findNextAvailableSlot(DEFAULT_CALENDAR_ID, DEFAULT_DURATION);
            if (nextSlot) {
                return {
                    message: `‚è∞ **N√¶ste ledige tid:**\n\nüìÖ ${formatDateTimeDanish(new Date(nextSlot.start))}\n\nSkal jeg booke denne tid til dig?`,
                    suggestions: ["Book denne tid", "Find anden tid", "Se hele kalender"]
                };
            }

            return {
                message: "üìÖ Jeg tjekker kalenderen for ledige tider...\n\nHvorn√•r har du brug for en aftale?",
                suggestions: ["I morgen", "Denne uge", "N√¶ste uge", "Eftermiddag"]
            };
        } catch (error) {
            logger.error({ error }, "Failed to check availability");
            return {
                message: "üìÖ Beklager, jeg kunne ikke tjekke kalenderen lige nu. Pr√∏v venligst igen.",
                suggestions: ["Pr√∏v igen", "Se kalender", "Kontakt support"]
            };
        }
    }

    /**
     * Handle reschedule queries
     */
    private handleRescheduleQuery(_message: string): FridayResponse {
        return {
            message: "üîÑ **Flyt Aftale**\n\nFor at flytte en aftale har jeg brug for:\n‚Ä¢ Hvilken aftale skal flyttes?\n‚Ä¢ Hvorn√•r skal den flyttes til?\n\nKan du give mig disse oplysninger?",
            suggestions: ["Se kommende aftaler", "Find ny tid", "Annuller aftale"]
        };
    }

    /**
     * Handle greeting messages
     */
    private handleGreeting(_message: string): FridayResponse {
        const greetings = [
            "Hej! üëã Jeg er Friday, din AI-assistent. Hvordan kan jeg hj√¶lpe dig i dag?",
            "Goddag! üòä Hvad kan jeg hj√¶lpe dig med?",
            "Hej der! ü§ñ Jeg er klar til at hj√¶lpe. Hvad skal vi arbejde med?",
        ];

        const randomGreeting = greetings[Math.floor(Math.random() * greetings.length)];

        return {
            message: randomGreeting,
            suggestions: ["Vis leads", "Book m√∏de", "Se emails", "Dashboard"]
        };
    }

    /**
     * Handle help requests
     */
    private handleHelpRequest(_message: string): FridayResponse {
        return {
            message: "üÜò **Hj√¶lp & Vejledning**\n\nJeg kan hj√¶lpe dig med:\n‚Ä¢ **Leads** - H√•ndtering og opf√∏lgning\n‚Ä¢ **Booking** - Kalender og aftaler\n‚Ä¢ **Emails** - Auto-svar og godkendelse\n‚Ä¢ **Statistik** - Dashboard og rapporter\n\nHvad vil du gerne l√¶re mere om?",
            suggestions: ["Lead hj√¶lp", "Booking hj√¶lp", "Email hj√¶lp", "Dashboard hj√¶lp"]
        };
    }

    /**
     * Find availability for tomorrow
     */
    private async findTomorrowAvailability(): Promise<FridayResponse> {
        try {
            const tomorrow = addDays(new Date(), 1);
            const DEFAULT_CALENDAR_ID = 'primary';
            const DEFAULT_DURATION = 120;
            const nextSlot = await findNextAvailableSlot(DEFAULT_CALENDAR_ID, DEFAULT_DURATION, tomorrow);

            if (nextSlot) {
                return {
                    message: `üìÖ **Ledig tid i morgen:**\n\n‚è∞ ${formatDateTimeDanish(new Date(nextSlot.start))}\n\nDenne tid er ledig. Skal jeg booke den?`,
                    suggestions: ["Book denne tid", "Find anden tid", "Se hele dagen"]
                };
            } else {
                return {
                    message: "üìÖ **I morgen ser desv√¶rre fyldt ud.**\n\nJeg kan tjekke andre dage for dig. Hvorn√•r passer det dig?",
                    suggestions: ["Overmorgen", "Denne uge", "N√¶ste uge", "Se kalender"]
                };
            }
        } catch (error) {
            logger.error({ error }, "Failed to find tomorrow availability");
            return {
                message: "üìÖ Beklager, jeg kunne ikke tjekke morgendagens kalender. Pr√∏v venligst igen.",
                suggestions: ["Pr√∏v igen", "Se kalender", "Book manuelt"]
            };
        }
    }

    /**
     * Find afternoon availability
     */
    private async findAfternoonAvailability(): Promise<FridayResponse> {
        try {
            // Look for slots after 12:00
            const today = new Date();
            const afternoonStart = new Date(today);
            afternoonStart.setHours(12, 0, 0, 0);

            const DEFAULT_CALENDAR_ID = 'primary';
            const DEFAULT_DURATION = 120;
            const nextSlot = await findNextAvailableSlot(DEFAULT_CALENDAR_ID, DEFAULT_DURATION, afternoonStart);

            if (nextSlot && new Date(nextSlot.start).getHours() >= 12) {
                return {
                    message: `üåÖ **Ledig eftermiddagstid:**\n\n‚è∞ ${formatDateTimeDanish(new Date(nextSlot.start))}\n\nDenne eftermiddagstid er ledig. Skal jeg booke den?`,
                    suggestions: ["Book denne tid", "Find senere tid", "Se hele eftermiddag"]
                };
            } else {
                return {
                    message: "üåÖ **Ingen ledige eftermiddagstider i dag.**\n\nJeg kan tjekke i morgen eller andre dage. Hvad foretr√¶kker du?",
                    suggestions: ["I morgen eftermiddag", "N√¶ste dag", "Se kalender", "Formiddag"]
                };
            }
        } catch (error) {
            logger.error({ error }, "Failed to find afternoon availability");
            return {
                message: "üìÖ Beklager, jeg kunne ikke tjekke eftermiddagstider. Pr√∏v venligst igen.",
                suggestions: ["Pr√∏v igen", "Se kalender", "Book manuelt"]
            };
        }
    }

    /**
     * Get conversation context from chat history
     */
    private getConversationContext(history: ChatMessage[]): string {
        if (!history || history.length === 0) {
            return "Ingen tidligere samtale.";
        }

        const recentMessages = history.slice(-4); // Last 4 messages for context
        const contextLines = recentMessages.map(msg => {
            const role = msg.role === "user" ? "Bruger" : "Friday";
            const content = msg.content.length > 100
                ? msg.content.substring(0, 100) + "..."
                : msg.content;
            return `${role}: ${content}`;
        });

        return contextLines.join('\n');
    }

    /**
     * Check if the query is related to date/time
     */
    private isDateTimeRelated(userMessage: string, intent?: string): boolean {
        const timeKeywords = [
            'i dag', 'i morgen', 'i g√•r', 'denne uge', 'n√¶ste uge', 'n√¶ste m√•ned',
            'formiddag', 'eftermiddag', 'aften', 'morgen', 'aften',
            'mandag', 'tirsdag', 'onsdag', 'torsdag', 'fredag', 'l√∏rdag', 's√∏ndag',
            'januar', 'februar', 'marts', 'april', 'maj', 'juni',
            'juli', 'august', 'september', 'oktober', 'november', 'december',
            'kl', 'klokken', 'tid', 'time', 'minut', 'sekund'
        ];

        const message = userMessage.toLowerCase();
        const hasTimeKeywords = timeKeywords.some(keyword => message.includes(keyword));
        const isTimeIntent = intent === 'availability' || intent === 'booking' || intent === 'reschedule';

        return hasTimeKeywords || isTimeIntent;
    }

    /**
     * Build time context for better AI responses
     */
    private buildTimeContext(currentTime: CurrentDateTime): string {
        const { date, time, dayOfWeek, dayOfWeekEn } = currentTime;

        // Determine if weekend based on day name
        const isWeekend = dayOfWeekEn === 'Saturday' || dayOfWeekEn === 'Sunday';
        // Determine if business hours (9-17 on weekdays)
        const hour = parseInt(time.split(':')[0]);
        const isBusinessHours = !isWeekend && hour >= 9 && hour < 17;

        let context = `üìÖ **AKTUEL TID:**
‚Ä¢ Dato: ${formatDateTimeDanish(new Date(date))}
‚Ä¢ Tid: ${time}
‚Ä¢ Dag: ${dayOfWeek}`;

        if (isWeekend) {
            context += "\n‚Ä¢ Status: Weekend";
        } else if (isBusinessHours) {
            context += "\n‚Ä¢ Status: Arbejdstid";
        } else {
            context += "\n‚Ä¢ Status: Uden for arbejdstid";
        }

        return context;
    }

    /**
     * Handle unknown intents with intelligent fallback
     */
    private handleUnknownIntent(message: string, history: ChatMessage[]): FridayResponse {
        // Analyze message for keywords to provide better suggestions
        const lowerMessage = message.toLowerCase();

        if (lowerMessage.includes('lead') || lowerMessage.includes('kunde')) {
            return this.getLeadsResponse();
        }

        if (lowerMessage.includes('email') || lowerMessage.includes('mail')) {
            return this.handleEmailResponse(message);
        }

        if (lowerMessage.includes('kalender') || lowerMessage.includes('m√∏de') || lowerMessage.includes('aftale')) {
            return this.handleBookingQuery(message);
        }

        if (lowerMessage.includes('hj√¶lp') || lowerMessage.includes('help')) {
            return this.handleHelpRequest(message);
        }

        // Check conversation context for better understanding
        const hasRecentContext = history.length > 0;
        const contextHint = hasRecentContext
            ? "Baseret p√• vores samtale, "
            : "";

        return {
            message: `ü§î ${contextHint}Jeg er ikke helt sikker p√•, hvad du mener.\n\nJeg kan hj√¶lpe med:\n‚Ä¢ **Leads** og kunde h√•ndtering\n‚Ä¢ **Booking** og kalender\n‚Ä¢ **Emails** og auto-svar\n‚Ä¢ **Statistik** og rapporter\n\nHvad vil du gerne arbejde med?`,
            suggestions: ["Vis leads", "Book m√∏de", "Se emails", "Dashboard", "Hj√¶lp"]
        };
    }
}

/**
 * Export singleton instance
 */
export const fridayAI = new FridayAI();
