version: '3.8'

services:
  # Redis Cache (optional - for development)
  redis:
    image: redis:7-alpine
    container_name: renos-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: renos-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: renos_db
      POSTGRES_USER: renos_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-change_me_in_production}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U renos_user -d renos_db" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: renos-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PORT: 3000
      DATABASE_URL: postgresql://renos_user:${DB_PASSWORD:-change_me_in_production}@postgres:5432/renos_db
      NODE_ENV: production
      # Copy from .env
      RUN_MODE: ${RUN_MODE:-dry-run}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ORGANISATION_NAME: ${ORGANISATION_NAME}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GEMINI_KEY: ${GEMINI_KEY}
      GOOGLE_PROJECT_ID: ${GOOGLE_PROJECT_ID}
      GOOGLE_CLIENT_EMAIL: ${GOOGLE_CLIENT_EMAIL}
      GOOGLE_PRIVATE_KEY: ${GOOGLE_PRIVATE_KEY}
      GOOGLE_IMPERSONATED_USER: ${GOOGLE_IMPERSONATED_USER}
      DEFAULT_EMAIL_FROM: ${DEFAULT_EMAIL_FROM}
      GMAIL_CLIENT_ID: ${GMAIL_CLIENT_ID}
      GMAIL_CLIENT_SECRET: ${GMAIL_CLIENT_SECRET}
      GMAIL_REDIRECT_URI: ${GMAIL_REDIRECT_URI}
      GMAIL_PROJECT_ID: ${GMAIL_PROJECT_ID}
      GMAIL_USER_EMAIL: ${GMAIL_USER_EMAIL}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost}
    ports:
      - "3000:3000"
    volumes:
      - ./prisma:/app/prisma
    healthcheck:
      test: [ "CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: sh -c "npx prisma migrate deploy && npm start"

  # Frontend
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: renos-frontend
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "80:80"
    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health" ]
      interval: 30s
      timeout: 5s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: renos-network
