{"version":3,"sources":["C:\\Users\\empir\\Tekup-org\\apps\\flow-api\\src\\auth\\tenant-context.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { TenantContextService } from './tenant-context.service';\r\nimport { PrismaService } from '../prisma/prisma.service';\r\n\r\n// Mock PrismaService\r\nconst mockPrismaService = {\r\n  $executeRaw: jest.fn(),\r\n  $executeRawUnsafe: jest.fn(),\r\n};\r\n\r\ndescribe('TenantContextService', () => {\r\n  let service: TenantContextService;\r\n  let prismaService: PrismaService;\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        TenantContextService,\r\n        {\r\n          provide: PrismaService,\r\n          useValue: mockPrismaService,\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<TenantContextService>(TenantContextService);\r\n    prismaService = module.get<PrismaService>(PrismaService);\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(service).toBeDefined();\r\n  });\r\n\r\n  describe('setTenantContext', () => {\r\n    it('should call prisma with parameterized query', async () => {\r\n      const tenantId = 'test-tenant-id';\r\n      mockPrismaService.$executeRaw.mockResolvedValue(1);\r\n\r\n      await service.setTenantContext(tenantId);\r\n\r\n      // Verify that $executeRaw was called (parameterized) rather than $executeRawUnsafe\r\n      expect(prismaService.$executeRaw).toHaveBeenCalled();\r\n      expect(prismaService.$executeRawUnsafe).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should reject invalid tenant IDs', async () => {\r\n      const invalidTenantId = ''; // Empty string is invalid\r\n      \r\n      await expect(service.setTenantContext(invalidTenantId)).rejects.toThrow('Invalid tenant ID provided');\r\n      \r\n      // Ensure no database call was made\r\n      expect(prismaService.$executeRaw).not.toHaveBeenCalled();\r\n      expect(prismaService.$executeRawUnsafe).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should handle empty tenant ID', async () => {\r\n      const emptyTenantId = '';\r\n      \r\n      await expect(service.setTenantContext(emptyTenantId)).rejects.toThrow('Invalid tenant ID provided');\r\n      \r\n      // Ensure no database call was made\r\n      expect(prismaService.$executeRaw).not.toHaveBeenCalled();\r\n      expect(prismaService.$executeRawUnsafe).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('isValidTenantId', () => {\r\n    it('should validate proper tenant ID', () => {\r\n      const validTenantId = '123e4567-e89b-12d3-a456-426614174000';\r\n      expect(service.isValidTenantId(validTenantId)).toBe(true);\r\n    });\r\n\r\n    it('should reject tenant ID that is too long', () => {\r\n      const longTenantId = 'a'.repeat(37); // 37 characters, exceeds limit of 36\r\n      expect(service.isValidTenantId(longTenantId)).toBe(false);\r\n    });\r\n\r\n    it('should reject empty tenant ID', () => {\r\n      const emptyTenantId = '';\r\n      expect(service.isValidTenantId(emptyTenantId)).toBe(false);\r\n    });\r\n\r\n    it('should accept tenant ID at maximum length', () => {\r\n      const maxLenTenantId = 'a'.repeat(36); // 36 characters, at limit\r\n      expect(service.isValidTenantId(maxLenTenantId)).toBe(true);\r\n    });\r\n  });\r\n});"],"names":["mockPrismaService","$executeRaw","jest","fn","$executeRawUnsafe","describe","service","prismaService","beforeEach","module","Test","createTestingModule","providers","TenantContextService","provide","PrismaService","useValue","compile","get","afterEach","clearAllMocks","it","expect","toBeDefined","tenantId","mockResolvedValue","setTenantContext","toHaveBeenCalled","not","invalidTenantId","rejects","toThrow","emptyTenantId","validTenantId","isValidTenantId","toBe","longTenantId","repeat","maxLenTenantId"],"mappings":";;;;yBAAoC;sCACC;+BACP;AAE9B,qBAAqB;AACrB,MAAMA,oBAAoB;IACxBC,aAAaC,KAAKC,EAAE;IACpBC,mBAAmBF,KAAKC,EAAE;AAC5B;AAEAE,SAAS,wBAAwB;IAC/B,IAAIC;IACJ,IAAIC;IAEJC,WAAW;QACT,MAAMC,SAAwB,MAAMC,aAAI,CAACC,mBAAmB,CAAC;YAC3DC,WAAW;gBACTC,0CAAoB;gBACpB;oBACEC,SAASC,4BAAa;oBACtBC,UAAUhB;gBACZ;aACD;QACH,GAAGiB,OAAO;QAEVX,UAAUG,OAAOS,GAAG,CAAuBL,0CAAoB;QAC/DN,gBAAgBE,OAAOS,GAAG,CAAgBH,4BAAa;IACzD;IAEAI,UAAU;QACRjB,KAAKkB,aAAa;IACpB;IAEAC,GAAG,qBAAqB;QACtBC,OAAOhB,SAASiB,WAAW;IAC7B;IAEAlB,SAAS,oBAAoB;QAC3BgB,GAAG,+CAA+C;YAChD,MAAMG,WAAW;YACjBxB,kBAAkBC,WAAW,CAACwB,iBAAiB,CAAC;YAEhD,MAAMnB,QAAQoB,gBAAgB,CAACF;YAE/B,mFAAmF;YACnFF,OAAOf,cAAcN,WAAW,EAAE0B,gBAAgB;YAClDL,OAAOf,cAAcH,iBAAiB,EAAEwB,GAAG,CAACD,gBAAgB;QAC9D;QAEAN,GAAG,oCAAoC;YACrC,MAAMQ,kBAAkB,IAAI,0BAA0B;YAEtD,MAAMP,OAAOhB,QAAQoB,gBAAgB,CAACG,kBAAkBC,OAAO,CAACC,OAAO,CAAC;YAExE,mCAAmC;YACnCT,OAAOf,cAAcN,WAAW,EAAE2B,GAAG,CAACD,gBAAgB;YACtDL,OAAOf,cAAcH,iBAAiB,EAAEwB,GAAG,CAACD,gBAAgB;QAC9D;QAEAN,GAAG,iCAAiC;YAClC,MAAMW,gBAAgB;YAEtB,MAAMV,OAAOhB,QAAQoB,gBAAgB,CAACM,gBAAgBF,OAAO,CAACC,OAAO,CAAC;YAEtE,mCAAmC;YACnCT,OAAOf,cAAcN,WAAW,EAAE2B,GAAG,CAACD,gBAAgB;YACtDL,OAAOf,cAAcH,iBAAiB,EAAEwB,GAAG,CAACD,gBAAgB;QAC9D;IACF;IAEAtB,SAAS,mBAAmB;QAC1BgB,GAAG,oCAAoC;YACrC,MAAMY,gBAAgB;YACtBX,OAAOhB,QAAQ4B,eAAe,CAACD,gBAAgBE,IAAI,CAAC;QACtD;QAEAd,GAAG,4CAA4C;YAC7C,MAAMe,eAAe,IAAIC,MAAM,CAAC,KAAK,qCAAqC;YAC1Ef,OAAOhB,QAAQ4B,eAAe,CAACE,eAAeD,IAAI,CAAC;QACrD;QAEAd,GAAG,iCAAiC;YAClC,MAAMW,gBAAgB;YACtBV,OAAOhB,QAAQ4B,eAAe,CAACF,gBAAgBG,IAAI,CAAC;QACtD;QAEAd,GAAG,6CAA6C;YAC9C,MAAMiB,iBAAiB,IAAID,MAAM,CAAC,KAAK,0BAA0B;YACjEf,OAAOhB,QAAQ4B,eAAe,CAACI,iBAAiBH,IAAI,CAAC;QACvD;IACF;AACF"}