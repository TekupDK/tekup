{"version":3,"sources":["C:\\Users\\empir\\Tekup-org\\apps\\flow-api\\src\\performance\\__tests__\\performance.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { PerformanceService, QueryMetadata } from '../performance.service.js';\r\nimport { PrismaService } from '../../prisma/prisma.service.js';\r\nimport { MetricsService } from '../../metrics/metrics.service.js';\r\n\r\ndescribe('PerformanceService', () => {\r\n  let service: PerformanceService;\r\n  let prismaService: jest.Mocked<PrismaService>;\r\n  let metricsService: jest.Mocked<MetricsService>;\r\n\r\n  beforeEach(async () => {\r\n    const mockPrismaService = {\r\n      $queryRawUnsafe: jest.fn(),\r\n    };\r\n\r\n    const mockMetricsService = {\r\n      histogram: jest.fn(),\r\n      increment: jest.fn(),\r\n    };\r\n\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        PerformanceService,\r\n        { provide: PrismaService, useValue: mockPrismaService },\r\n        { provide: MetricsService, useValue: mockMetricsService },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<PerformanceService>(PerformanceService);\r\n    prismaService = module.get(PrismaService);\r\n    metricsService = module.get(MetricsService);\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(service).toBeDefined();\r\n  });\r\n\r\n  describe('measureQuery', () => {\r\n    it('should measure query execution time', async () => {\r\n      const mockQuery = jest.fn().mockResolvedValue([{ id: 1 }, { id: 2 }]);\r\n      const metadata: QueryMetadata = {\r\n        operation: 'SELECT',\r\n        table: 'leads',\r\n        tenantId: 'tenant1',\r\n      };\r\n\r\n      const result = await service.measureQuery(mockQuery, metadata);\r\n\r\n      expect(result).toEqual([{ id: 1 }, { id: 2 }]);\r\n      expect(mockQuery).toHaveBeenCalledTimes(1);\r\n      expect(metricsService.histogram).toHaveBeenCalledWith(\r\n        'database_query_duration_seconds',\r\n        expect.any(Number),\r\n        {\r\n          operation: 'SELECT',\r\n          table: 'leads',\r\n          tenant_id: 'tenant1',\r\n        }\r\n      );\r\n      expect(metricsService.increment).toHaveBeenCalledWith(\r\n        'database_queries_total',\r\n        {\r\n          operation: 'SELECT',\r\n          table: 'leads',\r\n          tenant_id: 'tenant1',\r\n          status: 'success',\r\n        }\r\n      );\r\n    });\r\n\r\n    it('should handle query errors and record metrics', async () => {\r\n      const mockQuery = jest.fn().mockRejectedValue(new Error('Database error'));\r\n      const metadata: QueryMetadata = {\r\n        operation: 'SELECT',\r\n        table: 'leads',\r\n        tenantId: 'tenant1',\r\n      };\r\n\r\n      await expect(service.measureQuery(mockQuery, metadata)).rejects.toThrow('Database error');\r\n\r\n      expect(metricsService.increment).toHaveBeenCalledWith(\r\n        'database_queries_total',\r\n        {\r\n          operation: 'SELECT',\r\n          table: 'leads',\r\n          tenant_id: 'tenant1',\r\n          status: 'error',\r\n        }\r\n      );\r\n    });\r\n\r\n    it('should detect slow queries', async () => {\r\n      const mockQuery = jest.fn().mockImplementation(() => \r\n        new Promise(resolve => setTimeout(() => resolve([]), 1100))\r\n      );\r\n      const metadata: QueryMetadata = {\r\n        operation: 'SELECT',\r\n        table: 'leads',\r\n        tenantId: 'tenant1',\r\n      };\r\n\r\n      await service.measureQuery(mockQuery, metadata);\r\n\r\n      const slowQueries = service.getSlowQueries();\r\n      expect(slowQueries).toHaveLength(1);\r\n      expect(slowQueries[0].metadata.operation).toBe('SELECT');\r\n      expect(slowQueries[0].metadata.table).toBe('leads');\r\n    });\r\n  });\r\n\r\n  describe('optimizeQuery', () => {\r\n    it('should provide optimization suggestions for SELECT *', () => {\r\n      const query = 'SELECT * FROM leads WHERE tenant_id = $1';\r\n      const result = service.optimizeQuery(query, ['tenant1']);\r\n\r\n      expect(result.suggestions).toContain('Avoid SELECT * - specify only needed columns');\r\n      expect(result.estimatedImprovement).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should suggest LIMIT for ORDER BY queries', () => {\r\n      const query = 'SELECT id FROM leads ORDER BY created_at';\r\n      const result = service.optimizeQuery(query, []);\r\n\r\n      expect(result.suggestions).toContain('Consider adding LIMIT when using ORDER BY');\r\n    });\r\n\r\n    it('should suggest full-text search for LIKE queries', () => {\r\n      const query = 'SELECT id FROM leads WHERE payload LIKE %search%';\r\n      const result = service.optimizeQuery(query, []);\r\n\r\n      expect(result.suggestions).toContain('Consider using full-text search instead of LIKE with leading wildcard');\r\n    });\r\n  });\r\n\r\n  describe('analyzePerformance', () => {\r\n    it('should return empty report when no queries recorded', async () => {\r\n      const report = await service.analyzePerformance();\r\n\r\n      expect(report.avgResponseTime).toBe(0);\r\n      expect(report.p95ResponseTime).toBe(0);\r\n      expect(report.p99ResponseTime).toBe(0);\r\n      expect(report.throughput).toBe(0);\r\n      expect(report.recommendations).toContain('No query data available yet');\r\n    });\r\n\r\n    it('should calculate performance metrics correctly', async () => {\r\n      // Simulate some queries with artificial delay\r\n      const mockQuery = jest.fn().mockImplementation(() => \r\n        new Promise(resolve => setTimeout(() => resolve([]), 10))\r\n      );\r\n      const metadata: QueryMetadata = {\r\n        operation: 'SELECT',\r\n        table: 'leads',\r\n        tenantId: 'tenant1',\r\n      };\r\n\r\n      // Add multiple queries with different execution times\r\n      for (let i = 0; i < 10; i++) {\r\n        await service.measureQuery(mockQuery, metadata);\r\n      }\r\n\r\n      const report = await service.analyzePerformance();\r\n\r\n      expect(report.avgResponseTime).toBeGreaterThan(0);\r\n      expect(report.p95ResponseTime).toBeGreaterThan(0);\r\n      expect(report.recommendations).toBeDefined();\r\n      expect(report.throughput).toBeGreaterThanOrEqual(0);\r\n    });\r\n  });\r\n\r\n  describe('getSlowQueries', () => {\r\n    it('should return slow queries sorted by execution time', async () => {\r\n      const fastQuery = jest.fn().mockResolvedValue([]);\r\n      const slowQuery = jest.fn().mockImplementation(() => \r\n        new Promise(resolve => setTimeout(() => resolve([]), 1100))\r\n      );\r\n\r\n      const metadata: QueryMetadata = {\r\n        operation: 'SELECT',\r\n        table: 'leads',\r\n        tenantId: 'tenant1',\r\n      };\r\n\r\n      await service.measureQuery(fastQuery, metadata);\r\n      await service.measureQuery(slowQuery, { ...metadata, operation: 'SLOW_SELECT' });\r\n\r\n      const slowQueries = service.getSlowQueries();\r\n      expect(slowQueries).toHaveLength(1);\r\n      expect(slowQueries[0].metadata.operation).toBe('SLOW_SELECT');\r\n    });\r\n  });\r\n\r\n  describe('getMetrics', () => {\r\n    it('should return current performance metrics', () => {\r\n      const metrics = service.getMetrics();\r\n\r\n      expect(metrics).toHaveProperty('totalQueries');\r\n      expect(metrics).toHaveProperty('totalExecutionTime');\r\n      expect(metrics).toHaveProperty('slowQueryCount');\r\n      expect(metrics).toHaveProperty('avgExecutionTime');\r\n      expect(metrics).toHaveProperty('slowQueryRate');\r\n    });\r\n  });\r\n});"],"names":["describe","service","prismaService","metricsService","beforeEach","mockPrismaService","$queryRawUnsafe","jest","fn","mockMetricsService","histogram","increment","module","Test","createTestingModule","providers","PerformanceService","provide","PrismaService","useValue","MetricsService","compile","get","it","expect","toBeDefined","mockQuery","mockResolvedValue","id","metadata","operation","table","tenantId","result","measureQuery","toEqual","toHaveBeenCalledTimes","toHaveBeenCalledWith","any","Number","tenant_id","status","mockRejectedValue","Error","rejects","toThrow","mockImplementation","Promise","resolve","setTimeout","slowQueries","getSlowQueries","toHaveLength","toBe","query","optimizeQuery","suggestions","toContain","estimatedImprovement","toBeGreaterThan","report","analyzePerformance","avgResponseTime","p95ResponseTime","p99ResponseTime","throughput","recommendations","i","toBeGreaterThanOrEqual","fastQuery","slowQuery","metrics","getMetrics","toHaveProperty"],"mappings":"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"}