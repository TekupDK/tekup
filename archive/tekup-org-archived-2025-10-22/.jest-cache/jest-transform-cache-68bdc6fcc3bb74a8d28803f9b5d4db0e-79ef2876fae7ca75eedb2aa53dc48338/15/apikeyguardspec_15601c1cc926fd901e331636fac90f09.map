{"version":3,"sources":["C:\\Users\\empir\\Tekup-org\\apps\\flow-api\\src\\auth\\__tests__\\api-key.guard.spec.ts"],"sourcesContent":["import { ApiKeyGuard } from '../api-key.guard.js';\r\nimport { ExecutionContext, UnauthorizedException } from '@nestjs/common';\r\nimport { Reflector } from '@nestjs/core';\r\n\r\ndescribe('ApiKeyGuard', () => {\r\n  let guard: ApiKeyGuard;\r\n  let mockContext: ExecutionContext;\r\n  let mockRequest: any;\r\n  let mockReflector: Reflector;\r\n\r\n  beforeEach(() => {\r\n    mockReflector = new Reflector();\r\n    guard = new ApiKeyGuard(mockReflector);\r\n    \r\n    mockRequest = {\r\n      tenantId: undefined,\r\n      apiKeyId: undefined,\r\n    };\r\n\r\n    mockContext = {\r\n      switchToHttp: jest.fn().mockReturnValue({\r\n        getRequest: jest.fn().mockReturnValue(mockRequest),\r\n      }),\r\n    } as any;\r\n  });\r\n\r\n  describe('canActivate', () => {\r\n    it('should allow request when tenantId and apiKeyId are present', () => {\r\n      mockRequest.tenantId = 'tenant-123';\r\n      mockRequest.apiKeyId = 'key-456';\r\n\r\n      const result = guard.canActivate(mockContext);\r\n\r\n      expect(result).toBe(true);\r\n    });\r\n\r\n    it('should throw UnauthorizedException when tenantId is missing', () => {\r\n      mockRequest.apiKeyId = 'key-456';\r\n      // tenantId is undefined\r\n\r\n      expect(() => guard.canActivate(mockContext)).toThrow(\r\n        new UnauthorizedException({ error: 'missing_valid_api_key', message: 'Valid API key required for this endpoint' })\r\n      );\r\n    });\r\n\r\n    it('should throw UnauthorizedException when apiKeyId is missing', () => {\r\n      mockRequest.tenantId = 'tenant-123';\r\n      // apiKeyId is undefined\r\n\r\n      expect(() => guard.canActivate(mockContext)).toThrow(\r\n        new UnauthorizedException({ error: 'missing_valid_api_key', message: 'Valid API key required for this endpoint' })\r\n      );\r\n    });\r\n\r\n    it('should throw UnauthorizedException when both tenantId and apiKeyId are missing', () => {\r\n      // both undefined\r\n\r\n      expect(() => guard.canActivate(mockContext)).toThrow(\r\n        new UnauthorizedException({ error: 'missing_valid_api_key', message: 'Valid API key required for this endpoint' })\r\n      );\r\n    });\r\n  });\r\n});\r\n"],"names":["describe","guard","mockContext","mockRequest","mockReflector","beforeEach","Reflector","ApiKeyGuard","tenantId","undefined","apiKeyId","switchToHttp","jest","fn","mockReturnValue","getRequest","it","result","canActivate","expect","toBe","toThrow","UnauthorizedException","error","message"],"mappings":";;;;6BAA4B;wBAC4B;sBAC9B;AAE1BA,SAAS,eAAe;IACtB,IAAIC;IACJ,IAAIC;IACJ,IAAIC;IACJ,IAAIC;IAEJC,WAAW;QACTD,gBAAgB,IAAIE,eAAS;QAC7BL,QAAQ,IAAIM,wBAAW,CAACH;QAExBD,cAAc;YACZK,UAAUC;YACVC,UAAUD;QACZ;QAEAP,cAAc;YACZS,cAAcC,KAAKC,EAAE,GAAGC,eAAe,CAAC;gBACtCC,YAAYH,KAAKC,EAAE,GAAGC,eAAe,CAACX;YACxC;QACF;IACF;IAEAH,SAAS,eAAe;QACtBgB,GAAG,+DAA+D;YAChEb,YAAYK,QAAQ,GAAG;YACvBL,YAAYO,QAAQ,GAAG;YAEvB,MAAMO,SAAShB,MAAMiB,WAAW,CAAChB;YAEjCiB,OAAOF,QAAQG,IAAI,CAAC;QACtB;QAEAJ,GAAG,+DAA+D;YAChEb,YAAYO,QAAQ,GAAG;YACvB,wBAAwB;YAExBS,OAAO,IAAMlB,MAAMiB,WAAW,CAAChB,cAAcmB,OAAO,CAClD,IAAIC,6BAAqB,CAAC;gBAAEC,OAAO;gBAAyBC,SAAS;YAA2C;QAEpH;QAEAR,GAAG,+DAA+D;YAChEb,YAAYK,QAAQ,GAAG;YACvB,wBAAwB;YAExBW,OAAO,IAAMlB,MAAMiB,WAAW,CAAChB,cAAcmB,OAAO,CAClD,IAAIC,6BAAqB,CAAC;gBAAEC,OAAO;gBAAyBC,SAAS;YAA2C;QAEpH;QAEAR,GAAG,kFAAkF;YACnF,iBAAiB;YAEjBG,OAAO,IAAMlB,MAAMiB,WAAW,CAAChB,cAAcmB,OAAO,CAClD,IAAIC,6BAAqB,CAAC;gBAAEC,OAAO;gBAAyBC,SAAS;YAA2C;QAEpH;IACF;AACF"}