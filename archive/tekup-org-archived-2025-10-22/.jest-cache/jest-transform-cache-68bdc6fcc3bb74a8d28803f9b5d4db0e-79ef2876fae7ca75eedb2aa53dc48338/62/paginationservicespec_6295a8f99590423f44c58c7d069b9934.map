{"version":3,"sources":["C:\\Users\\empir\\Tekup-org\\apps\\flow-api\\src\\common\\pagination\\__tests__\\pagination.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { PaginationService } from '../pagination.service.js';\r\nimport { PrismaService } from '../../../prisma/prisma.service.js';\r\nimport { BadRequestException } from '@nestjs/common';\r\n\r\ndescribe('PaginationService', () => {\r\n  let service: PaginationService;\r\n  let prismaService: jest.Mocked<PrismaService>;\r\n\r\n  const mockModel = {\r\n    count: jest.fn(),\r\n    findMany: jest.fn(),\r\n  };\r\n\r\n  beforeEach(async () => {\r\n    const mockPrismaService = {\r\n      lead: mockModel,\r\n    };\r\n\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        PaginationService,\r\n        { provide: PrismaService, useValue: mockPrismaService },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<PaginationService>(PaginationService);\r\n    prismaService = module.get(PrismaService);\r\n  });\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(service).toBeDefined();\r\n  });\r\n\r\n  describe('paginate', () => {\r\n    it('should return paginated results with correct metadata', async () => {\r\n      const mockData = [\r\n        { id: '1', name: 'Lead 1' },\r\n        { id: '2', name: 'Lead 2' },\r\n      ];\r\n      const totalCount = 25;\r\n\r\n      mockModel.count.mockResolvedValue(totalCount);\r\n      mockModel.findMany.mockResolvedValue(mockData);\r\n\r\n      const result = await service.paginate(mockModel, {\r\n        page: 2,\r\n        limit: 10,\r\n        sortBy: 'createdAt',\r\n        sortOrder: 'desc',\r\n      });\r\n\r\n      expect(result.data).toEqual(mockData);\r\n      expect(result.pagination).toEqual({\r\n        page: 2,\r\n        limit: 10,\r\n        total: 25,\r\n        totalPages: 3,\r\n        hasNext: true,\r\n        hasPrevious: true,\r\n      });\r\n\r\n      expect(mockModel.findMany).toHaveBeenCalledWith({\r\n        where: {},\r\n        include: undefined,\r\n        select: undefined,\r\n        skip: 10,\r\n        take: 10,\r\n        orderBy: { createdAt: 'desc' },\r\n      });\r\n    });\r\n\r\n    it('should handle first page correctly', async () => {\r\n      mockModel.count.mockResolvedValue(15);\r\n      mockModel.findMany.mockResolvedValue([]);\r\n\r\n      const result = await service.paginate(mockModel, {\r\n        page: 1,\r\n        limit: 10,\r\n      });\r\n\r\n      expect(result.pagination.hasNext).toBe(true);\r\n      expect(result.pagination.hasPrevious).toBe(false);\r\n    });\r\n\r\n    it('should handle last page correctly', async () => {\r\n      mockModel.count.mockResolvedValue(25);\r\n      mockModel.findMany.mockResolvedValue([]);\r\n\r\n      const result = await service.paginate(mockModel, {\r\n        page: 3,\r\n        limit: 10,\r\n      });\r\n\r\n      expect(result.pagination.hasNext).toBe(false);\r\n      expect(result.pagination.hasPrevious).toBe(true);\r\n    });\r\n\r\n    it('should use default values when not provided', async () => {\r\n      mockModel.count.mockResolvedValue(0);\r\n      mockModel.findMany.mockResolvedValue([]);\r\n\r\n      const result = await service.paginate(mockModel, {});\r\n\r\n      expect(result.pagination.page).toBe(1);\r\n      expect(result.pagination.limit).toBe(20);\r\n      expect(mockModel.findMany).toHaveBeenCalledWith({\r\n        where: {},\r\n        include: undefined,\r\n        select: undefined,\r\n        skip: 0,\r\n        take: 20,\r\n        orderBy: { id: 'desc' },\r\n      });\r\n    });\r\n\r\n    it('should enforce maximum limit', async () => {\r\n      mockModel.count.mockResolvedValue(0);\r\n      mockModel.findMany.mockResolvedValue([]);\r\n\r\n      const result = await service.paginate(mockModel, {\r\n        limit: 200, // Above max limit\r\n      });\r\n\r\n      expect(result.pagination.limit).toBe(100);\r\n    });\r\n  });\r\n\r\n  describe('paginateWithCursor', () => {\r\n    it('should return cursor-based paginated results', async () => {\r\n      const mockData = [\r\n        { id: '3', createdAt: new Date('2023-01-03') },\r\n        { id: '2', createdAt: new Date('2023-01-02') },\r\n        { id: '1', createdAt: new Date('2023-01-01') },\r\n      ];\r\n\r\n      mockModel.findMany.mockResolvedValue(mockData);\r\n\r\n      const result = await service.paginateWithCursor(mockModel, {\r\n        limit: 2,\r\n        sortBy: 'createdAt',\r\n        sortOrder: 'desc',\r\n      });\r\n\r\n      expect(result.data).toHaveLength(2);\r\n      expect(result.pagination.hasNext).toBe(true);\r\n      expect(result.pagination.hasPrevious).toBe(false);\r\n      expect(result.pagination.nextCursor).toBeDefined();\r\n    });\r\n\r\n    it('should handle cursor navigation', async () => {\r\n      const cursor = Buffer.from('2023-01-02T00:00:00.000Z').toString('base64');\r\n      const mockData = [\r\n        { id: '1', createdAt: new Date('2023-01-01') },\r\n      ];\r\n\r\n      mockModel.findMany.mockResolvedValue(mockData);\r\n\r\n      const result = await service.paginateWithCursor(mockModel, {\r\n        cursor,\r\n        limit: 10,\r\n        sortBy: 'createdAt',\r\n        sortOrder: 'desc',\r\n      });\r\n\r\n      expect(result.pagination.hasPrevious).toBe(true);\r\n      expect(result.pagination.previousCursor).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe('validatePaginationParams', () => {\r\n    it('should throw error for invalid page', () => {\r\n      expect(() => {\r\n        service.validatePaginationParams({ page: 0 });\r\n      }).toThrow(BadRequestException);\r\n\r\n      expect(() => {\r\n        service.validatePaginationParams({ page: -1 });\r\n      }).toThrow(BadRequestException);\r\n\r\n      expect(() => {\r\n        service.validatePaginationParams({ page: 1.5 });\r\n      }).toThrow(BadRequestException);\r\n    });\r\n\r\n    it('should throw error for invalid limit', () => {\r\n      expect(() => {\r\n        service.validatePaginationParams({ limit: 0 });\r\n      }).toThrow(BadRequestException);\r\n\r\n      expect(() => {\r\n        service.validatePaginationParams({ limit: 101 });\r\n      }).toThrow(BadRequestException);\r\n\r\n      expect(() => {\r\n        service.validatePaginationParams({ limit: 1.5 });\r\n      }).toThrow(BadRequestException);\r\n    });\r\n\r\n    it('should throw error for invalid sort order', () => {\r\n      expect(() => {\r\n        service.validatePaginationParams({ sortOrder: 'invalid' as any });\r\n      }).toThrow(BadRequestException);\r\n    });\r\n\r\n    it('should pass validation for valid params', () => {\r\n      expect(() => {\r\n        service.validatePaginationParams({\r\n          page: 1,\r\n          limit: 20,\r\n          sortOrder: 'asc',\r\n        });\r\n      }).not.toThrow();\r\n    });\r\n  });\r\n\r\n  describe('cursor encoding/decoding', () => {\r\n    it('should encode and decode string values', () => {\r\n      const testValue = 'test-string';\r\n      const encoded = service['encodeCursor'](testValue);\r\n      const decoded = service['decodeCursor'](encoded);\r\n      \r\n      expect(decoded).toBe(testValue);\r\n    });\r\n\r\n    it('should encode and decode date values', () => {\r\n      const testDate = new Date('2023-01-01T00:00:00.000Z');\r\n      const encoded = service['encodeCursor'](testDate);\r\n      const decoded = service['decodeCursor'](encoded);\r\n      \r\n      expect(decoded).toEqual(testDate);\r\n    });\r\n\r\n    it('should encode and decode numeric values', () => {\r\n      const testNumber = 12345;\r\n      const encoded = service['encodeCursor'](testNumber);\r\n      const decoded = service['decodeCursor'](encoded);\r\n      \r\n      expect(decoded).toBe(testNumber);\r\n    });\r\n\r\n    it('should handle null and undefined values', () => {\r\n      expect(service['encodeCursor'](null)).toBe('');\r\n      expect(service['encodeCursor'](undefined)).toBe('');\r\n    });\r\n\r\n    it('should throw error for invalid cursor', () => {\r\n      expect(() => {\r\n        service['decodeCursor']('');\r\n      }).toThrow(BadRequestException);\r\n      \r\n      expect(() => {\r\n        service['decodeCursor']('   ');\r\n      }).toThrow(BadRequestException);\r\n    });\r\n  });\r\n\r\n  describe('buildOrderBy', () => {\r\n    it('should build simple orderBy clause', () => {\r\n      const orderBy = service['buildOrderBy']('name', 'asc');\r\n      expect(orderBy).toEqual({ name: 'asc' });\r\n    });\r\n\r\n    it('should build nested orderBy clause', () => {\r\n      const orderBy = service['buildOrderBy']('user.name', 'desc');\r\n      expect(orderBy).toEqual({ user: { name: 'desc' } });\r\n    });\r\n\r\n    it('should use default values', () => {\r\n      const orderBy = service['buildOrderBy']();\r\n      expect(orderBy).toEqual({ id: 'desc' });\r\n    });\r\n  });\r\n\r\n  describe('utility methods', () => {\r\n    it('should return default options', () => {\r\n      const defaults = service.getDefaultOptions();\r\n      expect(defaults).toEqual({ page: 1, limit: 20 });\r\n    });\r\n\r\n    it('should return max limit', () => {\r\n      const maxLimit = service.getMaxLimit();\r\n      expect(maxLimit).toBe(100);\r\n    });\r\n\r\n    it('should create pagination metadata', () => {\r\n      const meta = service.createPaginationMeta(2, 10, 25, 'next', 'prev');\r\n      \r\n      expect(meta).toEqual({\r\n        currentPage: 2,\r\n        itemsPerPage: 10,\r\n        totalItems: 25,\r\n        totalPages: 3,\r\n        hasNextPage: true,\r\n        hasPreviousPage: true,\r\n        nextCursor: 'next',\r\n        previousCursor: 'prev',\r\n      });\r\n    });\r\n  });\r\n});"],"names":["describe","service","prismaService","mockModel","count","jest","fn","findMany","beforeEach","mockPrismaService","lead","module","Test","createTestingModule","providers","PaginationService","provide","PrismaService","useValue","compile","get","clearAllMocks","it","expect","toBeDefined","mockData","id","name","totalCount","mockResolvedValue","result","paginate","page","limit","sortBy","sortOrder","data","toEqual","pagination","total","totalPages","hasNext","hasPrevious","toHaveBeenCalledWith","where","include","undefined","select","skip","take","orderBy","createdAt","toBe","Date","paginateWithCursor","toHaveLength","nextCursor","cursor","Buffer","from","toString","previousCursor","validatePaginationParams","toThrow","BadRequestException","not","testValue","encoded","decoded","testDate","testNumber","user","defaults","getDefaultOptions","maxLimit","getMaxLimit","meta","createPaginationMeta","currentPage","itemsPerPage","totalItems","hasNextPage","hasPreviousPage"],"mappings":"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"}