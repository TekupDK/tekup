{"version":3,"sources":["C:\\Users\\empir\\Tekup-org\\apps\\flow-api\\src\\ingestion\\parsers\\leadpoint.ts"],"sourcesContent":["import { RawEmailInput, ParseResult, ParsedLeadPayload } from '../types.js';\r\nimport { finalizePayload } from '../normalize.js';\r\n\r\nexport function parseLeadpoint(input: RawEmailInput): ParseResult | undefined {\r\n  const text = input.rawText;\r\n  if (!/leadpoint/i.test(input.from) && !/nyt rengøringslead/i.test(text)) return undefined;\r\n\r\n  // Check if this is a phone call lead (only phone + duration + time)\r\n  const isPhoneCallLead = isPhoneCallLeadEmail(text);\r\n  \r\n  const payload: ParsedLeadPayload = {\r\n    brand: 'rendetalje',\r\n    source: 'leadpoint',\r\n    name: matchLine(text, /navn:\\s*(.+)/i),\r\n    phone: matchLine(text, /telefon:?\\s*([+0-9 ()-]{6,})/i),\r\n    email: matchLine(text, /e-?mail:?\\s*([\\w.+-]+@[\\w.-]+)/i),\r\n    address: matchLine(text, /adresse:?\\s*(.+)/i),\r\n    area_sqm: numberFrom(matchLine(text, /(\\d{2,4})\\s*(?:m2|m²)/i)),\r\n    service_type: matchLine(text, /opgave:?\\s*(.+)/i),\r\n    notes: isPhoneCallLead ? generatePhoneCallNotes(text) : undefined,\r\n    lead_type: isPhoneCallLead ? 'phone_call' : 'standard'\r\n  };\r\n\r\n  // Adjust confidence calculation for phone call leads\r\n  const found = Object.values(payload).filter(v => v !== undefined && v !== null).length;\r\n  let confidence = Math.min(1, found / 7);\r\n  \r\n  // Boost confidence for phone call leads with valid phone number\r\n  if (isPhoneCallLead && payload.phone) {\r\n    confidence = Math.max(confidence, 0.8);\r\n  }\r\n  \r\n  return { payload: finalizePayload(payload), confidence };\r\n}\r\n\r\nfunction isPhoneCallLeadEmail(text: string): boolean {\r\n  // Check for phone call specific patterns\r\n  const hasPhone = /telefon:?\\s*([+0-9 ()-]{6,})/i.test(text);\r\n  const hasDuration = /varighed:?\\s*(\\d+)/i.test(text) || /duration:?\\s*(\\d+)/i.test(text);\r\n  const hasTime = /tidspunkt:?\\s*(\\d{1,2}[:.]\\d{2})/i.test(text) || /time:?\\s*(\\d{1,2}[:.]\\d{2})/i.test(text);\r\n  const hasNoName = !/navn:?\\s*(.+)/i.test(text);\r\n  const hasNoAddress = !/adresse:?\\s*(.+)/i.test(text);\r\n  const hasNoEmail = !/e-?mail:?\\s*([\\w.+-]+@[\\w.-]+)/i.test(text);\r\n  \r\n  return hasPhone && (hasDuration || hasTime) && hasNoName && hasNoAddress && hasNoEmail;\r\n}\r\n\r\nfunction generatePhoneCallNotes(text: string): string {\r\n  const duration = matchLine(text, /varighed:?\\s*(\\d+)/i) || matchLine(text, /duration:?\\s*(\\d+)/i);\r\n  const time = matchLine(text, /tidspunkt:?\\s*(\\d{1,2}[:.]\\d{2})/i) || matchLine(text, /time:?\\s*(\\d{1,2}[:.]\\d{2})/i);\r\n  \r\n  let notes = 'Telefonlead fra Leadpoint - ';\r\n  if (duration) notes += `Varighed: ${duration} min. `;\r\n  if (time) notes += `Tidspunkt: ${time}. `;\r\n  notes += 'Ingen navn, adresse eller e-mail angivet.';\r\n  \r\n  return notes;\r\n}\r\n\r\nfunction matchLine(text: string, regex: RegExp): string | undefined {\r\n  const m = text.match(regex);\r\n  return m ? m[1].trim() : undefined;\r\n}\r\nfunction numberFrom(v?: string): number | undefined {\r\n  if (!v) return undefined;\r\n  const n = parseInt(v.replace(/\\D/g, ''), 10);\r\n  return isNaN(n) ? undefined : n;\r\n}\r\n"],"names":["parseLeadpoint","input","text","rawText","test","from","undefined","isPhoneCallLead","isPhoneCallLeadEmail","payload","brand","source","name","matchLine","phone","email","address","area_sqm","numberFrom","service_type","notes","generatePhoneCallNotes","lead_type","found","Object","values","filter","v","length","confidence","Math","min","max","finalizePayload","hasPhone","hasDuration","hasTime","hasNoName","hasNoAddress","hasNoEmail","duration","time","regex","m","match","trim","n","parseInt","replace","isNaN"],"mappings":";;;;+BAGgBA;;;eAAAA;;;2BAFgB;AAEzB,SAASA,eAAeC,KAAoB;IACjD,MAAMC,OAAOD,MAAME,OAAO;IAC1B,IAAI,CAAC,aAAaC,IAAI,CAACH,MAAMI,IAAI,KAAK,CAAC,sBAAsBD,IAAI,CAACF,OAAO,OAAOI;IAEhF,oEAAoE;IACpE,MAAMC,kBAAkBC,qBAAqBN;IAE7C,MAAMO,UAA6B;QACjCC,OAAO;QACPC,QAAQ;QACRC,MAAMC,UAAUX,MAAM;QACtBY,OAAOD,UAAUX,MAAM;QACvBa,OAAOF,UAAUX,MAAM;QACvBc,SAASH,UAAUX,MAAM;QACzBe,UAAUC,WAAWL,UAAUX,MAAM;QACrCiB,cAAcN,UAAUX,MAAM;QAC9BkB,OAAOb,kBAAkBc,uBAAuBnB,QAAQI;QACxDgB,WAAWf,kBAAkB,eAAe;IAC9C;IAEA,qDAAqD;IACrD,MAAMgB,QAAQC,OAAOC,MAAM,CAAChB,SAASiB,MAAM,CAACC,CAAAA,IAAKA,MAAMrB,aAAaqB,MAAM,MAAMC,MAAM;IACtF,IAAIC,aAAaC,KAAKC,GAAG,CAAC,GAAGR,QAAQ;IAErC,gEAAgE;IAChE,IAAIhB,mBAAmBE,QAAQK,KAAK,EAAE;QACpCe,aAAaC,KAAKE,GAAG,CAACH,YAAY;IACpC;IAEA,OAAO;QAAEpB,SAASwB,IAAAA,0BAAe,EAACxB;QAAUoB;IAAW;AACzD;AAEA,SAASrB,qBAAqBN,IAAY;IACxC,yCAAyC;IACzC,MAAMgC,WAAW,gCAAgC9B,IAAI,CAACF;IACtD,MAAMiC,cAAc,sBAAsB/B,IAAI,CAACF,SAAS,sBAAsBE,IAAI,CAACF;IACnF,MAAMkC,UAAU,oCAAoChC,IAAI,CAACF,SAAS,+BAA+BE,IAAI,CAACF;IACtG,MAAMmC,YAAY,CAAC,iBAAiBjC,IAAI,CAACF;IACzC,MAAMoC,eAAe,CAAC,oBAAoBlC,IAAI,CAACF;IAC/C,MAAMqC,aAAa,CAAC,kCAAkCnC,IAAI,CAACF;IAE3D,OAAOgC,YAAaC,CAAAA,eAAeC,OAAM,KAAMC,aAAaC,gBAAgBC;AAC9E;AAEA,SAASlB,uBAAuBnB,IAAY;IAC1C,MAAMsC,WAAW3B,UAAUX,MAAM,0BAA0BW,UAAUX,MAAM;IAC3E,MAAMuC,OAAO5B,UAAUX,MAAM,wCAAwCW,UAAUX,MAAM;IAErF,IAAIkB,QAAQ;IACZ,IAAIoB,UAAUpB,SAAS,CAAC,UAAU,EAAEoB,SAAS,MAAM,CAAC;IACpD,IAAIC,MAAMrB,SAAS,CAAC,WAAW,EAAEqB,KAAK,EAAE,CAAC;IACzCrB,SAAS;IAET,OAAOA;AACT;AAEA,SAASP,UAAUX,IAAY,EAAEwC,KAAa;IAC5C,MAAMC,IAAIzC,KAAK0C,KAAK,CAACF;IACrB,OAAOC,IAAIA,CAAC,CAAC,EAAE,CAACE,IAAI,KAAKvC;AAC3B;AACA,SAASY,WAAWS,CAAU;IAC5B,IAAI,CAACA,GAAG,OAAOrB;IACf,MAAMwC,IAAIC,SAASpB,EAAEqB,OAAO,CAAC,OAAO,KAAK;IACzC,OAAOC,MAAMH,KAAKxC,YAAYwC;AAChC"}