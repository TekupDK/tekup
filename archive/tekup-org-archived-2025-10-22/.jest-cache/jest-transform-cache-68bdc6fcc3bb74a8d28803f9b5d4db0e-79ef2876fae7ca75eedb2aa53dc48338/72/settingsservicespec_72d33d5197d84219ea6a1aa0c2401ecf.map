{"version":3,"sources":["C:\\Users\\empir\\Tekup-org\\apps\\flow-api\\src\\settings\\settings.service.spec.ts"],"sourcesContent":["import { SettingsService } from './settings.service.js';\r\nimport { PrismaService } from '../prisma/prisma.service.js';\r\nimport { MetricsService } from '../metrics/metrics.service.js';\r\n\r\ndescribe('SettingsService', () => {\r\n  const make = () => {\r\n    const store: any[] = []; const events: any[] = [];\r\n    const prisma = {\r\n      tenantSetting: {\r\n        findMany: jest.fn(async ({ where }: any) => store.filter(r => r.tenantId === where.tenantId)),\r\n        upsert: jest.fn(async ({ where, update, create }: any) => {\r\n          const idx = store.findIndex(r => r.tenantId === where.tenantId_key.tenantId && r.key === where.tenantId_key.key);\r\n          if (idx >= 0) { store[idx].value = update.value; return store[idx]; }\r\n          const rec = { tenantId: create.tenantId, key: create.key, value: create.value }; store.push(rec); return rec; }),\r\n      },\r\n      settingsEvent: { create: jest.fn(async ({ data }: any) => { events.push(data); return data; }) },\r\n      $transaction: jest.fn(async (fn: any) => fn(prisma))\r\n    } as unknown as PrismaService;\r\n    const metrics = new MetricsService();\r\n    const service = new SettingsService(prisma, metrics);\r\n    return { service, store, events, prisma, metrics };\r\n  };\r\n\r\n  describe('validation', () => {\r\n    it('validates keys and rejects invalid values', async () => {\r\n      const { service } = make();\r\n      await expect(service.update('t1', { sla_response_minutes: 30 })).resolves.toBeTruthy();\r\n      await expect(service.update('t1', { sla_response_minutes: 3 })).rejects.toThrow('invalid_sla_response_minutes');\r\n      await expect(service.update('t1', { theme_primary_color: 'blue' })).rejects.toThrow('invalid_theme_primary_color');\r\n    });\r\n\r\n    it('rejects empty brand display name', async () => {\r\n      const { service } = make();\r\n      await expect(service.update('t1', { brand_display_name: '' })).rejects.toThrow('invalid_brand_display_name');\r\n    });\r\n\r\n    it('rejects brand display name that is too long', async () => {\r\n      const { service } = make();\r\n      const longName = 'a'.repeat(121); // Exceeds 120 character limit\r\n      await expect(service.update('t1', { brand_display_name: longName })).rejects.toThrow('invalid_brand_display_name');\r\n    });\r\n\r\n    it('accepts valid brand display name', async () => {\r\n      const { service } = make();\r\n      await expect(service.update('t1', { brand_display_name: 'Valid Brand Name' })).resolves.toBeTruthy();\r\n    });\r\n\r\n    it('rejects invalid hex color formats', async () => {\r\n      const { service } = make();\r\n      const invalidColors = ['#12345', '#1234567', 'blue', '#GGGGGG', '123456', ''];\r\n      \r\n      for (const color of invalidColors) {\r\n        await expect(service.update('t1', { theme_primary_color: color }))\r\n          .rejects.toThrow('invalid_theme_primary_color');\r\n      }\r\n    });\r\n\r\n    it('accepts valid hex colors', async () => {\r\n      const { service } = make();\r\n      const validColors = ['#ff0000', '#FF0000', '#123456', '#abcdef', '#ABCDEF'];\r\n      \r\n      for (const color of validColors) {\r\n        await expect(service.update('t1', { theme_primary_color: color })).resolves.toBeTruthy();\r\n      }\r\n    });\r\n\r\n    it('rejects SLA response minutes out of range', async () => {\r\n      const { service } = make();\r\n      await expect(service.update('t1', { sla_response_minutes: 4 })).rejects.toThrow('invalid_sla_response_minutes'); // Too low\r\n      await expect(service.update('t1', { sla_response_minutes: 1441 })).rejects.toThrow('invalid_sla_response_minutes'); // Too high\r\n      await expect(service.update('t1', { sla_response_minutes: 5.5 })).rejects.toThrow('invalid_sla_response_minutes'); // Not integer\r\n    });\r\n\r\n    it('rejects duplicate window minutes out of range', async () => {\r\n      const { service } = make();\r\n      await expect(service.update('t1', { duplicate_window_minutes: 4 })).rejects.toThrow('invalid_duplicate_window_minutes'); // Too low\r\n      await expect(service.update('t1', { duplicate_window_minutes: 10081 })).rejects.toThrow('invalid_duplicate_window_minutes'); // Too high\r\n      await expect(service.update('t1', { duplicate_window_minutes: 10.5 })).rejects.toThrow('invalid_duplicate_window_minutes'); // Not integer\r\n    });\r\n\r\n    it('accepts valid boolean for enable_advanced_parser', async () => {\r\n      const { service } = make();\r\n      await expect(service.update('t1', { enable_advanced_parser: true })).resolves.toBeTruthy();\r\n      await expect(service.update('t1', { enable_advanced_parser: false })).resolves.toBeTruthy();\r\n    });\r\n\r\n    it('rejects invalid boolean for enable_advanced_parser', async () => {\r\n      const { service } = make();\r\n      await expect(service.update('t1', { enable_advanced_parser: 'true' })).rejects.toThrow('invalid_enable_advanced_parser');\r\n      await expect(service.update('t1', { enable_advanced_parser: 1 })).rejects.toThrow('invalid_enable_advanced_parser');\r\n    });\r\n\r\n    it('throws error when no valid keys provided', async () => {\r\n      const { service } = make();\r\n      await expect(service.update('t1', { invalid_key: 'value' })).rejects.toThrow('no_valid_keys');\r\n    });\r\n\r\n    it('ignores invalid keys and processes valid ones', async () => {\r\n      const { service } = make();\r\n      const result = await service.update('t1', { \r\n        invalid_key: 'ignored',\r\n        sla_response_minutes: 30 \r\n      });\r\n      expect(result.sla_response_minutes).toBe(30);\r\n    });\r\n  });\r\n\r\n  describe('caching', () => {\r\n    it('caches loads and invalidates after update', async () => {\r\n      const { service, prisma } = make();\r\n      const first = await service.getResolved('t2');\r\n      expect(prisma.tenantSetting.findMany).toHaveBeenCalledTimes(1);\r\n      const again = await service.getResolved('t2');\r\n      expect(prisma.tenantSetting.findMany).toHaveBeenCalledTimes(1); // from cache\r\n      await service.update('t2', { duplicate_window_minutes: 90 });\r\n      await service.getResolved('t2');\r\n      // After update invalidation triggers a fresh load inside update (getResolved) plus our manual call => total 3\r\n      expect(prisma.tenantSetting.findMany).toHaveBeenCalledTimes(3);\r\n      expect(first.duplicate_window_minutes).toBe(60);\r\n      const updated = await service.getResolved('t2');\r\n      expect(updated.duplicate_window_minutes).toBe(90);\r\n    });\r\n\r\n    it('respects cache TTL', async () => {\r\n      const { service, prisma } = make();\r\n      \r\n      // Mock Date.now to control time\r\n      const originalNow = Date.now;\r\n      let mockTime = 1000000;\r\n      jest.spyOn(Date, 'now').mockImplementation(() => mockTime);\r\n\r\n      try {\r\n        // First load\r\n        await service.getResolved('t3');\r\n        expect(prisma.tenantSetting.findMany).toHaveBeenCalledTimes(1);\r\n\r\n        // Second load within TTL - should use cache\r\n        mockTime += 20000; // 20 seconds later (TTL is 30 seconds)\r\n        await service.getResolved('t3');\r\n        expect(prisma.tenantSetting.findMany).toHaveBeenCalledTimes(1);\r\n\r\n        // Third load after TTL - should reload\r\n        mockTime += 15000; // 35 seconds total (exceeded TTL)\r\n        await service.getResolved('t3');\r\n        expect(prisma.tenantSetting.findMany).toHaveBeenCalledTimes(2);\r\n      } finally {\r\n        Date.now = originalNow;\r\n      }\r\n    });\r\n\r\n    it('maintains separate cache per tenant', async () => {\r\n      const { service, prisma } = make();\r\n      \r\n      await service.getResolved('tenant1');\r\n      await service.getResolved('tenant2');\r\n      await service.getResolved('tenant1'); // Should use cache\r\n      \r\n      expect(prisma.tenantSetting.findMany).toHaveBeenCalledTimes(2);\r\n      expect(prisma.tenantSetting.findMany).toHaveBeenCalledWith({ where: { tenantId: 'tenant1' }});\r\n      expect(prisma.tenantSetting.findMany).toHaveBeenCalledWith({ where: { tenantId: 'tenant2' }});\r\n    });\r\n\r\n    it('cache invalidation only affects specific tenant', async () => {\r\n      const { service, prisma } = make();\r\n      \r\n      // Load settings for both tenants\r\n      await service.getResolved('tenant1');\r\n      await service.getResolved('tenant2');\r\n      expect(prisma.tenantSetting.findMany).toHaveBeenCalledTimes(2);\r\n\r\n      // Update tenant1 - should invalidate only tenant1 cache\r\n      await service.update('tenant1', { sla_response_minutes: 30 });\r\n      \r\n      // Access tenant1 again - should reload\r\n      await service.getResolved('tenant1');\r\n      \r\n      // Access tenant2 again - should use cache\r\n      await service.getResolved('tenant2');\r\n      \r\n      // tenant1: initial load + load in update + load after update = 3 calls for tenant1\r\n      // tenant2: initial load + cached access = 1 call for tenant2\r\n      // Total: 4 calls (2 initial + 1 in update + 1 reload for tenant1)\r\n      expect(prisma.tenantSetting.findMany).toHaveBeenCalledTimes(4);\r\n    });\r\n  });\r\n\r\n  describe('auditing and events', () => {\r\n    it('creates audit events for settings updates', async () => {\r\n      const { service, events } = make();\r\n      \r\n      await service.update('tenant1', { \r\n        sla_response_minutes: 45,\r\n        theme_primary_color: '#ff0000' \r\n      }, 'test-user');\r\n      \r\n      expect(events).toHaveLength(2);\r\n      expect(events[0]).toMatchObject({\r\n        tenantId: 'tenant1',\r\n        key: 'sla_response_minutes',\r\n        oldValue: undefined, // No existing value\r\n        newValue: 45,\r\n        actor: 'test-user'\r\n      });\r\n      expect(events[1]).toMatchObject({\r\n        tenantId: 'tenant1',\r\n        key: 'theme_primary_color',\r\n        oldValue: undefined,\r\n        newValue: '#ff0000',\r\n        actor: 'test-user'\r\n      });\r\n    });\r\n\r\n    it('tracks old values in audit events for updates', async () => {\r\n      const { service, events, store } = make();\r\n      \r\n      // Pre-populate some settings\r\n      store.push({ tenantId: 'tenant1', key: 'sla_response_minutes', value: 60 });\r\n      \r\n      await service.update('tenant1', { sla_response_minutes: 45 }, 'admin');\r\n      \r\n      expect(events).toHaveLength(1);\r\n      expect(events[0]).toMatchObject({\r\n        tenantId: 'tenant1',\r\n        key: 'sla_response_minutes',\r\n        oldValue: 60,\r\n        newValue: 45,\r\n        actor: 'admin'\r\n      });\r\n    });\r\n\r\n    it('handles updates without actor', async () => {\r\n      const { service, events } = make();\r\n      \r\n      await service.update('tenant1', { sla_response_minutes: 45 }); // No actor provided\r\n      \r\n      expect(events[0].actor).toBeUndefined();\r\n    });\r\n  });\r\n\r\n  describe('metrics', () => {\r\n    it('increments settings_load_total metric on cache miss', async () => {\r\n      const { service, metrics } = make();\r\n      const incrementSpy = jest.spyOn(metrics, 'increment');\r\n      \r\n      await service.getResolved('tenant1');\r\n      await service.getResolved('tenant1'); // Second call should use cache\r\n      \r\n      expect(incrementSpy).toHaveBeenCalledWith('settings_load_total', { tenant: 'tenant1' });\r\n      expect(incrementSpy).toHaveBeenCalledTimes(1); // Only once due to caching\r\n    });\r\n\r\n    it('increments settings_update_total metric with correct count', async () => {\r\n      const { service, metrics } = make();\r\n      const incrementSpy = jest.spyOn(metrics, 'increment');\r\n      \r\n      await service.update('tenant1', { \r\n        sla_response_minutes: 45,\r\n        theme_primary_color: '#ff0000',\r\n        enable_advanced_parser: true\r\n      });\r\n      \r\n      expect(incrementSpy).toHaveBeenCalledWith('settings_update_total', { \r\n        tenant: 'tenant1', \r\n        count: '3' \r\n      });\r\n    });\r\n\r\n    it('reports correct count when mixed valid and invalid keys', async () => {\r\n      const { service, metrics } = make();\r\n      const incrementSpy = jest.spyOn(metrics, 'increment');\r\n      \r\n      await service.update('tenant1', { \r\n        sla_response_minutes: 45,\r\n        invalid_key: 'ignored',\r\n        theme_primary_color: '#ff0000'\r\n      });\r\n      \r\n      expect(incrementSpy).toHaveBeenCalledWith('settings_update_total', { \r\n        tenant: 'tenant1', \r\n        count: '2' // Only valid keys counted\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('defaults', () => {\r\n    it('returns default values for new tenant', async () => {\r\n      const { service } = make();\r\n      \r\n      const settings = await service.getResolved('new-tenant');\r\n      \r\n      expect(settings).toMatchObject({\r\n        sla_response_minutes: 60,\r\n        duplicate_window_minutes: 60,\r\n        enable_advanced_parser: false\r\n      });\r\n    });\r\n\r\n    it('merges stored settings with defaults', async () => {\r\n      const { service, store } = make();\r\n      \r\n      // Pre-populate some settings\r\n      store.push({ tenantId: 'tenant1', key: 'sla_response_minutes', value: 120 });\r\n      store.push({ tenantId: 'tenant1', key: 'brand_display_name', value: 'Custom Brand' });\r\n      \r\n      const settings = await service.getResolved('tenant1');\r\n      \r\n      expect(settings).toMatchObject({\r\n        sla_response_minutes: 120, // Overridden\r\n        duplicate_window_minutes: 60, // Default\r\n        enable_advanced_parser: false, // Default\r\n        brand_display_name: 'Custom Brand' // Stored\r\n      });\r\n    });\r\n\r\n    it('handles tenant with no stored settings', async () => {\r\n      const { service, prisma } = make();\r\n      \r\n      const settings = await service.getResolved('empty-tenant');\r\n      \r\n      expect(settings).toEqual({\r\n        sla_response_minutes: 60,\r\n        duplicate_window_minutes: 60,\r\n        enable_advanced_parser: false\r\n      });\r\n      expect(prisma.tenantSetting.findMany).toHaveBeenCalledWith({ \r\n        where: { tenantId: 'empty-tenant' } \r\n      });\r\n    });\r\n  });\r\n\r\n  describe('transaction handling', () => {\r\n    it('uses transaction for atomic updates', async () => {\r\n      const { service, prisma } = make();\r\n      \r\n      await service.update('tenant1', { \r\n        sla_response_minutes: 45,\r\n        theme_primary_color: '#ff0000'\r\n      });\r\n      \r\n      expect(prisma.$transaction).toHaveBeenCalled();\r\n    });\r\n\r\n    it('rolls back on validation failure during transaction', async () => {\r\n      const { service, store, events } = make();\r\n      \r\n      // Mock upsert to succeed for first call but validation to fail on second\r\n      let callCount = 0;\r\n      const originalUpsert = service['prisma'].tenantSetting.upsert;\r\n      (service['prisma'].tenantSetting.upsert as jest.Mock).mockImplementation(async (args) => {\r\n        callCount++;\r\n        if (callCount === 1) {\r\n          // First call succeeds\r\n          return originalUpsert(args);\r\n        }\r\n        // Second call would happen but validation fails before we get here\r\n        throw new Error('This should not be reached');\r\n      });\r\n      \r\n      try {\r\n        await service.update('tenant1', { \r\n          sla_response_minutes: 45, // Valid\r\n          theme_primary_color: 'invalid-color' // Invalid\r\n        });\r\n        fail('Expected update to fail due to invalid color');\r\n      } catch (error: any) {\r\n        expect(error.message).toBe('invalid_theme_primary_color');\r\n      }\r\n      \r\n      // Verify no partial updates occurred\r\n      expect(store).toHaveLength(0);\r\n      expect(events).toHaveLength(0);\r\n    });\r\n  });\r\n});"],"names":["describe","make","store","events","prisma","tenantSetting","findMany","jest","fn","where","filter","r","tenantId","upsert","update","create","idx","findIndex","tenantId_key","key","value","rec","push","settingsEvent","data","$transaction","metrics","MetricsService","service","SettingsService","it","expect","sla_response_minutes","resolves","toBeTruthy","rejects","toThrow","theme_primary_color","brand_display_name","longName","repeat","invalidColors","color","validColors","duplicate_window_minutes","enable_advanced_parser","invalid_key","result","toBe","first","getResolved","toHaveBeenCalledTimes","again","updated","originalNow","Date","now","mockTime","spyOn","mockImplementation","toHaveBeenCalledWith","toHaveLength","toMatchObject","oldValue","undefined","newValue","actor","toBeUndefined","incrementSpy","tenant","count","settings","toEqual","toHaveBeenCalled","callCount","originalUpsert","args","Error","fail","error","message"],"mappings":";;;;iCAAgC;gCAED;AAE/BA,SAAS,mBAAmB;IAC1B,MAAMC,OAAO;QACX,MAAMC,QAAe,EAAE;QAAE,MAAMC,SAAgB,EAAE;QACjD,MAAMC,SAAS;YACbC,eAAe;gBACbC,UAAUC,KAAKC,EAAE,CAAC,OAAO,EAAEC,KAAK,EAAO,GAAKP,MAAMQ,MAAM,CAACC,CAAAA,IAAKA,EAAEC,QAAQ,KAAKH,MAAMG,QAAQ;gBAC3FC,QAAQN,KAAKC,EAAE,CAAC,OAAO,EAAEC,KAAK,EAAEK,MAAM,EAAEC,MAAM,EAAO;oBACnD,MAAMC,MAAMd,MAAMe,SAAS,CAACN,CAAAA,IAAKA,EAAEC,QAAQ,KAAKH,MAAMS,YAAY,CAACN,QAAQ,IAAID,EAAEQ,GAAG,KAAKV,MAAMS,YAAY,CAACC,GAAG;oBAC/G,IAAIH,OAAO,GAAG;wBAAEd,KAAK,CAACc,IAAI,CAACI,KAAK,GAAGN,OAAOM,KAAK;wBAAE,OAAOlB,KAAK,CAACc,IAAI;oBAAE;oBACpE,MAAMK,MAAM;wBAAET,UAAUG,OAAOH,QAAQ;wBAAEO,KAAKJ,OAAOI,GAAG;wBAAEC,OAAOL,OAAOK,KAAK;oBAAC;oBAAGlB,MAAMoB,IAAI,CAACD;oBAAM,OAAOA;gBAAK;YAClH;YACAE,eAAe;gBAAER,QAAQR,KAAKC,EAAE,CAAC,OAAO,EAAEgB,IAAI,EAAO;oBAAOrB,OAAOmB,IAAI,CAACE;oBAAO,OAAOA;gBAAM;YAAG;YAC/FC,cAAclB,KAAKC,EAAE,CAAC,OAAOA,KAAYA,GAAGJ;QAC9C;QACA,MAAMsB,UAAU,IAAIC,8BAAc;QAClC,MAAMC,UAAU,IAAIC,gCAAe,CAACzB,QAAQsB;QAC5C,OAAO;YAAEE;YAAS1B;YAAOC;YAAQC;YAAQsB;QAAQ;IACnD;IAEA1B,SAAS,cAAc;QACrB8B,GAAG,6CAA6C;YAC9C,MAAM,EAAEF,OAAO,EAAE,GAAG3B;YACpB,MAAM8B,OAAOH,QAAQd,MAAM,CAAC,MAAM;gBAAEkB,sBAAsB;YAAG,IAAIC,QAAQ,CAACC,UAAU;YACpF,MAAMH,OAAOH,QAAQd,MAAM,CAAC,MAAM;gBAAEkB,sBAAsB;YAAE,IAAIG,OAAO,CAACC,OAAO,CAAC;YAChF,MAAML,OAAOH,QAAQd,MAAM,CAAC,MAAM;gBAAEuB,qBAAqB;YAAO,IAAIF,OAAO,CAACC,OAAO,CAAC;QACtF;QAEAN,GAAG,oCAAoC;YACrC,MAAM,EAAEF,OAAO,EAAE,GAAG3B;YACpB,MAAM8B,OAAOH,QAAQd,MAAM,CAAC,MAAM;gBAAEwB,oBAAoB;YAAG,IAAIH,OAAO,CAACC,OAAO,CAAC;QACjF;QAEAN,GAAG,+CAA+C;YAChD,MAAM,EAAEF,OAAO,EAAE,GAAG3B;YACpB,MAAMsC,WAAW,IAAIC,MAAM,CAAC,MAAM,8BAA8B;YAChE,MAAMT,OAAOH,QAAQd,MAAM,CAAC,MAAM;gBAAEwB,oBAAoBC;YAAS,IAAIJ,OAAO,CAACC,OAAO,CAAC;QACvF;QAEAN,GAAG,oCAAoC;YACrC,MAAM,EAAEF,OAAO,EAAE,GAAG3B;YACpB,MAAM8B,OAAOH,QAAQd,MAAM,CAAC,MAAM;gBAAEwB,oBAAoB;YAAmB,IAAIL,QAAQ,CAACC,UAAU;QACpG;QAEAJ,GAAG,qCAAqC;YACtC,MAAM,EAAEF,OAAO,EAAE,GAAG3B;YACpB,MAAMwC,gBAAgB;gBAAC;gBAAU;gBAAY;gBAAQ;gBAAW;gBAAU;aAAG;YAE7E,KAAK,MAAMC,SAASD,cAAe;gBACjC,MAAMV,OAAOH,QAAQd,MAAM,CAAC,MAAM;oBAAEuB,qBAAqBK;gBAAM,IAC5DP,OAAO,CAACC,OAAO,CAAC;YACrB;QACF;QAEAN,GAAG,4BAA4B;YAC7B,MAAM,EAAEF,OAAO,EAAE,GAAG3B;YACpB,MAAM0C,cAAc;gBAAC;gBAAW;gBAAW;gBAAW;gBAAW;aAAU;YAE3E,KAAK,MAAMD,SAASC,YAAa;gBAC/B,MAAMZ,OAAOH,QAAQd,MAAM,CAAC,MAAM;oBAAEuB,qBAAqBK;gBAAM,IAAIT,QAAQ,CAACC,UAAU;YACxF;QACF;QAEAJ,GAAG,6CAA6C;YAC9C,MAAM,EAAEF,OAAO,EAAE,GAAG3B;YACpB,MAAM8B,OAAOH,QAAQd,MAAM,CAAC,MAAM;gBAAEkB,sBAAsB;YAAE,IAAIG,OAAO,CAACC,OAAO,CAAC,iCAAiC,UAAU;YAC3H,MAAML,OAAOH,QAAQd,MAAM,CAAC,MAAM;gBAAEkB,sBAAsB;YAAK,IAAIG,OAAO,CAACC,OAAO,CAAC,iCAAiC,WAAW;YAC/H,MAAML,OAAOH,QAAQd,MAAM,CAAC,MAAM;gBAAEkB,sBAAsB;YAAI,IAAIG,OAAO,CAACC,OAAO,CAAC,iCAAiC,cAAc;QACnI;QAEAN,GAAG,iDAAiD;YAClD,MAAM,EAAEF,OAAO,EAAE,GAAG3B;YACpB,MAAM8B,OAAOH,QAAQd,MAAM,CAAC,MAAM;gBAAE8B,0BAA0B;YAAE,IAAIT,OAAO,CAACC,OAAO,CAAC,qCAAqC,UAAU;YACnI,MAAML,OAAOH,QAAQd,MAAM,CAAC,MAAM;gBAAE8B,0BAA0B;YAAM,IAAIT,OAAO,CAACC,OAAO,CAAC,qCAAqC,WAAW;YACxI,MAAML,OAAOH,QAAQd,MAAM,CAAC,MAAM;gBAAE8B,0BAA0B;YAAK,IAAIT,OAAO,CAACC,OAAO,CAAC,qCAAqC,cAAc;QAC5I;QAEAN,GAAG,oDAAoD;YACrD,MAAM,EAAEF,OAAO,EAAE,GAAG3B;YACpB,MAAM8B,OAAOH,QAAQd,MAAM,CAAC,MAAM;gBAAE+B,wBAAwB;YAAK,IAAIZ,QAAQ,CAACC,UAAU;YACxF,MAAMH,OAAOH,QAAQd,MAAM,CAAC,MAAM;gBAAE+B,wBAAwB;YAAM,IAAIZ,QAAQ,CAACC,UAAU;QAC3F;QAEAJ,GAAG,sDAAsD;YACvD,MAAM,EAAEF,OAAO,EAAE,GAAG3B;YACpB,MAAM8B,OAAOH,QAAQd,MAAM,CAAC,MAAM;gBAAE+B,wBAAwB;YAAO,IAAIV,OAAO,CAACC,OAAO,CAAC;YACvF,MAAML,OAAOH,QAAQd,MAAM,CAAC,MAAM;gBAAE+B,wBAAwB;YAAE,IAAIV,OAAO,CAACC,OAAO,CAAC;QACpF;QAEAN,GAAG,4CAA4C;YAC7C,MAAM,EAAEF,OAAO,EAAE,GAAG3B;YACpB,MAAM8B,OAAOH,QAAQd,MAAM,CAAC,MAAM;gBAAEgC,aAAa;YAAQ,IAAIX,OAAO,CAACC,OAAO,CAAC;QAC/E;QAEAN,GAAG,iDAAiD;YAClD,MAAM,EAAEF,OAAO,EAAE,GAAG3B;YACpB,MAAM8C,SAAS,MAAMnB,QAAQd,MAAM,CAAC,MAAM;gBACxCgC,aAAa;gBACbd,sBAAsB;YACxB;YACAD,OAAOgB,OAAOf,oBAAoB,EAAEgB,IAAI,CAAC;QAC3C;IACF;IAEAhD,SAAS,WAAW;QAClB8B,GAAG,6CAA6C;YAC9C,MAAM,EAAEF,OAAO,EAAExB,MAAM,EAAE,GAAGH;YAC5B,MAAMgD,QAAQ,MAAMrB,QAAQsB,WAAW,CAAC;YACxCnB,OAAO3B,OAAOC,aAAa,CAACC,QAAQ,EAAE6C,qBAAqB,CAAC;YAC5D,MAAMC,QAAQ,MAAMxB,QAAQsB,WAAW,CAAC;YACxCnB,OAAO3B,OAAOC,aAAa,CAACC,QAAQ,EAAE6C,qBAAqB,CAAC,IAAI,aAAa;YAC7E,MAAMvB,QAAQd,MAAM,CAAC,MAAM;gBAAE8B,0BAA0B;YAAG;YAC1D,MAAMhB,QAAQsB,WAAW,CAAC;YAC1B,8GAA8G;YAC9GnB,OAAO3B,OAAOC,aAAa,CAACC,QAAQ,EAAE6C,qBAAqB,CAAC;YAC5DpB,OAAOkB,MAAML,wBAAwB,EAAEI,IAAI,CAAC;YAC5C,MAAMK,UAAU,MAAMzB,QAAQsB,WAAW,CAAC;YAC1CnB,OAAOsB,QAAQT,wBAAwB,EAAEI,IAAI,CAAC;QAChD;QAEAlB,GAAG,sBAAsB;YACvB,MAAM,EAAEF,OAAO,EAAExB,MAAM,EAAE,GAAGH;YAE5B,gCAAgC;YAChC,MAAMqD,cAAcC,KAAKC,GAAG;YAC5B,IAAIC,WAAW;YACflD,KAAKmD,KAAK,CAACH,MAAM,OAAOI,kBAAkB,CAAC,IAAMF;YAEjD,IAAI;gBACF,aAAa;gBACb,MAAM7B,QAAQsB,WAAW,CAAC;gBAC1BnB,OAAO3B,OAAOC,aAAa,CAACC,QAAQ,EAAE6C,qBAAqB,CAAC;gBAE5D,4CAA4C;gBAC5CM,YAAY,OAAO,uCAAuC;gBAC1D,MAAM7B,QAAQsB,WAAW,CAAC;gBAC1BnB,OAAO3B,OAAOC,aAAa,CAACC,QAAQ,EAAE6C,qBAAqB,CAAC;gBAE5D,uCAAuC;gBACvCM,YAAY,OAAO,kCAAkC;gBACrD,MAAM7B,QAAQsB,WAAW,CAAC;gBAC1BnB,OAAO3B,OAAOC,aAAa,CAACC,QAAQ,EAAE6C,qBAAqB,CAAC;YAC9D,SAAU;gBACRI,KAAKC,GAAG,GAAGF;YACb;QACF;QAEAxB,GAAG,uCAAuC;YACxC,MAAM,EAAEF,OAAO,EAAExB,MAAM,EAAE,GAAGH;YAE5B,MAAM2B,QAAQsB,WAAW,CAAC;YAC1B,MAAMtB,QAAQsB,WAAW,CAAC;YAC1B,MAAMtB,QAAQsB,WAAW,CAAC,YAAY,mBAAmB;YAEzDnB,OAAO3B,OAAOC,aAAa,CAACC,QAAQ,EAAE6C,qBAAqB,CAAC;YAC5DpB,OAAO3B,OAAOC,aAAa,CAACC,QAAQ,EAAEsD,oBAAoB,CAAC;gBAAEnD,OAAO;oBAAEG,UAAU;gBAAU;YAAC;YAC3FmB,OAAO3B,OAAOC,aAAa,CAACC,QAAQ,EAAEsD,oBAAoB,CAAC;gBAAEnD,OAAO;oBAAEG,UAAU;gBAAU;YAAC;QAC7F;QAEAkB,GAAG,mDAAmD;YACpD,MAAM,EAAEF,OAAO,EAAExB,MAAM,EAAE,GAAGH;YAE5B,iCAAiC;YACjC,MAAM2B,QAAQsB,WAAW,CAAC;YAC1B,MAAMtB,QAAQsB,WAAW,CAAC;YAC1BnB,OAAO3B,OAAOC,aAAa,CAACC,QAAQ,EAAE6C,qBAAqB,CAAC;YAE5D,wDAAwD;YACxD,MAAMvB,QAAQd,MAAM,CAAC,WAAW;gBAAEkB,sBAAsB;YAAG;YAE3D,uCAAuC;YACvC,MAAMJ,QAAQsB,WAAW,CAAC;YAE1B,0CAA0C;YAC1C,MAAMtB,QAAQsB,WAAW,CAAC;YAE1B,mFAAmF;YACnF,6DAA6D;YAC7D,kEAAkE;YAClEnB,OAAO3B,OAAOC,aAAa,CAACC,QAAQ,EAAE6C,qBAAqB,CAAC;QAC9D;IACF;IAEAnD,SAAS,uBAAuB;QAC9B8B,GAAG,6CAA6C;YAC9C,MAAM,EAAEF,OAAO,EAAEzB,MAAM,EAAE,GAAGF;YAE5B,MAAM2B,QAAQd,MAAM,CAAC,WAAW;gBAC9BkB,sBAAsB;gBACtBK,qBAAqB;YACvB,GAAG;YAEHN,OAAO5B,QAAQ0D,YAAY,CAAC;YAC5B9B,OAAO5B,MAAM,CAAC,EAAE,EAAE2D,aAAa,CAAC;gBAC9BlD,UAAU;gBACVO,KAAK;gBACL4C,UAAUC;gBACVC,UAAU;gBACVC,OAAO;YACT;YACAnC,OAAO5B,MAAM,CAAC,EAAE,EAAE2D,aAAa,CAAC;gBAC9BlD,UAAU;gBACVO,KAAK;gBACL4C,UAAUC;gBACVC,UAAU;gBACVC,OAAO;YACT;QACF;QAEApC,GAAG,iDAAiD;YAClD,MAAM,EAAEF,OAAO,EAAEzB,MAAM,EAAED,KAAK,EAAE,GAAGD;YAEnC,6BAA6B;YAC7BC,MAAMoB,IAAI,CAAC;gBAAEV,UAAU;gBAAWO,KAAK;gBAAwBC,OAAO;YAAG;YAEzE,MAAMQ,QAAQd,MAAM,CAAC,WAAW;gBAAEkB,sBAAsB;YAAG,GAAG;YAE9DD,OAAO5B,QAAQ0D,YAAY,CAAC;YAC5B9B,OAAO5B,MAAM,CAAC,EAAE,EAAE2D,aAAa,CAAC;gBAC9BlD,UAAU;gBACVO,KAAK;gBACL4C,UAAU;gBACVE,UAAU;gBACVC,OAAO;YACT;QACF;QAEApC,GAAG,iCAAiC;YAClC,MAAM,EAAEF,OAAO,EAAEzB,MAAM,EAAE,GAAGF;YAE5B,MAAM2B,QAAQd,MAAM,CAAC,WAAW;gBAAEkB,sBAAsB;YAAG,IAAI,oBAAoB;YAEnFD,OAAO5B,MAAM,CAAC,EAAE,CAAC+D,KAAK,EAAEC,aAAa;QACvC;IACF;IAEAnE,SAAS,WAAW;QAClB8B,GAAG,uDAAuD;YACxD,MAAM,EAAEF,OAAO,EAAEF,OAAO,EAAE,GAAGzB;YAC7B,MAAMmE,eAAe7D,KAAKmD,KAAK,CAAChC,SAAS;YAEzC,MAAME,QAAQsB,WAAW,CAAC;YAC1B,MAAMtB,QAAQsB,WAAW,CAAC,YAAY,+BAA+B;YAErEnB,OAAOqC,cAAcR,oBAAoB,CAAC,uBAAuB;gBAAES,QAAQ;YAAU;YACrFtC,OAAOqC,cAAcjB,qBAAqB,CAAC,IAAI,2BAA2B;QAC5E;QAEArB,GAAG,8DAA8D;YAC/D,MAAM,EAAEF,OAAO,EAAEF,OAAO,EAAE,GAAGzB;YAC7B,MAAMmE,eAAe7D,KAAKmD,KAAK,CAAChC,SAAS;YAEzC,MAAME,QAAQd,MAAM,CAAC,WAAW;gBAC9BkB,sBAAsB;gBACtBK,qBAAqB;gBACrBQ,wBAAwB;YAC1B;YAEAd,OAAOqC,cAAcR,oBAAoB,CAAC,yBAAyB;gBACjES,QAAQ;gBACRC,OAAO;YACT;QACF;QAEAxC,GAAG,2DAA2D;YAC5D,MAAM,EAAEF,OAAO,EAAEF,OAAO,EAAE,GAAGzB;YAC7B,MAAMmE,eAAe7D,KAAKmD,KAAK,CAAChC,SAAS;YAEzC,MAAME,QAAQd,MAAM,CAAC,WAAW;gBAC9BkB,sBAAsB;gBACtBc,aAAa;gBACbT,qBAAqB;YACvB;YAEAN,OAAOqC,cAAcR,oBAAoB,CAAC,yBAAyB;gBACjES,QAAQ;gBACRC,OAAO,IAAI,0BAA0B;YACvC;QACF;IACF;IAEAtE,SAAS,YAAY;QACnB8B,GAAG,yCAAyC;YAC1C,MAAM,EAAEF,OAAO,EAAE,GAAG3B;YAEpB,MAAMsE,WAAW,MAAM3C,QAAQsB,WAAW,CAAC;YAE3CnB,OAAOwC,UAAUT,aAAa,CAAC;gBAC7B9B,sBAAsB;gBACtBY,0BAA0B;gBAC1BC,wBAAwB;YAC1B;QACF;QAEAf,GAAG,wCAAwC;YACzC,MAAM,EAAEF,OAAO,EAAE1B,KAAK,EAAE,GAAGD;YAE3B,6BAA6B;YAC7BC,MAAMoB,IAAI,CAAC;gBAAEV,UAAU;gBAAWO,KAAK;gBAAwBC,OAAO;YAAI;YAC1ElB,MAAMoB,IAAI,CAAC;gBAAEV,UAAU;gBAAWO,KAAK;gBAAsBC,OAAO;YAAe;YAEnF,MAAMmD,WAAW,MAAM3C,QAAQsB,WAAW,CAAC;YAE3CnB,OAAOwC,UAAUT,aAAa,CAAC;gBAC7B9B,sBAAsB;gBACtBY,0BAA0B;gBAC1BC,wBAAwB;gBACxBP,oBAAoB,eAAe,SAAS;YAC9C;QACF;QAEAR,GAAG,0CAA0C;YAC3C,MAAM,EAAEF,OAAO,EAAExB,MAAM,EAAE,GAAGH;YAE5B,MAAMsE,WAAW,MAAM3C,QAAQsB,WAAW,CAAC;YAE3CnB,OAAOwC,UAAUC,OAAO,CAAC;gBACvBxC,sBAAsB;gBACtBY,0BAA0B;gBAC1BC,wBAAwB;YAC1B;YACAd,OAAO3B,OAAOC,aAAa,CAACC,QAAQ,EAAEsD,oBAAoB,CAAC;gBACzDnD,OAAO;oBAAEG,UAAU;gBAAe;YACpC;QACF;IACF;IAEAZ,SAAS,wBAAwB;QAC/B8B,GAAG,uCAAuC;YACxC,MAAM,EAAEF,OAAO,EAAExB,MAAM,EAAE,GAAGH;YAE5B,MAAM2B,QAAQd,MAAM,CAAC,WAAW;gBAC9BkB,sBAAsB;gBACtBK,qBAAqB;YACvB;YAEAN,OAAO3B,OAAOqB,YAAY,EAAEgD,gBAAgB;QAC9C;QAEA3C,GAAG,uDAAuD;YACxD,MAAM,EAAEF,OAAO,EAAE1B,KAAK,EAAEC,MAAM,EAAE,GAAGF;YAEnC,yEAAyE;YACzE,IAAIyE,YAAY;YAChB,MAAMC,iBAAiB/C,OAAO,CAAC,SAAS,CAACvB,aAAa,CAACQ,MAAM;YAC5De,OAAO,CAAC,SAAS,CAACvB,aAAa,CAACQ,MAAM,CAAe8C,kBAAkB,CAAC,OAAOiB;gBAC9EF;gBACA,IAAIA,cAAc,GAAG;oBACnB,sBAAsB;oBACtB,OAAOC,eAAeC;gBACxB;gBACA,mEAAmE;gBACnE,MAAM,IAAIC,MAAM;YAClB;YAEA,IAAI;gBACF,MAAMjD,QAAQd,MAAM,CAAC,WAAW;oBAC9BkB,sBAAsB;oBACtBK,qBAAqB,gBAAgB,UAAU;gBACjD;gBACAyC,KAAK;YACP,EAAE,OAAOC,OAAY;gBACnBhD,OAAOgD,MAAMC,OAAO,EAAEhC,IAAI,CAAC;YAC7B;YAEA,qCAAqC;YACrCjB,OAAO7B,OAAO2D,YAAY,CAAC;YAC3B9B,OAAO5B,QAAQ0D,YAAY,CAAC;QAC9B;IACF;AACF"}