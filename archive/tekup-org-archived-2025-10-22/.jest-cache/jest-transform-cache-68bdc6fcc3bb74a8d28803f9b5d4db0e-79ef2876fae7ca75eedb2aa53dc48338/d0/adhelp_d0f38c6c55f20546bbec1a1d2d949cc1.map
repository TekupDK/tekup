{"version":3,"sources":["C:\\Users\\empir\\Tekup-org\\apps\\flow-api\\src\\ingestion\\parsers\\adhelp.ts"],"sourcesContent":["import { RawEmailInput, ParseResult, ParsedLeadPayload } from '../types.js';\r\nimport { finalizePayload } from '../normalize.js';\r\n\r\nexport function parseAdHelp(input: RawEmailInput): ParseResult | undefined {\r\n  const text = input.rawText;\r\n  const from = input.from.toLowerCase();\r\n  \r\n  // Check if this is from AdHelp/Silas Printz\r\n  const isAdHelp = from.includes('sp@adhelp.dk') || \r\n                   from.includes('silas') ||\r\n                   /adhelp/i.test(text) ||\r\n                   /silas.*printz/i.test(text);\r\n  \r\n  if (!isAdHelp) return undefined;\r\n\r\n  const payload: ParsedLeadPayload = {\r\n    brand: 'rendetalje', // Default brand, can be overridden by content analysis\r\n    source: 'adhelp',\r\n    name: undefined,\r\n    phone: undefined,\r\n    email: undefined,\r\n    address: undefined,\r\n    postal_code: undefined,\r\n    city: undefined,\r\n    service_type: undefined,\r\n    frequency: undefined,\r\n    notes: undefined\r\n  };\r\n\r\n  // AdHelp emails can have very variable formats, so we use multiple extraction strategies\r\n\r\n  // Strategy 1: Structured data extraction\r\n  payload.name = extractField(text, ['navn', 'name', 'customer']);\r\n  payload.phone = extractPhone(text);\r\n  payload.email = extractEmail(text);\r\n  payload.address = extractField(text, ['adresse', 'address']);\r\n  payload.postal_code = extractPostalCode(text);\r\n  payload.city = extractField(text, ['by', 'city']);\r\n  \r\n  // Strategy 2: Service type detection\r\n  payload.service_type = detectServiceType(text);\r\n  payload.frequency = detectFrequency(text);\r\n  \r\n  // Strategy 3: Area extraction\r\n  const area = extractArea(text);\r\n  if (area) {\r\n    payload.area_sqm = area;\r\n  }\r\n\r\n  // Strategy 4: Brand detection based on content\r\n  payload.brand = detectBrand(text, input.mailbox);\r\n\r\n  // Strategy 5: Extract any additional notes/context\r\n  payload.notes = extractNotes(text);\r\n\r\n  // Handle forwarded emails or quote blocks\r\n  const cleanedText = removeSignaturesAndQuotes(text);\r\n  if (cleanedText !== text) {\r\n    // Re-run extraction on cleaned text for better accuracy\r\n    const cleanPayload = extractFromCleanText(cleanedText);\r\n    // Merge results, preferring non-empty values from cleaned extraction\r\n    Object.keys(cleanPayload).forEach(key => {\r\n      if (cleanPayload[key] && !payload[key]) {\r\n        payload[key] = cleanPayload[key];\r\n      }\r\n    });\r\n  }\r\n\r\n  // Calculate confidence based on extracted fields and patterns\r\n  let confidence = calculateConfidence(payload, text);\r\n\r\n  // Special handling for very short or unclear emails\r\n  if (text.length < 100) {\r\n    confidence *= 0.5; // Reduce confidence for very short emails\r\n  }\r\n\r\n  // If we have very low confidence, mark as needing manual review\r\n  if (confidence < 0.3) {\r\n    payload.partial = true;\r\n    payload.notes = (payload.notes || '') + '\\n[NEEDS MANUAL REVIEW - Low confidence parsing]';\r\n  }\r\n\r\n  return { payload: finalizePayload(payload), confidence };\r\n}\r\n\r\nfunction extractField(text: string, fieldNames: string[]): string | undefined {\r\n  for (const fieldName of fieldNames) {\r\n    // Try various patterns for each field name\r\n    const patterns = [\r\n      new RegExp(`${fieldName}:?\\\\s*(.+?)(?:\\\\n|$)`, 'i'),\r\n      new RegExp(`${fieldName}\\\\s*-\\\\s*(.+?)(?:\\\\n|$)`, 'i'),\r\n      new RegExp(`${fieldName}\\\\s*=\\\\s*(.+?)(?:\\\\n|$)`, 'i'),\r\n    ];\r\n\r\n    for (const pattern of patterns) {\r\n      const match = text.match(pattern);\r\n      if (match && match[1].trim().length > 0) {\r\n        return match[1].trim();\r\n      }\r\n    }\r\n  }\r\n  return undefined;\r\n}\r\n\r\nfunction extractPhone(text: string): string | undefined {\r\n  // Multiple phone number patterns for Danish numbers\r\n  const patterns = [\r\n    /(?:tlf|telefon|phone|mobil)[:.]?\\s*([+]?45\\s*)?([0-9]{2}\\s*[0-9]{2}\\s*[0-9]{2}\\s*[0-9]{2})/i,\r\n    /(?:tlf|telefon|phone|mobil)[:.]?\\s*([+]?45\\s*)?([0-9]{8})/i,\r\n    /([+]45\\s*[0-9]{2}\\s*[0-9]{2}\\s*[0-9]{2}\\s*[0-9]{2})/,\r\n    /([0-9]{2}\\s*[0-9]{2}\\s*[0-9]{2}\\s*[0-9]{2})/,\r\n    /([+]?45[0-9]{8})/,\r\n    /([0-9]{8})/\r\n  ];\r\n\r\n  for (const pattern of patterns) {\r\n    const match = text.match(pattern);\r\n    if (match) {\r\n      // Clean up the phone number\r\n      let phone = match[0].replace(/[^\\d+]/g, '');\r\n      if (phone.length === 8 && !phone.startsWith('+')) {\r\n        phone = '+45' + phone;\r\n      }\r\n      return phone;\r\n    }\r\n  }\r\n  return undefined;\r\n}\r\n\r\nfunction extractEmail(text: string): string | undefined {\r\n  const emailPattern = /(?:e-?mail|email|mail)[:.]?\\s*([\\w.+-]+@[\\w.-]+\\.[a-zA-Z]{2,})/i;\r\n  const match = text.match(emailPattern);\r\n  if (match) {\r\n    return match[1].toLowerCase();\r\n  }\r\n\r\n  // Fallback: look for any email pattern\r\n  const genericEmailPattern = /([\\w.+-]+@[\\w.-]+\\.[a-zA-Z]{2,})/;\r\n  const genericMatch = text.match(genericEmailPattern);\r\n  if (genericMatch) {\r\n    return genericMatch[1].toLowerCase();\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nfunction extractPostalCode(text: string): string | undefined {\r\n  const patterns = [\r\n    /(?:postnr|postal.*code|zip)[:.]?\\s*(\\d{4})/i,\r\n    /(\\d{4})\\s+[A-Za-zÆØÅæøå]/\r\n  ];\r\n\r\n  for (const pattern of patterns) {\r\n    const match = text.match(pattern);\r\n    if (match) {\r\n      return match[1];\r\n    }\r\n  }\r\n  return undefined;\r\n}\r\n\r\nfunction detectServiceType(text: string): string | undefined {\r\n  const serviceTypes = [\r\n    { pattern: /privat|hjem|bolig|villa|lejlighed/i, type: 'privat' },\r\n    { pattern: /erhverv|firma|kontor|virksomhed|business/i, type: 'erhverv' },\r\n    { pattern: /flyt|flytterengøring|move.*clean/i, type: 'flyt' },\r\n    { pattern: /vindues|window|rude/i, type: 'vindues' },\r\n    { pattern: /foodtruck|catering|mad|menu|køkken/i, type: 'catering' }\r\n  ];\r\n\r\n  for (const service of serviceTypes) {\r\n    if (service.pattern.test(text)) {\r\n      return service.type;\r\n    }\r\n  }\r\n  return undefined;\r\n}\r\n\r\nfunction detectFrequency(text: string): string | undefined {\r\n  const frequencies = [\r\n    { pattern: /ugentlig|weekly|hver.*uge/i, freq: 'ugentlig' },\r\n    { pattern: /månedlig|monthly|hver.*måned/i, freq: 'månedlig' },\r\n    { pattern: /hver.*14.*dag|bi.*weekly|14.*dag/i, freq: 'hver 14. dag' },\r\n    { pattern: /engangs|one.*time|én.*gang/i, freq: 'engangs' }\r\n  ];\r\n\r\n  for (const frequency of frequencies) {\r\n    if (frequency.pattern.test(text)) {\r\n      return frequency.freq;\r\n    }\r\n  }\r\n  return undefined;\r\n}\r\n\r\nfunction extractArea(text: string): number | undefined {\r\n  const areaPattern = /(\\d+)\\s*(?:m2|m²|kvadratmeter|square.*meter|kvm)/i;\r\n  const match = text.match(areaPattern);\r\n  if (match) {\r\n    return parseInt(match[1], 10);\r\n  }\r\n  return undefined;\r\n}\r\n\r\nfunction detectBrand(text: string, mailbox: string): 'rendetalje' | 'foodtruck' | 'tekup' {\r\n  // Check mailbox first\r\n  if (mailbox.includes('foodtruck') || mailbox.includes('ftfiesta')) {\r\n    return 'foodtruck';\r\n  }\r\n  \r\n  if (mailbox.includes('tekup')) {\r\n    return 'tekup';\r\n  }\r\n\r\n  // Check content\r\n  if (/foodtruck|catering|mad|menu|fest|event|bryllup|firmafest/i.test(text)) {\r\n    return 'foodtruck';\r\n  }\r\n\r\n  if (/it.*support|backup|sikkerhed|compliance|nis2|copilot/i.test(text)) {\r\n    return 'tekup';\r\n  }\r\n\r\n  // Default to Rendetalje\r\n  return 'rendetalje';\r\n}\r\n\r\nfunction extractNotes(text: string): string | undefined {\r\n  // Look for additional context or special instructions\r\n  const notePatterns = [\r\n    /bemærkning[:.]?\\s*(.+?)(?:\\n\\n|$)/i,\r\n    /note[:.]?\\s*(.+?)(?:\\n\\n|$)/i,\r\n    /beskrivelse[:.]?\\s*(.+?)(?:\\n\\n|$)/i,\r\n    /yderligere[:.]?\\s*(.+?)(?:\\n\\n|$)/i\r\n  ];\r\n\r\n  for (const pattern of notePatterns) {\r\n    const match = text.match(pattern);\r\n    if (match && match[1].trim().length > 10) {\r\n      return match[1].trim();\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nfunction removeSignaturesAndQuotes(text: string): string {\r\n  // Remove common signature delimiters\r\n  const signatureDelimiters = [\r\n    /\\n--\\s*\\n/,\r\n    /\\nMed venlig hilsen/i,\r\n    /\\nBest regards/i,\r\n    /\\nMVH/i,\r\n    /\\n_{2,}/\r\n  ];\r\n\r\n  let cleaned = text;\r\n  for (const delimiter of signatureDelimiters) {\r\n    const match = cleaned.search(delimiter);\r\n    if (match > 0) {\r\n      cleaned = cleaned.substring(0, match);\r\n    }\r\n  }\r\n\r\n  // Remove quoted text (forwarded emails)\r\n  cleaned = cleaned.replace(/^>.*/gm, ''); // Remove lines starting with >\r\n  cleaned = cleaned.replace(/\\n\\nFra:.*/s, ''); // Remove forwarded email headers\r\n  \r\n  return cleaned.trim();\r\n}\r\n\r\nfunction extractFromCleanText(cleanText: string): Partial<ParsedLeadPayload> {\r\n  return {\r\n    name: extractField(cleanText, ['navn', 'name']),\r\n    phone: extractPhone(cleanText),\r\n    email: extractEmail(cleanText),\r\n    address: extractField(cleanText, ['adresse', 'address']),\r\n    postal_code: extractPostalCode(cleanText),\r\n    service_type: detectServiceType(cleanText),\r\n    frequency: detectFrequency(cleanText)\r\n  };\r\n}\r\n\r\nfunction calculateConfidence(payload: ParsedLeadPayload, text: string): number {\r\n  let confidence = 0;\r\n  let factors = 0;\r\n\r\n  // Key field presence\r\n  if (payload.email) { confidence += 0.3; factors++; }\r\n  if (payload.phone) { confidence += 0.3; factors++; }\r\n  if (payload.name) { confidence += 0.2; factors++; }\r\n  if (payload.address) { confidence += 0.1; factors++; }\r\n  if (payload.service_type) { confidence += 0.1; factors++; }\r\n\r\n  // Text quality indicators\r\n  if (text.includes(':') || text.includes('=')) { confidence += 0.1; } // Structured format\r\n  if (text.length > 200) { confidence += 0.1; } // Sufficient content\r\n  if (/rengøring|cleaning|adhelp/i.test(text)) { confidence += 0.1; } // Relevant keywords\r\n\r\n  return Math.min(1, confidence);\r\n}"],"names":["parseAdHelp","input","text","rawText","from","toLowerCase","isAdHelp","includes","test","undefined","payload","brand","source","name","phone","email","address","postal_code","city","service_type","frequency","notes","extractField","extractPhone","extractEmail","extractPostalCode","detectServiceType","detectFrequency","area","extractArea","area_sqm","detectBrand","mailbox","extractNotes","cleanedText","removeSignaturesAndQuotes","cleanPayload","extractFromCleanText","Object","keys","forEach","key","confidence","calculateConfidence","length","partial","finalizePayload","fieldNames","fieldName","patterns","RegExp","pattern","match","trim","replace","startsWith","emailPattern","genericEmailPattern","genericMatch","serviceTypes","type","service","frequencies","freq","areaPattern","parseInt","notePatterns","signatureDelimiters","cleaned","delimiter","search","substring","cleanText","factors","Math","min"],"mappings":"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"}