{"version":3,"sources":["C:\\Users\\empir\\Tekup-org\\apps\\flow-api\\src\\settings\\__tests__\\settings.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { SettingsController } from '../settings.controller.js';\r\nimport { SettingsService } from '../settings.service.js';\r\nimport { ApiKeyGuard } from '../../auth/api-key.guard.js';\r\nimport { ScopesGuard } from '../../auth/scopes.guard.js';\r\nimport { Reflector } from '@nestjs/core';\r\nimport { SCOPE_MANAGE_SETTINGS } from '../../auth/scopes.constants.js';\r\nimport type { ApiKeyInfo } from '../../auth/api-key-info.decorator.js';\r\n\r\ndescribe('SettingsController', () => {\r\n  let controller: SettingsController;\r\n  let settingsService: SettingsService;\r\n\r\n  const mockSettingsService = {\r\n    getResolved: jest.fn(),\r\n    update: jest.fn(),\r\n  };\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      controllers: [SettingsController],\r\n      providers: [\r\n        {\r\n          provide: SettingsService,\r\n          useValue: mockSettingsService,\r\n        },\r\n        Reflector,\r\n      ],\r\n    })\r\n      .overrideGuard(ApiKeyGuard)\r\n      .useValue({ canActivate: jest.fn(() => true) })\r\n      .overrideGuard(ScopesGuard)\r\n      .useValue({ canActivate: jest.fn(() => true) })\r\n      .compile();\r\n\r\n    controller = module.get<SettingsController>(SettingsController);\r\n    settingsService = module.get<SettingsService>(SettingsService);\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('get', () => {\r\n    it('should return resolved settings', async () => {\r\n      const tenantId = 'tenant-123';\r\n      const mockSettings = {\r\n        brand_display_name: 'Test Brand',\r\n        duplicate_window_minutes: 5,\r\n      };\r\n\r\n      mockSettingsService.getResolved.mockResolvedValue(mockSettings);\r\n\r\n      const result = await controller.get(tenantId);\r\n\r\n      expect(result).toEqual({ settings: mockSettings });\r\n      expect(mockSettingsService.getResolved).toHaveBeenCalledWith(tenantId);\r\n    });\r\n\r\n    it('should pass through service errors', async () => {\r\n      const tenantId = 'tenant-123';\r\n      const error = new Error('Database error');\r\n\r\n      mockSettingsService.getResolved.mockRejectedValue(error);\r\n\r\n      await expect(controller.get(tenantId)).rejects.toThrow(error);\r\n    });\r\n  });\r\n\r\n  describe('patch', () => {\r\n    const tenantId = 'tenant-123';\r\n    const apiKey: ApiKeyInfo = {\r\n      keyId: 'key-456',\r\n      scopes: [SCOPE_MANAGE_SETTINGS],\r\n      permissions: [],\r\n      environment: 'production',\r\n      tenantId,\r\n    };\r\n\r\n    it('should update settings and return result', async () => {\r\n      const updates = {\r\n        brand_display_name: 'Updated Brand',\r\n        duplicate_window_minutes: 10,\r\n      };\r\n      const body = { updates };\r\n      const mockResult = { \r\n        brand_display_name: 'Updated Brand',\r\n        duplicate_window_minutes: 10,\r\n        theme_primary_color: '#000000' \r\n      };\r\n\r\n      mockSettingsService.update.mockResolvedValue(mockResult);\r\n\r\n      const result = await controller.patch(tenantId, apiKey, body);\r\n\r\n      expect(result).toEqual({ settings: mockResult });\r\n      expect(mockSettingsService.update).toHaveBeenCalledWith(tenantId, updates, apiKey.keyId);\r\n    });\r\n\r\n    it('should handle empty updates object', async () => {\r\n      const body = {}; // No updates key\r\n      const mockResult = { brand_display_name: 'Test Brand' };\r\n\r\n      mockSettingsService.update.mockResolvedValue(mockResult);\r\n\r\n      const result = await controller.patch(tenantId, apiKey, body);\r\n\r\n      expect(result).toEqual({ settings: mockResult });\r\n      expect(mockSettingsService.update).toHaveBeenCalledWith(tenantId, {}, apiKey.keyId);\r\n    });\r\n\r\n    it('should handle empty body.updates', async () => {\r\n      const body = { updates: {} };\r\n      const mockResult = { brand_display_name: 'Test Brand' };\r\n\r\n      mockSettingsService.update.mockResolvedValue(mockResult);\r\n\r\n      const result = await controller.patch(tenantId, apiKey, body);\r\n\r\n      expect(result).toEqual({ settings: mockResult });\r\n      expect(mockSettingsService.update).toHaveBeenCalledWith(tenantId, {}, apiKey.keyId);\r\n    });\r\n\r\n    it('should pass through service errors', async () => {\r\n      const body = { updates: { invalid_key: 'value' } };\r\n      const error = new Error('Invalid setting key');\r\n\r\n      mockSettingsService.update.mockRejectedValue(error);\r\n\r\n      await expect(controller.patch(tenantId, apiKey, body)).rejects.toThrow(error);\r\n    });\r\n\r\n    it('should use apiKey.keyId as actor for audit trail', async () => {\r\n      const body = { updates: { brand_display_name: 'New Brand' } };\r\n      const mockResult = { brand_display_name: 'New Brand' };\r\n\r\n      mockSettingsService.update.mockResolvedValue(mockResult);\r\n\r\n      await controller.patch(tenantId, apiKey, body);\r\n\r\n      expect(mockSettingsService.update).toHaveBeenCalledWith(\r\n        tenantId, \r\n        { brand_display_name: 'New Brand' }, \r\n        apiKey.keyId\r\n      );\r\n    });\r\n  });\r\n});\r\n"],"names":["describe","controller","settingsService","mockSettingsService","getResolved","jest","fn","update","beforeEach","module","Test","createTestingModule","controllers","SettingsController","providers","provide","SettingsService","useValue","Reflector","overrideGuard","ApiKeyGuard","canActivate","ScopesGuard","compile","get","afterEach","clearAllMocks","it","tenantId","mockSettings","brand_display_name","duplicate_window_minutes","mockResolvedValue","result","expect","toEqual","settings","toHaveBeenCalledWith","error","Error","mockRejectedValue","rejects","toThrow","apiKey","keyId","scopes","SCOPE_MANAGE_SETTINGS","permissions","environment","updates","body","mockResult","theme_primary_color","patch","invalid_key"],"mappings":"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"}