7c495006a7f2734286b3f86293e1ea79
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _testing = require("@nestjs/testing");
const _settingscontroller = require("../settings.controller.js");
const _settingsservice = require("../settings.service.js");
const _apikeyguard = require("../../auth/api-key.guard.js");
const _scopesguard = require("../../auth/scopes.guard.js");
const _core = require("@nestjs/core");
const _scopesconstants = require("../../auth/scopes.constants.js");
describe('SettingsController', ()=>{
    let controller;
    let settingsService;
    const mockSettingsService = {
        getResolved: jest.fn(),
        update: jest.fn()
    };
    beforeEach(async ()=>{
        const module = await _testing.Test.createTestingModule({
            controllers: [
                _settingscontroller.SettingsController
            ],
            providers: [
                {
                    provide: _settingsservice.SettingsService,
                    useValue: mockSettingsService
                },
                _core.Reflector
            ]
        }).overrideGuard(_apikeyguard.ApiKeyGuard).useValue({
            canActivate: jest.fn(()=>true)
        }).overrideGuard(_scopesguard.ScopesGuard).useValue({
            canActivate: jest.fn(()=>true)
        }).compile();
        controller = module.get(_settingscontroller.SettingsController);
        settingsService = module.get(_settingsservice.SettingsService);
    });
    afterEach(()=>{
        jest.clearAllMocks();
    });
    describe('get', ()=>{
        it('should return resolved settings', async ()=>{
            const tenantId = 'tenant-123';
            const mockSettings = {
                brand_display_name: 'Test Brand',
                duplicate_window_minutes: 5
            };
            mockSettingsService.getResolved.mockResolvedValue(mockSettings);
            const result = await controller.get(tenantId);
            expect(result).toEqual({
                settings: mockSettings
            });
            expect(mockSettingsService.getResolved).toHaveBeenCalledWith(tenantId);
        });
        it('should pass through service errors', async ()=>{
            const tenantId = 'tenant-123';
            const error = new Error('Database error');
            mockSettingsService.getResolved.mockRejectedValue(error);
            await expect(controller.get(tenantId)).rejects.toThrow(error);
        });
    });
    describe('patch', ()=>{
        const tenantId = 'tenant-123';
        const apiKey = {
            keyId: 'key-456',
            scopes: [
                _scopesconstants.SCOPE_MANAGE_SETTINGS
            ],
            permissions: [],
            environment: 'production',
            tenantId
        };
        it('should update settings and return result', async ()=>{
            const updates = {
                brand_display_name: 'Updated Brand',
                duplicate_window_minutes: 10
            };
            const body = {
                updates
            };
            const mockResult = {
                brand_display_name: 'Updated Brand',
                duplicate_window_minutes: 10,
                theme_primary_color: '#000000'
            };
            mockSettingsService.update.mockResolvedValue(mockResult);
            const result = await controller.patch(tenantId, apiKey, body);
            expect(result).toEqual({
                settings: mockResult
            });
            expect(mockSettingsService.update).toHaveBeenCalledWith(tenantId, updates, apiKey.keyId);
        });
        it('should handle empty updates object', async ()=>{
            const body = {}; // No updates key
            const mockResult = {
                brand_display_name: 'Test Brand'
            };
            mockSettingsService.update.mockResolvedValue(mockResult);
            const result = await controller.patch(tenantId, apiKey, body);
            expect(result).toEqual({
                settings: mockResult
            });
            expect(mockSettingsService.update).toHaveBeenCalledWith(tenantId, {}, apiKey.keyId);
        });
        it('should handle empty body.updates', async ()=>{
            const body = {
                updates: {}
            };
            const mockResult = {
                brand_display_name: 'Test Brand'
            };
            mockSettingsService.update.mockResolvedValue(mockResult);
            const result = await controller.patch(tenantId, apiKey, body);
            expect(result).toEqual({
                settings: mockResult
            });
            expect(mockSettingsService.update).toHaveBeenCalledWith(tenantId, {}, apiKey.keyId);
        });
        it('should pass through service errors', async ()=>{
            const body = {
                updates: {
                    invalid_key: 'value'
                }
            };
            const error = new Error('Invalid setting key');
            mockSettingsService.update.mockRejectedValue(error);
            await expect(controller.patch(tenantId, apiKey, body)).rejects.toThrow(error);
        });
        it('should use apiKey.keyId as actor for audit trail', async ()=>{
            const body = {
                updates: {
                    brand_display_name: 'New Brand'
                }
            };
            const mockResult = {
                brand_display_name: 'New Brand'
            };
            mockSettingsService.update.mockResolvedValue(mockResult);
            await controller.patch(tenantId, apiKey, body);
            expect(mockSettingsService.update).toHaveBeenCalledWith(tenantId, {
                brand_display_name: 'New Brand'
            }, apiKey.keyId);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,