{"version":3,"sources":["C:\\Users\\empir\\Tekup-org\\apps\\flow-api\\src\\gdpr\\__tests__\\gdpr.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { GdprService } from '../gdpr.service';\r\nimport { PrismaService } from '../../prisma/prisma.service';\r\nimport { ConfigService } from '@nestjs/config';\r\n\r\ndescribe('GdprService', () => {\r\n  let service: GdprService;\r\n  let prismaService: PrismaService;\r\n  let configService: ConfigService;\r\n\r\n  const mockPrismaService = {\r\n    customerConsent: {\r\n      create: jest.fn(),\r\n      updateMany: jest.fn(),\r\n      findMany: jest.fn(),\r\n      findFirst: jest.fn(),\r\n    },\r\n    dataRetentionPolicy: {\r\n      findMany: jest.fn(),\r\n      updateMany: jest.fn(),\r\n      count: jest.fn(),\r\n    },\r\n    dataSubjectRequest: {\r\n      create: jest.fn(),\r\n      update: jest.fn(),\r\n      findFirst: jest.fn(),\r\n    },\r\n    lead: {\r\n      findFirst: jest.fn(),\r\n      updateMany: jest.fn(),\r\n      findMany: jest.fn(),\r\n    },\r\n    tenantSetting: {\r\n      findMany: jest.fn(),\r\n    },\r\n  };\r\n\r\n  const mockConfigService = {\r\n    get: jest.fn(),\r\n  };\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        GdprService,\r\n        {\r\n          provide: PrismaService,\r\n          useValue: mockPrismaService,\r\n        },\r\n        {\r\n          provide: ConfigService,\r\n          useValue: mockConfigService,\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<GdprService>(GdprService);\r\n    prismaService = module.get<PrismaService>(PrismaService);\r\n    configService = module.get<ConfigService>(ConfigService);\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('recordConsent', () => {\r\n    it('should record customer consent successfully', async () => {\r\n      const tenantId = 'test-tenant-id';\r\n      const consent = {\r\n        customerId: 'customer-123',\r\n        consentType: 'marketing',\r\n        consentGiven: true,\r\n        legalBasis: 'consent',\r\n        dataUsage: { purpose: 'marketing communications' },\r\n      };\r\n\r\n      mockPrismaService.customerConsent.create.mockResolvedValue({ id: 'consent-123' });\r\n      mockConfigService.get.mockReturnValue('1.0.0');\r\n\r\n      await service.recordConsent(tenantId, consent);\r\n\r\n      expect(mockPrismaService.customerConsent.create).toHaveBeenCalledWith({\r\n        data: {\r\n          tenantId,\r\n          customerId: consent.customerId,\r\n          consentType: consent.consentType,\r\n          consentGiven: consent.consentGiven,\r\n          consentDate: expect.any(Date),\r\n          consentVersion: '1.0.0',\r\n          legalBasis: consent.legalBasis,\r\n          dataUsage: consent.dataUsage,\r\n        },\r\n      });\r\n    });\r\n\r\n    it('should handle consent recording errors', async () => {\r\n      const tenantId = 'test-tenant-id';\r\n      const consent = {\r\n        customerId: 'customer-123',\r\n        consentType: 'marketing',\r\n        consentGiven: true,\r\n        legalBasis: 'consent',\r\n      };\r\n\r\n      mockPrismaService.customerConsent.create.mockRejectedValue(new Error('Database error'));\r\n\r\n      await expect(service.recordConsent(tenantId, consent)).rejects.toThrow('Database error');\r\n    });\r\n  });\r\n\r\n  describe('withdrawConsent', () => {\r\n    it('should withdraw customer consent successfully', async () => {\r\n      const tenantId = 'test-tenant-id';\r\n      const customerId = 'customer-123';\r\n      const consentType = 'marketing';\r\n\r\n      mockPrismaService.customerConsent.updateMany.mockResolvedValue({ count: 1 });\r\n\r\n      await service.withdrawConsent(tenantId, customerId, consentType);\r\n\r\n      expect(mockPrismaService.customerConsent.updateMany).toHaveBeenCalledWith({\r\n        where: {\r\n          tenantId,\r\n          customerId,\r\n          consentType,\r\n          consentWithdrawn: null,\r\n        },\r\n        data: {\r\n          consentWithdrawn: expect.any(Date),\r\n        },\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('processDataSubjectRequest', () => {\r\n    it('should process access request successfully', async () => {\r\n      const tenantId = 'test-tenant-id';\r\n      const request = {\r\n        customerId: 'customer-123',\r\n        requestType: 'access' as const,\r\n        notes: 'Customer wants to see their data',\r\n      };\r\n\r\n      const mockRequest = { id: 'request-123' };\r\n      mockPrismaService.dataSubjectRequest.create.mockResolvedValue(mockRequest);\r\n      mockPrismaService.lead.findMany.mockResolvedValue([]);\r\n      mockPrismaService.customerConsent.findMany.mockResolvedValue([]);\r\n      mockPrismaService.tenantSetting.findMany.mockResolvedValue([]);\r\n      mockPrismaService.dataSubjectRequest.update.mockResolvedValue({});\r\n\r\n      const result = await service.processDataSubjectRequest(tenantId, request);\r\n\r\n      expect(result).toBe('request-123');\r\n      expect(mockPrismaService.dataSubjectRequest.create).toHaveBeenCalledWith({\r\n        data: {\r\n          tenantId,\r\n          customerId: request.customerId,\r\n          requestType: request.requestType,\r\n          status: 'processing',\r\n          notes: request.notes,\r\n        },\r\n      });\r\n    });\r\n\r\n    it('should process erasure request successfully', async () => {\r\n      const tenantId = 'test-tenant-id';\r\n      const request = {\r\n        customerId: 'customer-123',\r\n        requestType: 'erasure' as const,\r\n      };\r\n\r\n      const mockRequest = { id: 'request-123' };\r\n      mockPrismaService.dataSubjectRequest.create.mockResolvedValue(mockRequest);\r\n      mockPrismaService.lead.findFirst.mockResolvedValue(null); // No regulatory data\r\n      mockPrismaService.lead.updateMany.mockResolvedValue({});\r\n      mockPrismaService.dataSubjectRequest.update.mockResolvedValue({});\r\n\r\n      const result = await service.processDataSubjectRequest(tenantId, request);\r\n\r\n      expect(result).toBe('request-123');\r\n    });\r\n\r\n    it('should reject erasure request with regulatory data', async () => {\r\n      const tenantId = 'test-tenant-id';\r\n      const request = {\r\n        customerId: 'customer-123',\r\n        requestType: 'erasure' as const,\r\n      };\r\n\r\n      const mockRequest = { id: 'request-123' };\r\n      mockPrismaService.dataSubjectRequest.create.mockResolvedValue(mockRequest);\r\n      mockPrismaService.lead.findFirst.mockResolvedValue({ \r\n        id: 'lead-123', \r\n        complianceType: 'NIS2_FINDING' \r\n      }); // Has regulatory data\r\n      mockPrismaService.dataSubjectRequest.update.mockResolvedValue({});\r\n\r\n      const result = await service.processDataSubjectRequest(tenantId, request);\r\n\r\n      expect(result).toBe('request-123');\r\n      // Should have rejected the erasure\r\n      expect(mockPrismaService.dataSubjectRequest.update).toHaveBeenCalledWith({\r\n        where: { id: 'request-123' },\r\n        data: {\r\n          status: 'rejected',\r\n          completedAt: expect.any(Date),\r\n          notes: 'Erasure not legally permitted due to regulatory requirements',\r\n        },\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('getDataSubjectRequestStatus', () => {\r\n    it('should return request status successfully', async () => {\r\n      const tenantId = 'test-tenant-id';\r\n      const requestId = 'request-123';\r\n\r\n      const mockRequest = {\r\n        id: requestId,\r\n        status: 'completed',\r\n        customerId: 'customer-123',\r\n      };\r\n\r\n      mockPrismaService.dataSubjectRequest.findFirst.mockResolvedValue(mockRequest);\r\n\r\n      const result = await service.getDataSubjectRequestStatus(tenantId, requestId);\r\n\r\n      expect(result).toEqual(mockRequest);\r\n      expect(mockPrismaService.dataSubjectRequest.findFirst).toHaveBeenCalledWith({\r\n        where: {\r\n          id: requestId,\r\n          tenantId,\r\n        },\r\n      });\r\n    });\r\n\r\n    it('should throw error for non-existent request', async () => {\r\n      const tenantId = 'test-tenant-id';\r\n      const requestId = 'request-123';\r\n\r\n      mockPrismaService.dataSubjectRequest.findFirst.mockResolvedValue(null);\r\n\r\n      await expect(service.getDataSubjectRequestStatus(tenantId, requestId))\r\n        .rejects.toThrow('Data subject request not found');\r\n    });\r\n  });\r\n\r\n  describe('getCustomerConsentStatus', () => {\r\n    it('should return customer consent status successfully', async () => {\r\n      const tenantId = 'test-tenant-id';\r\n      const customerId = 'customer-123';\r\n\r\n      const mockConsents = [\r\n        { id: 'consent-1', consentType: 'marketing', consentGiven: true },\r\n        { id: 'consent-2', consentType: 'data_processing', consentGiven: false },\r\n      ];\r\n\r\n      mockPrismaService.customerConsent.findMany.mockResolvedValue(mockConsents);\r\n\r\n      const result = await service.getCustomerConsentStatus(tenantId, customerId);\r\n\r\n      expect(result).toEqual(mockConsents);\r\n      expect(mockPrismaService.customerConsent.findMany).toHaveBeenCalledWith({\r\n        where: {\r\n          tenantId,\r\n          customerId,\r\n        },\r\n        orderBy: {\r\n          createdAt: 'desc',\r\n        },\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('getDataRetentionPolicies', () => {\r\n    it('should return data retention policies successfully', async () => {\r\n      const tenantId = 'test-tenant-id';\r\n\r\n      const mockPolicies = [\r\n        { id: 'policy-1', dataType: 'leads', retentionPeriod: '7 years' },\r\n        { id: 'policy-2', dataType: 'customer_data', retentionPeriod: '3 years' },\r\n      ];\r\n\r\n      mockPrismaService.dataRetentionPolicy.findMany.mockResolvedValue(mockPolicies);\r\n\r\n      const result = await service.getDataRetentionPolicies(tenantId);\r\n\r\n      expect(result).toEqual(mockPolicies);\r\n      expect(mockPrismaService.dataRetentionPolicy.findMany).toHaveBeenCalledWith({\r\n        where: { tenantId },\r\n        orderBy: { dataType: 'asc' },\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('updateDataRetentionPolicy', () => {\r\n    it('should update data retention policy successfully', async () => {\r\n      const tenantId = 'test-tenant-id';\r\n      const dataType = 'leads';\r\n      const updates = { retentionPeriod: '5 years' };\r\n\r\n      mockPrismaService.dataRetentionPolicy.updateMany.mockResolvedValue({ count: 1 });\r\n\r\n      await service.updateDataRetentionPolicy(tenantId, dataType, updates);\r\n\r\n      expect(mockPrismaService.dataRetentionPolicy.updateMany).toHaveBeenCalledWith({\r\n        where: {\r\n          tenantId,\r\n          dataType,\r\n        },\r\n        data: {\r\n          ...updates,\r\n          updatedAt: expect.any(Date),\r\n        },\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('hasValidConsent', () => {\r\n    it('should return true for valid consent', async () => {\r\n      const tenantId = 'test-tenant-id';\r\n      const customerId = 'customer-123';\r\n      const consentType = 'marketing';\r\n\r\n      const mockConsent = {\r\n        id: 'consent-123',\r\n        consentGiven: true,\r\n        consentWithdrawn: null,\r\n      };\r\n\r\n      mockPrismaService.customerConsent.findFirst.mockResolvedValue(mockConsent);\r\n\r\n      const result = await service.hasValidConsent(tenantId, customerId, consentType);\r\n\r\n      expect(result).toBe(true);\r\n    });\r\n\r\n    it('should return false for withdrawn consent', async () => {\r\n      const tenantId = 'test-tenant-id';\r\n      const customerId = 'customer-123';\r\n      const consentType = 'marketing';\r\n\r\n      const mockConsent = {\r\n        id: 'consent-123',\r\n        consentGiven: true,\r\n        consentWithdrawn: new Date(), // Consent was withdrawn\r\n      };\r\n\r\n      mockPrismaService.customerConsent.findFirst.mockResolvedValue(mockConsent);\r\n\r\n      const result = await service.hasValidConsent(tenantId, customerId, consentType);\r\n\r\n      expect(result).toBe(false);\r\n    });\r\n\r\n    it('should return false for no consent', async () => {\r\n      const tenantId = 'test-tenant-id';\r\n      const customerId = 'customer-123';\r\n      const consentType = 'marketing';\r\n\r\n      mockPrismaService.customerConsent.findFirst.mockResolvedValue(null);\r\n\r\n      const result = await service.hasValidConsent(tenantId, customerId, consentType);\r\n\r\n      expect(result).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('getGdprComplianceSummary', () => {\r\n    it('should return GDPR compliance summary successfully', async () => {\r\n      const tenantId = 'test-tenant-id';\r\n\r\n      mockPrismaService.customerConsent.count.mockResolvedValue(10);\r\n      mockPrismaService.dataSubjectRequest.count.mockResolvedValue(5);\r\n      mockPrismaService.dataRetentionPolicy.count.mockResolvedValue(3);\r\n\r\n      const result = await service.getGdprComplianceSummary(tenantId);\r\n\r\n      expect(result).toEqual({\r\n        tenantId,\r\n        consentRecords: 10,\r\n        dataSubjectRequests: 5,\r\n        retentionPolicies: 3,\r\n        lastUpdated: expect.any(Date),\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('error handling', () => {\r\n    it('should handle database errors gracefully', async () => {\r\n      const tenantId = 'test-tenant-id';\r\n      const customerId = 'customer-123';\r\n\r\n      mockPrismaService.customerConsent.findMany.mockRejectedValue(new Error('Database connection failed'));\r\n\r\n      await expect(service.getCustomerConsentStatus(tenantId, customerId))\r\n        .rejects.toThrow('Database connection failed');\r\n    });\r\n\r\n    it('should handle missing configuration gracefully', async () => {\r\n      mockConfigService.get.mockReturnValue(undefined);\r\n\r\n      const result = service['getConsentVersion']();\r\n\r\n      expect(result).toBe('1.0.0'); // Default value\r\n    });\r\n  });\r\n});"],"names":["describe","service","prismaService","configService","mockPrismaService","customerConsent","create","jest","fn","updateMany","findMany","findFirst","dataRetentionPolicy","count","dataSubjectRequest","update","lead","tenantSetting","mockConfigService","get","beforeEach","module","Test","createTestingModule","providers","GdprService","provide","PrismaService","useValue","ConfigService","compile","afterEach","clearAllMocks","it","tenantId","consent","customerId","consentType","consentGiven","legalBasis","dataUsage","purpose","mockResolvedValue","id","mockReturnValue","recordConsent","expect","toHaveBeenCalledWith","data","consentDate","any","Date","consentVersion","mockRejectedValue","Error","rejects","toThrow","withdrawConsent","where","consentWithdrawn","request","requestType","notes","mockRequest","result","processDataSubjectRequest","toBe","status","complianceType","completedAt","requestId","getDataSubjectRequestStatus","toEqual","mockConsents","getCustomerConsentStatus","orderBy","createdAt","mockPolicies","dataType","retentionPeriod","getDataRetentionPolicies","updates","updateDataRetentionPolicy","updatedAt","mockConsent","hasValidConsent","getGdprComplianceSummary","consentRecords","dataSubjectRequests","retentionPolicies","lastUpdated","undefined"],"mappings":"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"}