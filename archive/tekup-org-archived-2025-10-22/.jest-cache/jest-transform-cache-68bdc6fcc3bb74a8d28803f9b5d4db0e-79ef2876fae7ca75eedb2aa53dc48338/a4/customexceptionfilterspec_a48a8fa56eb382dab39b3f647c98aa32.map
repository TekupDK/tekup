{"version":3,"sources":["C:\\Users\\empir\\Tekup-org\\apps\\flow-api\\src\\common\\exceptions\\__tests__\\custom-exception.filter.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { ArgumentsHost, HttpException, HttpStatus } from '@nestjs/common';\r\nimport { Request, Response } from 'express';\r\nimport { CustomExceptionFilter } from '../custom-exception.filter.js';\r\nimport { StructuredLoggerService } from '../../logging/structured-logger.service.js';\r\nimport {\r\n  BusinessValidationException,\r\n  RateLimitExceededException,\r\n  TimeoutException,\r\n} from '../custom-exceptions.js';\r\n\r\ndescribe('CustomExceptionFilter', () => {\r\n  let filter: CustomExceptionFilter;\r\n  let mockLogger: jest.Mocked<StructuredLoggerService>;\r\n  let mockRequest: Partial<Request>;\r\n  let mockResponse: Partial<Response>;\r\n  let mockArgumentsHost: jest.Mocked<ArgumentsHost>;\r\n\r\n  beforeEach(async () => {\r\n    mockLogger = {\r\n      error: jest.fn(),\r\n      warn: jest.fn(),\r\n      info: jest.fn(),\r\n      securityEvent: jest.fn(),\r\n    } as any;\r\n\r\n    mockRequest = {\r\n      url: '/api/leads',\r\n      method: 'GET',\r\n      path: '/api/leads',\r\n      headers: {\r\n        'user-agent': 'test-agent',\r\n        'x-forwarded-for': '192.168.1.1',\r\n      },\r\n      correlationId: 'test-correlation-id',\r\n      requestId: 'test-request-id',\r\n    } as any;\r\n\r\n    mockResponse = {\r\n      status: jest.fn().mockReturnThis(),\r\n      json: jest.fn(),\r\n      setHeader: jest.fn(),\r\n    };\r\n\r\n    mockArgumentsHost = {\r\n      switchToHttp: jest.fn(() => ({\r\n        getRequest: () => mockRequest,\r\n        getResponse: () => mockResponse,\r\n      })),\r\n    } as any;\r\n\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        CustomExceptionFilter,\r\n        { provide: StructuredLoggerService, useValue: mockLogger },\r\n      ],\r\n    }).compile();\r\n\r\n    filter = module.get<CustomExceptionFilter>(CustomExceptionFilter);\r\n  });\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(filter).toBeDefined();\r\n  });\r\n\r\n  describe('HTTP exceptions', () => {\r\n    it('should handle HttpException correctly', () => {\r\n      const exception = new HttpException('Bad request', HttpStatus.BAD_REQUEST);\r\n\r\n      filter.catch(exception, mockArgumentsHost);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\r\n      expect(mockResponse.json).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          statusCode: 400,\r\n          message: 'Bad request',\r\n          error: 'HttpException',\r\n          retryable: false,\r\n          correlationId: 'test-correlation-id',\r\n          requestId: 'test-request-id',\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should handle HttpException with object response', () => {\r\n      const response = { message: 'Validation failed', errors: ['field required'] };\r\n      const exception = new HttpException(response, HttpStatus.BAD_REQUEST);\r\n\r\n      filter.catch(exception, mockArgumentsHost);\r\n\r\n      expect(mockResponse.json).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          statusCode: 400,\r\n          message: 'Validation failed',\r\n          details: response,\r\n        })\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('custom exceptions', () => {\r\n    it('should handle BusinessValidationException', () => {\r\n      const exception = new BusinessValidationException('Invalid input', 'INVALID_INPUT');\r\n\r\n      filter.catch(exception, mockArgumentsHost);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\r\n      expect(mockResponse.json).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          statusCode: 400,\r\n          message: 'Invalid input',\r\n          retryable: false,\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should handle RateLimitExceededException with retry headers', () => {\r\n      const exception = new RateLimitExceededException(100, 60, 120);\r\n\r\n      filter.catch(exception, mockArgumentsHost);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(429);\r\n      expect(mockResponse.setHeader).toHaveBeenCalledWith('Retry-After', 120);\r\n      expect(mockResponse.setHeader).toHaveBeenCalledWith('X-Retry-After', 120);\r\n      expect(mockResponse.setHeader).toHaveBeenCalledWith('X-Error-Retryable', 'true');\r\n      expect(mockResponse.json).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          statusCode: 429,\r\n          retryable: true,\r\n          retryAfter: 120,\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should handle TimeoutException', () => {\r\n      const exception = new TimeoutException('database_query', 5000, 10);\r\n\r\n      filter.catch(exception, mockArgumentsHost);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(408);\r\n      expect(mockResponse.json).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          statusCode: 408,\r\n          retryable: true,\r\n          retryAfter: 10,\r\n        })\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('generic errors', () => {\r\n    it('should handle generic Error objects', () => {\r\n      const error = new Error('Something went wrong');\r\n\r\n      filter.catch(error, mockArgumentsHost);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(500);\r\n      expect(mockResponse.json).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          statusCode: 500,\r\n          message: 'Something went wrong',\r\n          error: 'Error',\r\n          retryable: true, // 500 errors are retryable\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should handle unknown exceptions', () => {\r\n      const exception = 'string exception';\r\n\r\n      filter.catch(exception, mockArgumentsHost);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(500);\r\n      expect(mockResponse.json).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          statusCode: 500,\r\n          message: 'Unknown error occurred',\r\n          error: 'UnknownError',\r\n        })\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('error mapping', () => {\r\n    it('should map database unique constraint errors to 409', () => {\r\n      const error = new Error('Unique constraint violation');\r\n      error.name = 'PrismaClientKnownRequestError';\r\n\r\n      const status = filter['mapErrorToHttpStatus'](error);\r\n      expect(status).toBe(HttpStatus.CONFLICT);\r\n    });\r\n\r\n    it('should map timeout errors to 408', () => {\r\n      const error = new Error('Request timeout');\r\n      error.name = 'TimeoutError';\r\n\r\n      const status = filter['mapErrorToHttpStatus'](error);\r\n      expect(status).toBe(HttpStatus.REQUEST_TIMEOUT);\r\n    });\r\n\r\n    it('should map validation errors to 400', () => {\r\n      const error = new Error('Validation failed');\r\n      error.name = 'ValidationError';\r\n\r\n      const status = filter['mapErrorToHttpStatus'](error);\r\n      expect(status).toBe(HttpStatus.BAD_REQUEST);\r\n    });\r\n\r\n    it('should map unauthorized errors to 401', () => {\r\n      const error = new Error('Unauthorized access');\r\n      error.name = 'UnauthorizedError';\r\n\r\n      const status = filter['mapErrorToHttpStatus'](error);\r\n      expect(status).toBe(HttpStatus.UNAUTHORIZED);\r\n    });\r\n  });\r\n\r\n  describe('retry determination', () => {\r\n    it('should mark 5xx errors as retryable', () => {\r\n      const retryInfo = filter['determineRetryability'](null, 500);\r\n      \r\n      expect(retryInfo.isRetryable).toBe(true);\r\n      expect(retryInfo.retryAfter).toBeDefined();\r\n      expect(retryInfo.maxRetries).toBe(3);\r\n    });\r\n\r\n    it('should mark 408 as retryable', () => {\r\n      const retryInfo = filter['determineRetryability'](null, 408);\r\n      \r\n      expect(retryInfo.isRetryable).toBe(true);\r\n      expect(retryInfo.retryAfter).toBe(5);\r\n    });\r\n\r\n    it('should mark 429 as retryable', () => {\r\n      const retryInfo = filter['determineRetryability'](null, 429);\r\n      \r\n      expect(retryInfo.isRetryable).toBe(true);\r\n      expect(retryInfo.retryAfter).toBe(60);\r\n    });\r\n\r\n    it('should mark most 4xx errors as non-retryable', () => {\r\n      const retryInfo = filter['determineRetryability'](null, 400);\r\n      expect(retryInfo.isRetryable).toBe(false);\r\n    });\r\n\r\n    it('should extract retry-after from exception', () => {\r\n      const exception = new HttpException({ retryAfter: 300 }, 429);\r\n      const retryAfter = filter['extractRetryAfterFromException'](exception);\r\n      \r\n      expect(retryAfter).toBe(300);\r\n    });\r\n  });\r\n\r\n  describe('logging', () => {\r\n    it('should log server errors', () => {\r\n      const exception = new Error('Server error');\r\n      (exception as any).status = 500;\r\n\r\n      filter.catch(exception, mockArgumentsHost);\r\n\r\n      expect(mockLogger.error).toHaveBeenCalledWith(\r\n        expect.stringContaining('Server error'),\r\n        exception,\r\n        expect.objectContaining({\r\n          statusCode: 500,\r\n          correlationId: 'test-correlation-id',\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should log client errors as warnings', () => {\r\n      const exception = new HttpException('Bad request', 400);\r\n\r\n      filter.catch(exception, mockArgumentsHost);\r\n\r\n      expect(mockLogger.warn).toHaveBeenCalledWith(\r\n        expect.stringContaining('Client error'),\r\n        expect.objectContaining({\r\n          statusCode: 400,\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should log suspicious activity', () => {\r\n      mockRequest.path = '/admin/secret';\r\n      const exception = new HttpException('Forbidden', 403);\r\n\r\n      filter.catch(exception, mockArgumentsHost);\r\n\r\n      expect(mockLogger.securityEvent).toHaveBeenCalledWith(\r\n        'suspicious_request_pattern',\r\n        'medium',\r\n        expect.objectContaining({\r\n          statusCode: 403,\r\n          reason: 'Multiple client errors or potential attack pattern',\r\n        })\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('client IP extraction', () => {\r\n    it('should extract IP from x-forwarded-for header', () => {\r\n      mockRequest.headers!['x-forwarded-for'] = '203.0.113.1';\r\n      \r\n      const ip = filter['getClientIp'](mockRequest as Request);\r\n      expect(ip).toBe('203.0.113.1');\r\n    });\r\n\r\n    it('should extract IP from x-real-ip header', () => {\r\n      delete mockRequest.headers!['x-forwarded-for'];\r\n      mockRequest.headers!['x-real-ip'] = '203.0.113.2';\r\n      \r\n      const ip = filter['getClientIp'](mockRequest as Request);\r\n      expect(ip).toBe('203.0.113.2');\r\n    });\r\n\r\n    it('should fallback to connection remote address', () => {\r\n      delete mockRequest.headers!['x-forwarded-for'];\r\n      delete mockRequest.headers!['x-real-ip'];\r\n      (mockRequest as any).connection = { remoteAddress: '203.0.113.3' };\r\n      \r\n      const ip = filter['getClientIp'](mockRequest as Request);\r\n      expect(ip).toBe('203.0.113.3');\r\n    });\r\n\r\n    it('should return unknown when no IP available', () => {\r\n      delete mockRequest.headers!['x-forwarded-for'];\r\n      delete mockRequest.headers!['x-real-ip'];\r\n      delete (mockRequest as any).connection;\r\n      \r\n      const ip = filter['getClientIp'](mockRequest as Request);\r\n      expect(ip).toBe('unknown');\r\n    });\r\n  });\r\n\r\n  describe('suspicious activity detection', () => {\r\n    it('should detect suspicious status codes', () => {\r\n      expect(filter['isSuspiciousError'](401, mockRequest as Request)).toBe(true);\r\n      expect(filter['isSuspiciousError'](403, mockRequest as Request)).toBe(true);\r\n      expect(filter['isSuspiciousError'](404, mockRequest as Request)).toBe(true);\r\n    });\r\n\r\n    it('should detect suspicious paths', () => {\r\n      mockRequest.path = '/admin/users';\r\n      expect(filter['isSuspiciousError'](200, mockRequest as Request)).toBe(true);\r\n\r\n      mockRequest.path = '/wp-admin/';\r\n      expect(filter['isSuspiciousError'](200, mockRequest as Request)).toBe(true);\r\n\r\n      mockRequest.path = '/.env';\r\n      expect(filter['isSuspiciousError'](200, mockRequest as Request)).toBe(true);\r\n    });\r\n\r\n    it('should not flag normal requests as suspicious', () => {\r\n      mockRequest.path = '/api/leads';\r\n      expect(filter['isSuspiciousError'](200, mockRequest as Request)).toBe(false);\r\n      expect(filter['isSuspiciousError'](500, mockRequest as Request)).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('development mode', () => {\r\n    it('should include stack trace in development', () => {\r\n      const originalEnv = process.env.NODE_ENV;\r\n      process.env.NODE_ENV = 'development';\r\n\r\n      const error = new Error('Test error');\r\n      error.stack = 'Error: Test error\\n    at test.js:1:1';\r\n\r\n      filter.catch(error, mockArgumentsHost);\r\n\r\n      expect(mockResponse.json).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          stack: error.stack,\r\n        })\r\n      );\r\n\r\n      process.env.NODE_ENV = originalEnv;\r\n    });\r\n\r\n    it('should not include stack trace in production', () => {\r\n      const originalEnv = process.env.NODE_ENV;\r\n      process.env.NODE_ENV = 'production';\r\n\r\n      const error = new Error('Test error');\r\n      error.stack = 'Error: Test error\\n    at test.js:1:1';\r\n\r\n      filter.catch(error, mockArgumentsHost);\r\n\r\n      expect(mockResponse.json).toHaveBeenCalledWith(\r\n        expect.not.objectContaining({\r\n          stack: expect.anything(),\r\n        })\r\n      );\r\n\r\n      process.env.NODE_ENV = originalEnv;\r\n    });\r\n  });\r\n});"],"names":["describe","filter","mockLogger","mockRequest","mockResponse","mockArgumentsHost","beforeEach","error","jest","fn","warn","info","securityEvent","url","method","path","headers","correlationId","requestId","status","mockReturnThis","json","setHeader","switchToHttp","getRequest","getResponse","module","Test","createTestingModule","providers","CustomExceptionFilter","provide","StructuredLoggerService","useValue","compile","get","clearAllMocks","it","expect","toBeDefined","exception","HttpException","HttpStatus","BAD_REQUEST","catch","toHaveBeenCalledWith","objectContaining","statusCode","message","retryable","response","errors","details","BusinessValidationException","RateLimitExceededException","retryAfter","TimeoutException","Error","name","toBe","CONFLICT","REQUEST_TIMEOUT","UNAUTHORIZED","retryInfo","isRetryable","maxRetries","stringContaining","reason","ip","connection","remoteAddress","originalEnv","process","env","NODE_ENV","stack","not","anything"],"mappings":"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"}