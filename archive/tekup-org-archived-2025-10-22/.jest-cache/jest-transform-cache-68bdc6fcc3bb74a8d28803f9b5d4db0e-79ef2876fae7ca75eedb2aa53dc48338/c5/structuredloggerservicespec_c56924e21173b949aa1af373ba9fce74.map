{"version":3,"sources":["C:\\Users\\empir\\Tekup-org\\apps\\flow-api\\src\\common\\logging\\__tests__\\structured-logger.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { StructuredLoggerService, LogLevel } from '../structured-logger.service.js';\r\n\r\n// Mock winston\r\njest.mock('winston', () => ({\r\n  createLogger: jest.fn(() => ({\r\n    level: 'info',\r\n    error: jest.fn(),\r\n    warn: jest.fn(),\r\n    info: jest.fn(),\r\n    http: jest.fn(),\r\n    verbose: jest.fn(),\r\n    debug: jest.fn(),\r\n    silly: jest.fn(),\r\n    add: jest.fn(),\r\n    isLevelEnabled: jest.fn(() => true),\r\n    on: jest.fn(),\r\n    end: jest.fn(),\r\n    transports: [],\r\n  })),\r\n  format: {\r\n    combine: jest.fn(() => ({})),\r\n    timestamp: jest.fn(() => ({})),\r\n    errors: jest.fn(() => ({})),\r\n    json: jest.fn(() => ({})),\r\n    printf: jest.fn(() => ({})),\r\n    colorize: jest.fn(() => ({})),\r\n    simple: jest.fn(() => ({})),\r\n  },\r\n  transports: {\r\n    Console: jest.fn(),\r\n    File: jest.fn(),\r\n  },\r\n}));\r\n\r\ndescribe('StructuredLoggerService', () => {\r\n  let service: StructuredLoggerService;\r\n  let mockLogger: any;\r\n\r\n  beforeEach(async () => {\r\n    const winston = await import('winston');\r\n    mockLogger = {\r\n      level: 'info',\r\n      error: jest.fn(),\r\n      warn: jest.fn(),\r\n      info: jest.fn(),\r\n      http: jest.fn(),\r\n      verbose: jest.fn(),\r\n      debug: jest.fn(),\r\n      silly: jest.fn(),\r\n      add: jest.fn(),\r\n      isLevelEnabled: jest.fn(() => true),\r\n      on: jest.fn(),\r\n      end: jest.fn(),\r\n      transports: [],\r\n    };\r\n\r\n    (winston.createLogger as jest.Mock).mockReturnValue(mockLogger);\r\n\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [StructuredLoggerService],\r\n    }).compile();\r\n\r\n    service = module.get<StructuredLoggerService>(StructuredLoggerService);\r\n  });\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(service).toBeDefined();\r\n  });\r\n\r\n  describe('context management', () => {\r\n    it('should set and get context', () => {\r\n      const context = { tenantId: 'tenant1', userId: 'user1' };\r\n      service.setContext(context);\r\n      \r\n      const retrievedContext = service.getContextualData();\r\n      expect(retrievedContext).toEqual(expect.objectContaining(context));\r\n    });\r\n\r\n    it('should generate correlation ID', () => {\r\n      const correlationId = service.generateCorrelationId();\r\n      expect(correlationId).toBeDefined();\r\n      expect(typeof correlationId).toBe('string');\r\n      expect(correlationId.length).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should set correlation ID in context', () => {\r\n      const correlationId = service.setCorrelationId();\r\n      const context = service.getContextualData();\r\n      \r\n      expect(correlationId).toBeDefined();\r\n      expect(context.correlationId).toBe(correlationId);\r\n    });\r\n\r\n    it('should use provided correlation ID', () => {\r\n      const customId = 'custom-correlation-id';\r\n      const returnedId = service.setCorrelationId(customId);\r\n      const context = service.getContextualData();\r\n      \r\n      expect(returnedId).toBe(customId);\r\n      expect(context.correlationId).toBe(customId);\r\n    });\r\n\r\n    it('should set tenant ID in context', () => {\r\n      const tenantId = 'tenant123';\r\n      service.setTenantId(tenantId);\r\n      \r\n      const context = service.getContextualData();\r\n      expect(context.tenantId).toBe(tenantId);\r\n    });\r\n\r\n    it('should set user ID in context', () => {\r\n      const userId = 'user123';\r\n      service.setUserId(userId);\r\n      \r\n      const context = service.getContextualData();\r\n      expect(context.userId).toBe(userId);\r\n    });\r\n\r\n    it('should run function with context', () => {\r\n      const testContext = { tenantId: 'test-tenant' };\r\n      let capturedContext: any;\r\n\r\n      service.runWithContext(testContext, () => {\r\n        capturedContext = service.getContextualData();\r\n      });\r\n\r\n      expect(capturedContext).toEqual(expect.objectContaining(testContext));\r\n    });\r\n  });\r\n\r\n  describe('logging methods', () => {\r\n    it('should log error with context', () => {\r\n      const message = 'Test error';\r\n      const error = new Error('Test error details');\r\n      const context = { operation: 'test' };\r\n\r\n      service.error(message, error, context);\r\n\r\n      expect(mockLogger.error).toHaveBeenCalledWith(message, {\r\n        context,\r\n        error: {\r\n          name: error.name,\r\n          message: error.message,\r\n          stack: error.stack,\r\n          code: undefined,\r\n        },\r\n      });\r\n    });\r\n\r\n    it('should log error with string error', () => {\r\n      const message = 'Test error';\r\n      const error = 'String error';\r\n      const context = { operation: 'test' };\r\n\r\n      service.error(message, error, context);\r\n\r\n      expect(mockLogger.error).toHaveBeenCalledWith(message, {\r\n        context,\r\n        error: { message: error },\r\n      });\r\n    });\r\n\r\n    it('should log warning', () => {\r\n      const message = 'Test warning';\r\n      const context = { operation: 'test' };\r\n\r\n      service.warn(message, context);\r\n\r\n      expect(mockLogger.warn).toHaveBeenCalledWith(message, { context });\r\n    });\r\n\r\n    it('should log info', () => {\r\n      const message = 'Test info';\r\n      const context = { operation: 'test' };\r\n\r\n      service.info(message, context);\r\n\r\n      expect(mockLogger.info).toHaveBeenCalledWith(message, { context });\r\n    });\r\n\r\n    it('should log debug', () => {\r\n      const message = 'Test debug';\r\n      const context = { operation: 'test' };\r\n\r\n      service.debug(message, context);\r\n\r\n      expect(mockLogger.debug).toHaveBeenCalledWith(message, { context });\r\n    });\r\n\r\n    it('should log verbose', () => {\r\n      const message = 'Test verbose';\r\n      const context = { operation: 'test' };\r\n\r\n      service.verbose(message, context);\r\n\r\n      expect(mockLogger.verbose).toHaveBeenCalledWith(message, { context });\r\n    });\r\n\r\n    it('should log http', () => {\r\n      const message = 'Test http';\r\n      const context = { operation: 'test' };\r\n\r\n      service.http(message, context);\r\n\r\n      expect(mockLogger.http).toHaveBeenCalledWith(message, { context });\r\n    });\r\n\r\n    it('should use log method as alias for info', () => {\r\n      const message = 'Test log';\r\n      const context = { operation: 'test' };\r\n\r\n      service.log(message, context);\r\n\r\n      expect(mockLogger.info).toHaveBeenCalledWith(message, { context });\r\n    });\r\n  });\r\n\r\n  describe('specialized logging methods', () => {\r\n    it('should log performance metrics', () => {\r\n      const operation = 'database_query';\r\n      const duration = 150;\r\n      const context = { query: 'SELECT * FROM leads' };\r\n\r\n      service.performance(operation, duration, context);\r\n\r\n      expect(mockLogger.info).toHaveBeenCalledWith(`Performance: ${operation}`, {\r\n        context,\r\n        performance: {\r\n          operation,\r\n          duration,\r\n        },\r\n      });\r\n    });\r\n\r\n    it('should log query performance', () => {\r\n      const query = 'SELECT * FROM leads WHERE tenant_id = ?';\r\n      const duration = 75;\r\n      const rowCount = 10;\r\n      const context = { tenantId: 'tenant1' };\r\n\r\n      service.queryPerformance(query, duration, rowCount, context);\r\n\r\n      expect(mockLogger.info).toHaveBeenCalledWith('Database query executed', {\r\n        context: {\r\n          ...context,\r\n          query: expect.any(String),\r\n          rowCount,\r\n        },\r\n        performance: {\r\n          operation: 'database_query',\r\n          duration,\r\n        },\r\n      });\r\n    });\r\n\r\n    it('should log cache operations', () => {\r\n      const operation = 'get';\r\n      const key = 'leads:tenant1:page1';\r\n      const hit = true;\r\n      const duration = 5;\r\n      const context = { tenantId: 'tenant1' };\r\n\r\n      service.cacheOperation(operation, key, hit, duration, context);\r\n\r\n      expect(mockLogger.info).toHaveBeenCalledWith(`Cache ${operation}`, {\r\n        context: {\r\n          ...context,\r\n          cacheKey: key,\r\n          cacheHit: hit,\r\n        },\r\n        performance: {\r\n          operation: `cache_${operation}`,\r\n          duration,\r\n        },\r\n      });\r\n    });\r\n\r\n    it('should log API requests', () => {\r\n      const method = 'GET';\r\n      const url = '/api/leads';\r\n      const statusCode = 200;\r\n      const duration = 120;\r\n      const context = { tenantId: 'tenant1' };\r\n\r\n      service.apiRequest(method, url, statusCode, duration, context);\r\n\r\n      expect(mockLogger.http).toHaveBeenCalledWith(`${method} ${url} ${statusCode}`, {\r\n        context: {\r\n          ...context,\r\n          method,\r\n          url,\r\n          statusCode,\r\n        },\r\n        performance: {\r\n          operation: 'api_request',\r\n          duration,\r\n        },\r\n      });\r\n    });\r\n\r\n    it('should log business events', () => {\r\n      const event = 'lead_created';\r\n      const data = { leadId: 'lead123', source: 'website' };\r\n      const context = { tenantId: 'tenant1' };\r\n\r\n      service.businessEvent(event, data, context);\r\n\r\n      expect(mockLogger.info).toHaveBeenCalledWith(`Business event: ${event}`, {\r\n        context: {\r\n          ...context,\r\n          event,\r\n          eventData: data,\r\n        },\r\n      });\r\n    });\r\n\r\n    it('should log security events', () => {\r\n      const event = 'failed_login_attempt';\r\n      const severity = 'medium';\r\n      const context = { ip: '192.168.1.1', userAgent: 'test-agent' };\r\n\r\n      service.securityEvent(event, severity, context);\r\n\r\n      expect(mockLogger.warn).toHaveBeenCalledWith(`Security event: ${event}`, {\r\n        context: {\r\n          ...context,\r\n          securityEvent: event,\r\n          severity,\r\n        },\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('utility methods', () => {\r\n    it('should sanitize SQL queries', () => {\r\n      const query = \"SELECT * FROM users WHERE password = 'secret123' AND token = 'abc123'\";\r\n      const sanitized = service['sanitizeQuery'](query);\r\n\r\n      expect(sanitized).toContain(\"password='***'\");\r\n      expect(sanitized).toContain(\"token='***'\");\r\n      expect(sanitized).not.toContain('secret123');\r\n      expect(sanitized).not.toContain('abc123');\r\n    });\r\n\r\n    it('should sanitize URLs', () => {\r\n      const url = '/api/users?password=secret&token=abc123&name=john';\r\n      const sanitized = service['sanitizeUrl'](url);\r\n\r\n      expect(sanitized).toContain('password=***');\r\n      expect(sanitized).toContain('token=***');\r\n      expect(sanitized).toContain('name=john');\r\n      expect(sanitized).not.toContain('secret');\r\n      expect(sanitized).not.toContain('abc123');\r\n    });\r\n\r\n    it('should handle URL sanitization errors gracefully', () => {\r\n      const invalidUrl = 'not-a-valid-url?password=secret';\r\n      const sanitized = service['sanitizeUrl'](invalidUrl);\r\n\r\n      expect(sanitized).toContain('password=***');\r\n      expect(sanitized).not.toContain('secret');\r\n    });\r\n\r\n    it('should get log level', () => {\r\n      const level = service.getLogLevel();\r\n      expect(level).toBe('info');\r\n    });\r\n\r\n    it('should set log level', () => {\r\n      service.setLogLevel(LogLevel.DEBUG);\r\n      expect(mockLogger.level).toBe(LogLevel.DEBUG);\r\n    });\r\n\r\n    it('should check if level is enabled', () => {\r\n      const isEnabled = service.isLevelEnabled(LogLevel.INFO);\r\n      expect(isEnabled).toBe(true);\r\n      expect(mockLogger.isLevelEnabled).toHaveBeenCalledWith(LogLevel.INFO);\r\n    });\r\n\r\n    it('should get logger statistics', () => {\r\n      const stats = service.getStats();\r\n      \r\n      expect(stats).toEqual({\r\n        level: 'info',\r\n        transports: 0,\r\n        service: expect.any(String),\r\n        environment: expect.any(String),\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('child logger', () => {\r\n    it('should create child logger with additional context', () => {\r\n      const parentContext = { tenantId: 'tenant1' };\r\n      const childContext = { userId: 'user1' };\r\n\r\n      service.setContext(parentContext);\r\n      const childLogger = service.child(childContext);\r\n\r\n      expect(childLogger).toBeInstanceOf(StructuredLoggerService);\r\n      \r\n      // Child should have both parent and child context\r\n      const combinedContext = childLogger.getContextualData();\r\n      expect(combinedContext).toEqual(expect.objectContaining({\r\n        ...parentContext,\r\n        ...childContext,\r\n      }));\r\n    });\r\n  });\r\n\r\n  describe('error formatting', () => {\r\n    it('should format Error objects', () => {\r\n      const error = new Error('Test error');\r\n      error.name = 'TestError';\r\n      (error as any).code = 'TEST_CODE';\r\n\r\n      const formatted = service['formatError'](error);\r\n\r\n      expect(formatted).toEqual({\r\n        name: 'TestError',\r\n        message: 'Test error',\r\n        stack: error.stack,\r\n        code: 'TEST_CODE',\r\n      });\r\n    });\r\n\r\n    it('should format string errors', () => {\r\n      const error = 'String error message';\r\n      const formatted = service['formatError'](error);\r\n\r\n      expect(formatted).toEqual({\r\n        message: error,\r\n      });\r\n    });\r\n\r\n    it('should handle undefined errors', () => {\r\n      const formatted = service['formatError'](undefined);\r\n      expect(formatted).toBeUndefined();\r\n    });\r\n  });\r\n});"],"names":["jest","mock","createLogger","fn","level","error","warn","info","http","verbose","debug","silly","add","isLevelEnabled","on","end","transports","format","combine","timestamp","errors","json","printf","colorize","simple","Console","File","describe","service","mockLogger","beforeEach","winston","mockReturnValue","module","Test","createTestingModule","providers","StructuredLoggerService","compile","get","clearAllMocks","it","expect","toBeDefined","context","tenantId","userId","setContext","retrievedContext","getContextualData","toEqual","objectContaining","correlationId","generateCorrelationId","toBe","length","toBeGreaterThan","setCorrelationId","customId","returnedId","setTenantId","setUserId","testContext","capturedContext","runWithContext","message","Error","operation","toHaveBeenCalledWith","name","stack","code","undefined","log","duration","query","performance","rowCount","queryPerformance","any","String","key","hit","cacheOperation","cacheKey","cacheHit","method","url","statusCode","apiRequest","event","data","leadId","source","businessEvent","eventData","severity","ip","userAgent","securityEvent","sanitized","toContain","not","invalidUrl","getLogLevel","setLogLevel","LogLevel","DEBUG","isEnabled","INFO","stats","getStats","environment","parentContext","childContext","childLogger","child","toBeInstanceOf","combinedContext","formatted","toBeUndefined"],"mappings":"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"}