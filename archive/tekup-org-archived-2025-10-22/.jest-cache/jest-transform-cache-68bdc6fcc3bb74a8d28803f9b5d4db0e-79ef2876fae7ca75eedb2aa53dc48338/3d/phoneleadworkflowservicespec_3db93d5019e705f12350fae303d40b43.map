{"version":3,"sources":["C:\\Users\\empir\\Tekup-org\\apps\\flow-api\\src\\phone-leads\\phone-lead-workflow.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { PhoneLeadWorkflowService } from './phone-lead-workflow.service.js';\r\nimport { PrismaService } from '../prisma/prisma.service.js';\r\nimport { SMSService } from '../sms/sms.service.js';\r\nimport { LeadService } from '../lead/lead.service.js';\r\nimport { MetricsService } from '../metrics/metrics.service.js';\r\nimport { StructuredLoggerService } from '../common/logging/structured-logger.service.js';\r\n\r\ndescribe('PhoneLeadWorkflowService', () => {\r\n  let service: PhoneLeadWorkflowService;\r\n  let prismaService: PrismaService;\r\n  let smsService: SMSService;\r\n\r\n  const mockPrismaService = {\r\n    lead: {\r\n      findFirst: jest.fn(),\r\n      update: jest.fn(),\r\n      findMany: jest.fn(),\r\n      count: jest.fn()\r\n    },\r\n    leadEvent: {\r\n      create: jest.fn()\r\n    },\r\n    smsTracking: {\r\n      findFirst: jest.fn(),\r\n      findMany: jest.fn(),\r\n      count: jest.fn()\r\n    }\r\n  };\r\n\r\n  const mockSMSService = {\r\n    sendPhoneLeadSMS: jest.fn(),\r\n    getSMSAnalytics: jest.fn()\r\n  };\r\n\r\n  const mockMetricsService = {\r\n    increment: jest.fn()\r\n  };\r\n\r\n  const mockStructuredLoggerService = {\r\n    logBusinessEvent: jest.fn()\r\n  };\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        PhoneLeadWorkflowService,\r\n        { provide: PrismaService, useValue: mockPrismaService },\r\n        { provide: SMSService, useValue: mockSMSService },\r\n        { provide: LeadService, useValue: {} },\r\n        { provide: MetricsService, useValue: mockMetricsService },\r\n        { provide: StructuredLoggerService, useValue: mockStructuredLoggerService }\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<PhoneLeadWorkflowService>(PhoneLeadWorkflowService);\r\n    prismaService = module.get<PrismaService>(PrismaService);\r\n    smsService = module.get<SMSService>(SMSService);\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(service).toBeDefined();\r\n  });\r\n\r\n  describe('processPhoneLead', () => {\r\n    it('should process phone lead and send SMS', async () => {\r\n      const leadId = 'lead-123';\r\n      const tenantId = 'tenant-123';\r\n      const mockLead = {\r\n        id: leadId,\r\n        tenantId,\r\n        source: 'leadpoint',\r\n        payload: {\r\n          lead_type: 'phone_call',\r\n          phone: '+4512345678'\r\n        }\r\n      };\r\n\r\n      mockPrismaService.lead.findFirst.mockResolvedValue(mockLead);\r\n      mockPrismaService.smsTracking.findFirst.mockResolvedValue(null);\r\n      mockSMSService.sendPhoneLeadSMS.mockResolvedValue({\r\n        leadId,\r\n        tenantId,\r\n        phoneNumber: '+4512345678',\r\n        messageId: 'msg-123',\r\n        trackingUrl: 'https://api.tekup.dk/sms/track/tracking-123',\r\n        sentAt: new Date()\r\n      });\r\n      mockPrismaService.lead.update.mockResolvedValue({ ...mockLead, status: 'CONTACTED' });\r\n      mockPrismaService.leadEvent.create.mockResolvedValue({});\r\n\r\n      await service.processPhoneLead(leadId, tenantId);\r\n\r\n      expect(mockPrismaService.lead.findFirst).toHaveBeenCalledWith({\r\n        where: { id: leadId, tenantId }\r\n      });\r\n      expect(mockSMSService.sendPhoneLeadSMS).toHaveBeenCalledWith(leadId, tenantId, '+4512345678');\r\n      expect(mockPrismaService.lead.update).toHaveBeenCalledWith({\r\n        where: { id: leadId },\r\n        data: {\r\n          status: 'CONTACTED',\r\n          payload: {\r\n            ...mockLead.payload,\r\n            sms_sent: true,\r\n            sms_sent_at: expect.any(String)\r\n          }\r\n        }\r\n      });\r\n      expect(mockPrismaService.leadEvent.create).toHaveBeenCalledWith({\r\n        data: {\r\n          leadId,\r\n          fromStatus: 'NEW',\r\n          toStatus: 'CONTACTED',\r\n          notes: 'SMS sent automatically for phone call lead',\r\n          metadata: {\r\n            action: 'sms_sent',\r\n            phone: '+4512345678',\r\n            lead_type: 'phone_call'\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    it('should skip processing if lead is not found', async () => {\r\n      const leadId = 'lead-123';\r\n      const tenantId = 'tenant-123';\r\n\r\n      mockPrismaService.lead.findFirst.mockResolvedValue(null);\r\n\r\n      await service.processPhoneLead(leadId, tenantId);\r\n\r\n      expect(mockSMSService.sendPhoneLeadSMS).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should skip processing if lead is not a phone call lead', async () => {\r\n      const leadId = 'lead-123';\r\n      const tenantId = 'tenant-123';\r\n      const mockLead = {\r\n        id: leadId,\r\n        tenantId,\r\n        source: 'leadpoint',\r\n        payload: {\r\n          lead_type: 'standard',\r\n          phone: '+4512345678'\r\n        }\r\n      };\r\n\r\n      mockPrismaService.lead.findFirst.mockResolvedValue(mockLead);\r\n\r\n      await service.processPhoneLead(leadId, tenantId);\r\n\r\n      expect(mockSMSService.sendPhoneLeadSMS).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should skip processing if SMS already sent', async () => {\r\n      const leadId = 'lead-123';\r\n      const tenantId = 'tenant-123';\r\n      const mockLead = {\r\n        id: leadId,\r\n        tenantId,\r\n        source: 'leadpoint',\r\n        payload: {\r\n          lead_type: 'phone_call',\r\n          phone: '+4512345678'\r\n        }\r\n      };\r\n\r\n      mockPrismaService.lead.findFirst.mockResolvedValue(mockLead);\r\n      mockPrismaService.smsTracking.findFirst.mockResolvedValue({\r\n        id: 'sms-123',\r\n        leadId,\r\n        sentAt: new Date()\r\n      });\r\n\r\n      await service.processPhoneLead(leadId, tenantId);\r\n\r\n      expect(mockSMSService.sendPhoneLeadSMS).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('processPendingPhoneLeads', () => {\r\n    it('should process all pending phone leads', async () => {\r\n      const tenantId = 'tenant-123';\r\n      const mockLeads = [\r\n        {\r\n          id: 'lead-1',\r\n          tenantId,\r\n          source: 'leadpoint',\r\n          status: 'NEW',\r\n          payload: { lead_type: 'phone_call', phone: '+4512345678' }\r\n        },\r\n        {\r\n          id: 'lead-2',\r\n          tenantId,\r\n          source: 'leadpoint',\r\n          status: 'NEW',\r\n          payload: { lead_type: 'phone_call', phone: '+4598765432' }\r\n        }\r\n      ];\r\n\r\n      mockPrismaService.lead.findMany.mockResolvedValue(mockLeads);\r\n      mockPrismaService.lead.findFirst.mockResolvedValue(mockLeads[0]);\r\n      mockPrismaService.smsTracking.findFirst.mockResolvedValue(null);\r\n      mockSMSService.sendPhoneLeadSMS.mockResolvedValue({});\r\n      mockPrismaService.lead.update.mockResolvedValue({});\r\n      mockPrismaService.leadEvent.create.mockResolvedValue({});\r\n\r\n      const result = await service.processPendingPhoneLeads(tenantId);\r\n\r\n      expect(result.processed).toBe(2);\r\n      expect(result.errors).toBe(0);\r\n      expect(mockSMSService.sendPhoneLeadSMS).toHaveBeenCalledTimes(2);\r\n    });\r\n  });\r\n\r\n  describe('getPhoneLeadStats', () => {\r\n    it('should return phone lead statistics', async () => {\r\n      const tenantId = 'tenant-123';\r\n      const mockSMSAnalytics = {\r\n        totalSent: 10,\r\n        totalClicked: 5,\r\n        totalConverted: 2,\r\n        clickRate: 50,\r\n        conversionRate: 20,\r\n        clickToConversionRate: 40\r\n      };\r\n\r\n      mockPrismaService.lead.count\r\n        .mockResolvedValueOnce(10) // total\r\n        .mockResolvedValueOnce(5)  // contacted\r\n        .mockResolvedValueOnce(2); // converted\r\n      mockSMSService.getSMSAnalytics.mockResolvedValue(mockSMSAnalytics);\r\n\r\n      const result = await service.getPhoneLeadStats(tenantId);\r\n\r\n      expect(result).toEqual({\r\n        totalPhoneLeads: 10,\r\n        contactedPhoneLeads: 5,\r\n        convertedPhoneLeads: 2,\r\n        contactRate: 50,\r\n        conversionRate: 20,\r\n        smsAnalytics: mockSMSAnalytics\r\n      });\r\n    });\r\n  });\r\n});"],"names":["describe","service","prismaService","smsService","mockPrismaService","lead","findFirst","jest","fn","update","findMany","count","leadEvent","create","smsTracking","mockSMSService","sendPhoneLeadSMS","getSMSAnalytics","mockMetricsService","increment","mockStructuredLoggerService","logBusinessEvent","beforeEach","module","Test","createTestingModule","providers","PhoneLeadWorkflowService","provide","PrismaService","useValue","SMSService","LeadService","MetricsService","StructuredLoggerService","compile","get","afterEach","clearAllMocks","it","expect","toBeDefined","leadId","tenantId","mockLead","id","source","payload","lead_type","phone","mockResolvedValue","phoneNumber","messageId","trackingUrl","sentAt","Date","status","processPhoneLead","toHaveBeenCalledWith","where","data","sms_sent","sms_sent_at","any","String","fromStatus","toStatus","notes","metadata","action","not","toHaveBeenCalled","mockLeads","result","processPendingPhoneLeads","processed","toBe","errors","toHaveBeenCalledTimes","mockSMSAnalytics","totalSent","totalClicked","totalConverted","clickRate","conversionRate","clickToConversionRate","mockResolvedValueOnce","getPhoneLeadStats","toEqual","totalPhoneLeads","contactedPhoneLeads","convertedPhoneLeads","contactRate","smsAnalytics"],"mappings":"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"}