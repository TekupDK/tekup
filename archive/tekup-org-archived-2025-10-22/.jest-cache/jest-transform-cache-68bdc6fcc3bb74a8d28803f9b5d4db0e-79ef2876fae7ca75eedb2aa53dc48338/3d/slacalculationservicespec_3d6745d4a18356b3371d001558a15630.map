{"version":3,"sources":["C:\\Users\\empir\\Tekup-org\\apps\\flow-api\\src\\lead\\services\\sla-calculation.service.spec.ts"],"sourcesContent":["import { SlaCalculationService } from './sla-calculation.service.js';\r\nimport { SeverityLevelDto } from '../dto/compliance.dto.js';\r\n\r\ndescribe('SlaCalculationService', () => {\r\n  let service: SlaCalculationService;\r\n\r\n  beforeEach(() => {\r\n    service = new SlaCalculationService();\r\n  });\r\n\r\n  describe('calculateSlaDeadline', () => {\r\n    it('should calculate SLA deadline for critical severity (4 hours)', () => {\r\n      const baseTime = new Date('2023-01-01T10:00:00Z');\r\n      const deadline = service.calculateSlaDeadline(SeverityLevelDto.CRITICAL, baseTime);\r\n      \r\n      expect(deadline.getTime()).toBe(new Date('2023-01-01T14:00:00Z').getTime());\r\n    });\r\n\r\n    it('should calculate SLA deadline for high severity (24 hours)', () => {\r\n      const baseTime = new Date('2023-01-01T10:00:00Z');\r\n      const deadline = service.calculateSlaDeadline(SeverityLevelDto.HIGH, baseTime);\r\n      \r\n      expect(deadline.getTime()).toBe(new Date('2023-01-02T10:00:00Z').getTime());\r\n    });\r\n\r\n    it('should calculate SLA deadline for medium severity (72 hours)', () => {\r\n      const baseTime = new Date('2023-01-01T10:00:00Z');\r\n      const deadline = service.calculateSlaDeadline(SeverityLevelDto.MEDIUM, baseTime);\r\n      \r\n      expect(deadline.getTime()).toBe(new Date('2023-01-04T10:00:00Z').getTime());\r\n    });\r\n\r\n    it('should calculate SLA deadline for low severity (1 week)', () => {\r\n      const baseTime = new Date('2023-01-01T10:00:00Z');\r\n      const deadline = service.calculateSlaDeadline(SeverityLevelDto.LOW, baseTime);\r\n      \r\n      expect(deadline.getTime()).toBe(new Date('2023-01-08T10:00:00Z').getTime());\r\n    });\r\n\r\n    it('should default to medium severity for unknown severity levels', () => {\r\n      const baseTime = new Date('2023-01-01T10:00:00Z');\r\n      const deadline = service.calculateSlaDeadline('unknown' as any, baseTime);\r\n      \r\n      expect(deadline.getTime()).toBe(new Date('2023-01-04T10:00:00Z').getTime());\r\n    });\r\n  });\r\n\r\n  describe('estimateEffort', () => {\r\n    it('should estimate effort for critical severity with quick fix', () => {\r\n      const effort = service.estimateEffort(SeverityLevelDto.CRITICAL, true);\r\n      expect(effort).toBe('15-30 minutes');\r\n    });\r\n\r\n    it('should estimate effort for high severity with quick fix', () => {\r\n      const effort = service.estimateEffort(SeverityLevelDto.HIGH, true);\r\n      expect(effort).toBe('15-30 minutes');\r\n    });\r\n\r\n    it('should estimate effort for medium severity with quick fix', () => {\r\n      const effort = service.estimateEffort(SeverityLevelDto.MEDIUM, true);\r\n      expect(effort).toBe('5-15 minutes');\r\n    });\r\n\r\n    it('should estimate effort for low severity with quick fix', () => {\r\n      const effort = service.estimateEffort(SeverityLevelDto.LOW, true);\r\n      expect(effort).toBe('5-15 minutes');\r\n    });\r\n\r\n    it('should estimate effort for critical severity without quick fix', () => {\r\n      const effort = service.estimateEffort(SeverityLevelDto.CRITICAL, false);\r\n      expect(effort).toBe('2-4 hours');\r\n    });\r\n\r\n    it('should estimate effort for high severity without quick fix', () => {\r\n      const effort = service.estimateEffort(SeverityLevelDto.HIGH, false);\r\n      expect(effort).toBe('1-2 hours');\r\n    });\r\n\r\n    it('should estimate effort for medium severity without quick fix', () => {\r\n      const effort = service.estimateEffort(SeverityLevelDto.MEDIUM, false);\r\n      expect(effort).toBe('30 minutes - 1 hour');\r\n    });\r\n\r\n    it('should estimate effort for low severity without quick fix', () => {\r\n      const effort = service.estimateEffort(SeverityLevelDto.LOW, false);\r\n      expect(effort).toBe('15-30 minutes');\r\n    });\r\n  });\r\n\r\n  describe('isAutoActionable', () => {\r\n    it('should return true for low severity with quick fix', () => {\r\n      expect(service.isAutoActionable(SeverityLevelDto.LOW, true)).toBe(true);\r\n    });\r\n\r\n    it('should return true for medium severity with quick fix', () => {\r\n      expect(service.isAutoActionable(SeverityLevelDto.MEDIUM, true)).toBe(true);\r\n    });\r\n\r\n    it('should return false for high severity with quick fix', () => {\r\n      expect(service.isAutoActionable(SeverityLevelDto.HIGH, true)).toBe(false);\r\n    });\r\n\r\n    it('should return false for critical severity with quick fix', () => {\r\n      expect(service.isAutoActionable(SeverityLevelDto.CRITICAL, true)).toBe(false);\r\n    });\r\n\r\n    it('should return false for low severity without quick fix', () => {\r\n      expect(service.isAutoActionable(SeverityLevelDto.LOW, false)).toBe(false);\r\n    });\r\n\r\n    it('should return false for medium severity without quick fix', () => {\r\n      expect(service.isAutoActionable(SeverityLevelDto.MEDIUM, false)).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('isSlaApproaching', () => {\r\n    it('should return true when 75% of SLA time has elapsed', () => {\r\n      const createdAt = new Date('2023-01-01T10:00:00Z');\r\n      const slaDeadline = new Date('2023-01-01T14:00:00Z'); // 4 hours\r\n      const currentTime = new Date('2023-01-01T13:00:00Z'); // 3 hours later (75%)\r\n      \r\n      expect(service.isSlaApproaching(slaDeadline, createdAt, currentTime)).toBe(true);\r\n    });\r\n\r\n    it('should return true when less than 25% of time remains', () => {\r\n      const createdAt = new Date('2023-01-01T10:00:00Z');\r\n      const slaDeadline = new Date('2023-01-01T14:00:00Z'); // 4 hours\r\n      const currentTime = new Date('2023-01-01T13:30:00Z'); // 3.5 hours later (12.5% remains)\r\n      \r\n      expect(service.isSlaApproaching(slaDeadline, createdAt, currentTime)).toBe(true);\r\n    });\r\n\r\n    it('should return false when more than 25% of time remains and less than 75% has elapsed', () => {\r\n      const createdAt = new Date('2023-01-01T10:00:00Z');\r\n      const slaDeadline = new Date('2023-01-01T14:00:00Z'); // 4 hours\r\n      const currentTime = new Date('2023-01-01T12:00:00Z'); // 2 hours later (50% elapsed, 50% remains)\r\n      \r\n      expect(service.isSlaApproaching(slaDeadline, createdAt, currentTime)).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('isSlaBreached', () => {\r\n    it('should return true when current time is after SLA deadline', () => {\r\n      const slaDeadline = new Date('2023-01-01T10:00:00Z');\r\n      const currentTime = new Date('2023-01-01T11:00:00Z');\r\n      \r\n      expect(service.isSlaBreached(slaDeadline, currentTime)).toBe(true);\r\n    });\r\n\r\n    it('should return false when current time is before SLA deadline', () => {\r\n      const slaDeadline = new Date('2023-01-01T10:00:00Z');\r\n      const currentTime = new Date('2023-01-01T09:00:00Z');\r\n      \r\n      expect(service.isSlaBreached(slaDeadline, currentTime)).toBe(false);\r\n    });\r\n\r\n    it('should return false when current time equals SLA deadline', () => {\r\n      const slaDeadline = new Date('2023-01-01T10:00:00Z');\r\n      const currentTime = new Date('2023-01-01T10:00:00Z');\r\n      \r\n      expect(service.isSlaBreached(slaDeadline, currentTime)).toBe(false);\r\n    });\r\n  });\r\n});"],"names":["describe","service","beforeEach","SlaCalculationService","it","baseTime","Date","deadline","calculateSlaDeadline","SeverityLevelDto","CRITICAL","expect","getTime","toBe","HIGH","MEDIUM","LOW","effort","estimateEffort","isAutoActionable","createdAt","slaDeadline","currentTime","isSlaApproaching","isSlaBreached"],"mappings":"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"}