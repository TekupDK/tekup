{"version":3,"sources":["C:\\Users\\empir\\Tekup-org\\apps\\flow-api\\src\\cache\\__tests__\\cache.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { CacheService } from '../cache.service.js';\r\nimport Redis from 'ioredis';\r\n\r\n// Mock ioredis\r\njest.mock('ioredis');\r\n\r\nconst mockRedis = {\r\n  connect: jest.fn(),\r\n  disconnect: jest.fn(),\r\n  get: jest.fn(),\r\n  set: jest.fn(),\r\n  setex: jest.fn(),\r\n  del: jest.fn(),\r\n  keys: jest.fn(),\r\n  exists: jest.fn(),\r\n  ttl: jest.fn(),\r\n  expire: jest.fn(),\r\n  ping: jest.fn(),\r\n  info: jest.fn(),\r\n  config: jest.fn(),\r\n  smembers: jest.fn(),\r\n  sadd: jest.fn(),\r\n  pipeline: jest.fn(),\r\n  flushdb: jest.fn(),\r\n  on: jest.fn(),\r\n};\r\n\r\nconst mockPipeline = {\r\n  sadd: jest.fn().mockReturnThis(),\r\n  expire: jest.fn().mockReturnThis(),\r\n  exec: jest.fn().mockResolvedValue([]),\r\n};\r\n\r\ndescribe('CacheService', () => {\r\n  let service: CacheService;\r\n  let redis: jest.Mocked<Redis>;\r\n\r\n  beforeEach(async () => {\r\n    jest.clearAllMocks();\r\n    \r\n    (Redis as jest.MockedClass<typeof Redis>).mockImplementation(() => mockRedis as any);\r\n    mockRedis.pipeline.mockReturnValue(mockPipeline as any);\r\n\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [CacheService],\r\n    }).compile();\r\n\r\n    service = module.get<CacheService>(CacheService);\r\n    redis = mockRedis as any;\r\n\r\n    // Initialize the service\r\n    await service.onModuleInit();\r\n  });\r\n\r\n  afterEach(async () => {\r\n    await service.onModuleDestroy();\r\n  });\r\n\r\n  describe('initialization', () => {\r\n    it('should connect to Redis on module init', async () => {\r\n      expect(redis.connect).toHaveBeenCalled();\r\n      expect(redis.config).toHaveBeenCalledWith('SET', 'maxmemory-policy', 'allkeys-lru');\r\n      expect(redis.config).toHaveBeenCalledWith('SET', 'maxmemory', '256mb');\r\n    });\r\n\r\n    it('should disconnect from Redis on module destroy', async () => {\r\n      await service.onModuleDestroy();\r\n      expect(redis.disconnect).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should handle Redis connection errors gracefully', async () => {\r\n      const errorService = new CacheService();\r\n      redis.connect.mockRejectedValueOnce(new Error('Connection failed'));\r\n\r\n      await expect(errorService.onModuleInit()).rejects.toThrow('Connection failed');\r\n    });\r\n  });\r\n\r\n  describe('get', () => {\r\n    it('should return parsed value when key exists', async () => {\r\n      const testData = { id: 1, name: 'test' };\r\n      redis.get.mockResolvedValue(JSON.stringify(testData));\r\n\r\n      const result = await service.get('test-key');\r\n\r\n      expect(redis.get).toHaveBeenCalledWith('test-key');\r\n      expect(result).toEqual(testData);\r\n    });\r\n\r\n    it('should return null when key does not exist', async () => {\r\n      redis.get.mockResolvedValue(null);\r\n\r\n      const result = await service.get('non-existent-key');\r\n\r\n      expect(result).toBeNull();\r\n    });\r\n\r\n    it('should handle Redis errors gracefully', async () => {\r\n      redis.get.mockRejectedValue(new Error('Redis error'));\r\n\r\n      const result = await service.get('error-key');\r\n\r\n      expect(result).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('set', () => {\r\n    it('should set value with default TTL', async () => {\r\n      const testData = { id: 1, name: 'test' };\r\n\r\n      await service.set('test-key', testData);\r\n\r\n      expect(redis.setex).toHaveBeenCalledWith('test-key', 300, JSON.stringify(testData));\r\n    });\r\n\r\n    it('should set value with custom TTL', async () => {\r\n      const testData = { id: 1, name: 'test' };\r\n\r\n      await service.set('test-key', testData, { ttl: 600 });\r\n\r\n      expect(redis.setex).toHaveBeenCalledWith('test-key', 600, JSON.stringify(testData));\r\n    });\r\n\r\n    it('should set value without TTL when ttl is 0', async () => {\r\n      const testData = { id: 1, name: 'test' };\r\n\r\n      await service.set('test-key', testData, { ttl: 0 });\r\n\r\n      expect(redis.set).toHaveBeenCalledWith('test-key', JSON.stringify(testData));\r\n    });\r\n\r\n    it('should handle tags for tag-based invalidation', async () => {\r\n      const testData = { id: 1, name: 'test' };\r\n      mockPipeline.exec.mockResolvedValue([]);\r\n\r\n      await service.set('test-key', testData, { tags: ['tag1', 'tag2'] });\r\n\r\n      expect(mockPipeline.sadd).toHaveBeenCalledWith('tag:tag1', 'test-key');\r\n      expect(mockPipeline.sadd).toHaveBeenCalledWith('tag:tag2', 'test-key');\r\n      expect(mockPipeline.expire).toHaveBeenCalledWith('tag:tag1', 600);\r\n      expect(mockPipeline.expire).toHaveBeenCalledWith('tag:tag2', 600);\r\n      expect(mockPipeline.exec).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should throw error when Redis set fails', async () => {\r\n      redis.setex.mockRejectedValue(new Error('Redis error'));\r\n\r\n      await expect(service.set('test-key', 'value')).rejects.toThrow('Redis error');\r\n    });\r\n  });\r\n\r\n  describe('delete', () => {\r\n    it('should delete key and return true when key exists', async () => {\r\n      redis.del.mockResolvedValue(1);\r\n\r\n      const result = await service.delete('test-key');\r\n\r\n      expect(redis.del).toHaveBeenCalledWith('test-key');\r\n      expect(result).toBe(true);\r\n    });\r\n\r\n    it('should return false when key does not exist', async () => {\r\n      redis.del.mockResolvedValue(0);\r\n\r\n      const result = await service.delete('non-existent-key');\r\n\r\n      expect(result).toBe(false);\r\n    });\r\n\r\n    it('should handle Redis errors gracefully', async () => {\r\n      redis.del.mockRejectedValue(new Error('Redis error'));\r\n\r\n      const result = await service.delete('error-key');\r\n\r\n      expect(result).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('invalidate', () => {\r\n    it('should invalidate keys matching pattern', async () => {\r\n      redis.keys.mockResolvedValue(['key1', 'key2', 'key3']);\r\n      redis.del.mockResolvedValue(3);\r\n\r\n      const result = await service.invalidate('test:*');\r\n\r\n      expect(redis.keys).toHaveBeenCalledWith('test:*');\r\n      expect(redis.del).toHaveBeenCalledWith('key1', 'key2', 'key3');\r\n      expect(result).toBe(3);\r\n    });\r\n\r\n    it('should return 0 when no keys match pattern', async () => {\r\n      redis.keys.mockResolvedValue([]);\r\n\r\n      const result = await service.invalidate('test:*');\r\n\r\n      expect(result).toBe(0);\r\n      expect(redis.del).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should handle Redis errors gracefully', async () => {\r\n      redis.keys.mockRejectedValue(new Error('Redis error'));\r\n\r\n      const result = await service.invalidate('test:*');\r\n\r\n      expect(result).toBe(0);\r\n    });\r\n  });\r\n\r\n  describe('invalidateByTags', () => {\r\n    it('should invalidate keys by tags', async () => {\r\n      redis.smembers\r\n        .mockResolvedValueOnce(['key1', 'key2'])\r\n        .mockResolvedValueOnce(['key2', 'key3']);\r\n      redis.del\r\n        .mockResolvedValueOnce(2) // For keys\r\n        .mockResolvedValueOnce(1) // For tag set\r\n        .mockResolvedValueOnce(2) // For keys\r\n        .mockResolvedValueOnce(1); // For tag set\r\n\r\n      const result = await service.invalidateByTags(['tag1', 'tag2']);\r\n\r\n      expect(redis.smembers).toHaveBeenCalledWith('tag:tag1');\r\n      expect(redis.smembers).toHaveBeenCalledWith('tag:tag2');\r\n      expect(redis.del).toHaveBeenCalledWith('key1', 'key2');\r\n      expect(redis.del).toHaveBeenCalledWith('key2', 'key3');\r\n      expect(result).toBe(4);\r\n    });\r\n\r\n    it('should handle empty tag sets', async () => {\r\n      redis.smembers.mockResolvedValue([]);\r\n\r\n      const result = await service.invalidateByTags(['empty-tag']);\r\n\r\n      expect(result).toBe(0);\r\n    });\r\n  });\r\n\r\n  describe('exists', () => {\r\n    it('should return true when key exists', async () => {\r\n      redis.exists.mockResolvedValue(1);\r\n\r\n      const result = await service.exists('test-key');\r\n\r\n      expect(result).toBe(true);\r\n    });\r\n\r\n    it('should return false when key does not exist', async () => {\r\n      redis.exists.mockResolvedValue(0);\r\n\r\n      const result = await service.exists('test-key');\r\n\r\n      expect(result).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('getTTL', () => {\r\n    it('should return TTL for key', async () => {\r\n      redis.ttl.mockResolvedValue(300);\r\n\r\n      const result = await service.getTTL('test-key');\r\n\r\n      expect(result).toBe(300);\r\n    });\r\n\r\n    it('should handle Redis errors gracefully', async () => {\r\n      redis.ttl.mockRejectedValue(new Error('Redis error'));\r\n\r\n      const result = await service.getTTL('test-key');\r\n\r\n      expect(result).toBe(-1);\r\n    });\r\n  });\r\n\r\n  describe('extendTTL', () => {\r\n    it('should extend TTL for key', async () => {\r\n      redis.expire.mockResolvedValue(1);\r\n\r\n      const result = await service.extendTTL('test-key', 600);\r\n\r\n      expect(redis.expire).toHaveBeenCalledWith('test-key', 600);\r\n      expect(result).toBe(true);\r\n    });\r\n\r\n    it('should return false when key does not exist', async () => {\r\n      redis.expire.mockResolvedValue(0);\r\n\r\n      const result = await service.extendTTL('test-key', 600);\r\n\r\n      expect(result).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('getStats', () => {\r\n    it('should return cache statistics', async () => {\r\n      redis.info\r\n        .mockResolvedValueOnce('used_memory:1048576\\n')\r\n        .mockResolvedValueOnce('db0:keys=100,expires=50\\n')\r\n        .mockResolvedValueOnce('connected_clients:5\\n');\r\n\r\n      const stats = await service.getStats();\r\n\r\n      expect(stats).toEqual({\r\n        hitRate: 0,\r\n        missRate: 0,\r\n        evictionCount: 0,\r\n        memoryUsage: 1048576,\r\n        totalKeys: 100,\r\n        connectedClients: 5,\r\n      });\r\n    });\r\n\r\n    it('should handle Redis info errors gracefully', async () => {\r\n      redis.info.mockRejectedValue(new Error('Redis error'));\r\n\r\n      const stats = await service.getStats();\r\n\r\n      expect(stats).toEqual({\r\n        hitRate: 0,\r\n        missRate: 0,\r\n        evictionCount: 0,\r\n        memoryUsage: 0,\r\n        totalKeys: 0,\r\n        connectedClients: 0,\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('healthCheck', () => {\r\n    it('should return healthy status when Redis is responsive', async () => {\r\n      redis.ping.mockResolvedValue('PONG');\r\n\r\n      const health = await service.healthCheck();\r\n\r\n      expect(health.status).toBe('healthy');\r\n      expect(health.latency).toBeGreaterThanOrEqual(0);\r\n    });\r\n\r\n    it('should return unhealthy status when Redis is not responsive', async () => {\r\n      redis.ping.mockRejectedValue(new Error('Connection failed'));\r\n\r\n      const health = await service.healthCheck();\r\n\r\n      expect(health.status).toBe('unhealthy');\r\n      expect(health.error).toBe('Connection failed');\r\n    });\r\n  });\r\n\r\n  describe('generateKey', () => {\r\n    it('should generate key with tenant isolation', () => {\r\n      const key = service.generateKey('tenant1', 'leads', 'list');\r\n\r\n      expect(key).toBe('tenant1:leads:list');\r\n    });\r\n\r\n    it('should generate key with parameters', () => {\r\n      const key = service.generateKey('tenant1', 'leads', 'list', { status: 'new', limit: 10 });\r\n\r\n      expect(key).toContain('tenant1:leads:list:');\r\n      expect(key).toContain(Buffer.from('limit=10&status=new').toString('base64'));\r\n    });\r\n\r\n    it('should generate consistent keys for same parameters', () => {\r\n      const key1 = service.generateKey('tenant1', 'leads', 'list', { status: 'new', limit: 10 });\r\n      const key2 = service.generateKey('tenant1', 'leads', 'list', { limit: 10, status: 'new' });\r\n\r\n      expect(key1).toBe(key2);\r\n    });\r\n  });\r\n\r\n  describe('clear', () => {\r\n    it('should clear all cache entries', async () => {\r\n      await service.clear();\r\n\r\n      expect(redis.flushdb).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should throw error when Redis flushdb fails', async () => {\r\n      redis.flushdb.mockRejectedValue(new Error('Redis error'));\r\n\r\n      await expect(service.clear()).rejects.toThrow('Redis error');\r\n    });\r\n  });\r\n});"],"names":["jest","mock","mockRedis","connect","fn","disconnect","get","set","setex","del","keys","exists","ttl","expire","ping","info","config","smembers","sadd","pipeline","flushdb","on","mockPipeline","mockReturnThis","exec","mockResolvedValue","describe","service","redis","beforeEach","clearAllMocks","Redis","mockImplementation","mockReturnValue","module","Test","createTestingModule","providers","CacheService","compile","onModuleInit","afterEach","onModuleDestroy","it","expect","toHaveBeenCalled","toHaveBeenCalledWith","errorService","mockRejectedValueOnce","Error","rejects","toThrow","testData","id","name","JSON","stringify","result","toEqual","toBeNull","mockRejectedValue","tags","delete","toBe","invalidate","not","mockResolvedValueOnce","invalidateByTags","getTTL","extendTTL","stats","getStats","hitRate","missRate","evictionCount","memoryUsage","totalKeys","connectedClients","health","healthCheck","status","latency","toBeGreaterThanOrEqual","error","key","generateKey","limit","toContain","Buffer","from","toString","key1","key2","clear"],"mappings":"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"}