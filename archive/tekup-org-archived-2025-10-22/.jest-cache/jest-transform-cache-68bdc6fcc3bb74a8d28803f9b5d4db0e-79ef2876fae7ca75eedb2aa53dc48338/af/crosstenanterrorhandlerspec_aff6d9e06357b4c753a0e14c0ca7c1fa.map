{"version":3,"sources":["C:\\Users\\empir\\Tekup-org\\apps\\flow-api\\src\\lead\\cross-tenant-error-handler.spec.ts"],"sourcesContent":["import { NotFoundException } from '@nestjs/common';\r\n\r\ndescribe('Cross-Tenant Access Error Handling', () => {\r\n  it('should map P2004 errors to NotFoundException', () => {\r\n    // This test verifies the logic we implemented in the LeadService.changeStatus method\r\n    // When Prisma throws a P2004 error (insufficient permissions), we should map it to a NotFoundException\r\n    \r\n    const prismaError: any = new Error('Insufficient permissions');\r\n    prismaError.code = 'P2004';\r\n    \r\n    // This is the logic we implemented in the catch block\r\n    if (prismaError.code === 'P2004') {\r\n      expect(() => {\r\n        throw new NotFoundException('Lead not found', 'lead_not_found');\r\n      }).toThrow(NotFoundException);\r\n    }\r\n  });\r\n\r\n  it('should preserve other errors', () => {\r\n    // This test verifies that other errors are not affected by our change\r\n    const otherError: any = new Error('Some other error');\r\n    \r\n    // Other errors should not be mapped to NotFoundException\r\n    expect(otherError.code).not.toBe('P2004');\r\n  });\r\n});"],"names":["describe","it","prismaError","Error","code","expect","NotFoundException","toThrow","otherError","not","toBe"],"mappings":";;;;wBAAkC;AAElCA,SAAS,sCAAsC;IAC7CC,GAAG,gDAAgD;QACjD,qFAAqF;QACrF,uGAAuG;QAEvG,MAAMC,cAAmB,IAAIC,MAAM;QACnCD,YAAYE,IAAI,GAAG;QAEnB,sDAAsD;QACtD,IAAIF,YAAYE,IAAI,KAAK,SAAS;YAChCC,OAAO;gBACL,MAAM,IAAIC,yBAAiB,CAAC,kBAAkB;YAChD,GAAGC,OAAO,CAACD,yBAAiB;QAC9B;IACF;IAEAL,GAAG,gCAAgC;QACjC,sEAAsE;QACtE,MAAMO,aAAkB,IAAIL,MAAM;QAElC,yDAAyD;QACzDE,OAAOG,WAAWJ,IAAI,EAAEK,GAAG,CAACC,IAAI,CAAC;IACnC;AACF"}