{"version":3,"sources":["C:\\Users\\empir\\Tekup-org\\apps\\flow-api\\src\\common\\exceptions\\__tests__\\custom-exceptions.spec.ts"],"sourcesContent":["import { HttpStatus } from '@nestjs/common';\r\nimport {\r\n  BaseCustomException,\r\n  BusinessValidationException,\r\n  ResourceNotFoundException,\r\n  DuplicateResourceException,\r\n  DatabaseOperationException,\r\n  ExternalServiceException,\r\n  RateLimitExceededException,\r\n  TimeoutException,\r\n  InsufficientPermissionsException,\r\n  InvalidTenantException,\r\n  ConfigurationException,\r\n  MaintenanceModeException,\r\n  QuotaExceededException,\r\n  DependencyUnavailableException,\r\n  ExceptionUtils,\r\n} from '../custom-exceptions.js';\r\n\r\ndescribe('Custom Exceptions', () => {\r\n  describe('BaseCustomException', () => {\r\n    it('should create base exception with all properties', () => {\r\n      const exception = new (class extends BaseCustomException {\r\n        constructor() {\r\n          super(\r\n            'Test message',\r\n            HttpStatus.BAD_REQUEST,\r\n            true,\r\n            60,\r\n            'TEST_ERROR',\r\n            { key: 'value' }\r\n          );\r\n        }\r\n      })();\r\n\r\n      expect(exception.message).toBe('Test message');\r\n      expect(exception.getStatus()).toBe(HttpStatus.BAD_REQUEST);\r\n      expect(exception.isRetryable).toBe(true);\r\n      expect(exception.retryAfter).toBe(60);\r\n      expect(exception.errorCode).toBe('TEST_ERROR');\r\n      expect(exception.context).toEqual({ key: 'value' });\r\n    });\r\n  });\r\n\r\n  describe('BusinessValidationException', () => {\r\n    it('should create business validation exception', () => {\r\n      const exception = new BusinessValidationException(\r\n        'Invalid email format',\r\n        'INVALID_EMAIL',\r\n        { field: 'email' }\r\n      );\r\n\r\n      expect(exception.message).toBe('Invalid email format');\r\n      expect(exception.getStatus()).toBe(HttpStatus.BAD_REQUEST);\r\n      expect(exception.isRetryable).toBe(false);\r\n      expect(exception.errorCode).toBe('INVALID_EMAIL');\r\n      expect(exception.context).toEqual({ field: 'email' });\r\n      expect(exception.name).toBe('BusinessValidationException');\r\n    });\r\n  });\r\n\r\n  describe('ResourceNotFoundException', () => {\r\n    it('should create resource not found exception with identifier', () => {\r\n      const exception = new ResourceNotFoundException('Lead', '123', { tenantId: 'tenant1' });\r\n\r\n      expect(exception.message).toBe(\"Lead with identifier '123' not found\");\r\n      expect(exception.getStatus()).toBe(HttpStatus.NOT_FOUND);\r\n      expect(exception.isRetryable).toBe(false);\r\n      expect(exception.errorCode).toBe('RESOURCE_NOT_FOUND');\r\n      expect(exception.context).toEqual({\r\n        resource: 'Lead',\r\n        identifier: '123',\r\n        tenantId: 'tenant1',\r\n      });\r\n    });\r\n\r\n    it('should create resource not found exception without identifier', () => {\r\n      const exception = new ResourceNotFoundException('User');\r\n\r\n      expect(exception.message).toBe('User not found');\r\n      expect(exception.context).toEqual({\r\n        resource: 'User',\r\n        identifier: undefined,\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('DuplicateResourceException', () => {\r\n    it('should create duplicate resource exception', () => {\r\n      const exception = new DuplicateResourceException(\r\n        'User',\r\n        'email',\r\n        'test@example.com',\r\n        { tenantId: 'tenant1' }\r\n      );\r\n\r\n      expect(exception.message).toBe(\"User with email 'test@example.com' already exists\");\r\n      expect(exception.getStatus()).toBe(HttpStatus.CONFLICT);\r\n      expect(exception.isRetryable).toBe(false);\r\n      expect(exception.errorCode).toBe('DUPLICATE_RESOURCE');\r\n      expect(exception.context).toEqual({\r\n        resource: 'User',\r\n        field: 'email',\r\n        value: 'test@example.com',\r\n        tenantId: 'tenant1',\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('DatabaseOperationException', () => {\r\n    it('should create database operation exception', () => {\r\n      const originalError = new Error('Connection timeout');\r\n      const exception = new DatabaseOperationException(\r\n        'findMany',\r\n        originalError,\r\n        { table: 'leads' }\r\n      );\r\n\r\n      expect(exception.message).toBe(\"Database operation 'findMany' failed: Connection timeout\");\r\n      expect(exception.getStatus()).toBe(HttpStatus.INTERNAL_SERVER_ERROR);\r\n      expect(exception.isRetryable).toBe(true);\r\n      expect(exception.retryAfter).toBe(5);\r\n      expect(exception.errorCode).toBe('DATABASE_OPERATION_FAILED');\r\n      expect(exception.context).toEqual({\r\n        operation: 'findMany',\r\n        originalError: 'Connection timeout',\r\n        table: 'leads',\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('ExternalServiceException', () => {\r\n    it('should create external service exception', () => {\r\n      const originalError = new Error('Service unavailable');\r\n      const exception = new ExternalServiceException(\r\n        'EmailService',\r\n        'sendEmail',\r\n        originalError,\r\n        60,\r\n        { recipient: 'test@example.com' }\r\n      );\r\n\r\n      expect(exception.message).toBe(\"External service 'EmailService' operation 'sendEmail' failed: Service unavailable\");\r\n      expect(exception.getStatus()).toBe(HttpStatus.SERVICE_UNAVAILABLE);\r\n      expect(exception.isRetryable).toBe(true);\r\n      expect(exception.retryAfter).toBe(60);\r\n      expect(exception.errorCode).toBe('EXTERNAL_SERVICE_FAILED');\r\n      expect(exception.context).toEqual({\r\n        serviceName: 'EmailService',\r\n        operation: 'sendEmail',\r\n        originalError: 'Service unavailable',\r\n        recipient: 'test@example.com',\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('RateLimitExceededException', () => {\r\n    it('should create rate limit exceeded exception', () => {\r\n      const exception = new RateLimitExceededException(\r\n        100,\r\n        60,\r\n        120,\r\n        { clientId: 'client123' }\r\n      );\r\n\r\n      expect(exception.message).toBe('Rate limit exceeded: 100 requests per 60 seconds');\r\n      expect(exception.getStatus()).toBe(HttpStatus.TOO_MANY_REQUESTS);\r\n      expect(exception.isRetryable).toBe(true);\r\n      expect(exception.retryAfter).toBe(120);\r\n      expect(exception.errorCode).toBe('RATE_LIMIT_EXCEEDED');\r\n      expect(exception.context).toEqual({\r\n        limit: 100,\r\n        windowSeconds: 60,\r\n        clientId: 'client123',\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('TimeoutException', () => {\r\n    it('should create timeout exception', () => {\r\n      const exception = new TimeoutException(\r\n        'database_query',\r\n        5000,\r\n        15,\r\n        { query: 'SELECT * FROM leads' }\r\n      );\r\n\r\n      expect(exception.message).toBe(\"Operation 'database_query' timed out after 5000ms\");\r\n      expect(exception.getStatus()).toBe(HttpStatus.REQUEST_TIMEOUT);\r\n      expect(exception.isRetryable).toBe(true);\r\n      expect(exception.retryAfter).toBe(15);\r\n      expect(exception.errorCode).toBe('OPERATION_TIMEOUT');\r\n      expect(exception.context).toEqual({\r\n        operation: 'database_query',\r\n        timeoutMs: 5000,\r\n        query: 'SELECT * FROM leads',\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('InsufficientPermissionsException', () => {\r\n    it('should create insufficient permissions exception', () => {\r\n      const exception = new InsufficientPermissionsException(\r\n        'leads',\r\n        'delete',\r\n        { userId: 'user123' }\r\n      );\r\n\r\n      expect(exception.message).toBe('Insufficient permissions to delete leads');\r\n      expect(exception.getStatus()).toBe(HttpStatus.FORBIDDEN);\r\n      expect(exception.isRetryable).toBe(false);\r\n      expect(exception.errorCode).toBe('INSUFFICIENT_PERMISSIONS');\r\n      expect(exception.context).toEqual({\r\n        resource: 'leads',\r\n        action: 'delete',\r\n        userId: 'user123',\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('InvalidTenantException', () => {\r\n    it('should create invalid tenant exception', () => {\r\n      const exception = new InvalidTenantException('tenant123', { reason: 'inactive' });\r\n\r\n      expect(exception.message).toBe('Invalid or inactive tenant: tenant123');\r\n      expect(exception.getStatus()).toBe(HttpStatus.FORBIDDEN);\r\n      expect(exception.isRetryable).toBe(false);\r\n      expect(exception.errorCode).toBe('INVALID_TENANT');\r\n      expect(exception.context).toEqual({\r\n        tenantId: 'tenant123',\r\n        reason: 'inactive',\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('ConfigurationException', () => {\r\n    it('should create configuration exception', () => {\r\n      const exception = new ConfigurationException(\r\n        'DATABASE_URL',\r\n        'Missing required environment variable',\r\n        { service: 'database' }\r\n      );\r\n\r\n      expect(exception.message).toBe(\"Configuration error for 'DATABASE_URL': Missing required environment variable\");\r\n      expect(exception.getStatus()).toBe(HttpStatus.INTERNAL_SERVER_ERROR);\r\n      expect(exception.isRetryable).toBe(false);\r\n      expect(exception.errorCode).toBe('CONFIGURATION_ERROR');\r\n      expect(exception.context).toEqual({\r\n        configKey: 'DATABASE_URL',\r\n        reason: 'Missing required environment variable',\r\n        service: 'database',\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('MaintenanceModeException', () => {\r\n    it('should create maintenance mode exception with duration', () => {\r\n      const exception = new MaintenanceModeException(30, { type: 'scheduled' });\r\n\r\n      expect(exception.message).toBe('Service is in maintenance mode. Estimated duration: 30 minutes');\r\n      expect(exception.getStatus()).toBe(HttpStatus.SERVICE_UNAVAILABLE);\r\n      expect(exception.isRetryable).toBe(true);\r\n      expect(exception.retryAfter).toBe(1800); // 30 minutes in seconds\r\n      expect(exception.errorCode).toBe('MAINTENANCE_MODE');\r\n      expect(exception.context).toEqual({\r\n        estimatedDurationMinutes: 30,\r\n        type: 'scheduled',\r\n      });\r\n    });\r\n\r\n    it('should create maintenance mode exception without duration', () => {\r\n      const exception = new MaintenanceModeException();\r\n\r\n      expect(exception.message).toBe('Service is in maintenance mode');\r\n      expect(exception.retryAfter).toBe(300); // 5 minutes default\r\n    });\r\n  });\r\n\r\n  describe('QuotaExceededException', () => {\r\n    it('should create quota exceeded exception with reset time', () => {\r\n      const resetTime = new Date('2023-12-01T00:00:00Z');\r\n      const exception = new QuotaExceededException(\r\n        'API calls',\r\n        1000,\r\n        1050,\r\n        resetTime,\r\n        { plan: 'basic' }\r\n      );\r\n\r\n      expect(exception.message).toBe('API calls quota exceeded: 1050/1000');\r\n      expect(exception.getStatus()).toBe(HttpStatus.TOO_MANY_REQUESTS);\r\n      expect(exception.isRetryable).toBe(true);\r\n      expect(exception.errorCode).toBe('QUOTA_EXCEEDED');\r\n      expect(exception.context).toEqual({\r\n        quotaType: 'API calls',\r\n        limit: 1000,\r\n        current: 1050,\r\n        resetTime: resetTime.toISOString(),\r\n        plan: 'basic',\r\n      });\r\n    });\r\n\r\n    it('should create quota exceeded exception without reset time', () => {\r\n      const exception = new QuotaExceededException('Storage', 100, 120);\r\n\r\n      expect(exception.retryAfter).toBe(3600); // 1 hour default\r\n    });\r\n  });\r\n\r\n  describe('DependencyUnavailableException', () => {\r\n    it('should create dependency unavailable exception with reason', () => {\r\n      const exception = new DependencyUnavailableException(\r\n        'Redis',\r\n        'Connection refused',\r\n        45,\r\n        { host: 'redis.example.com' }\r\n      );\r\n\r\n      expect(exception.message).toBe(\"Dependency 'Redis' is unavailable: Connection refused\");\r\n      expect(exception.getStatus()).toBe(HttpStatus.SERVICE_UNAVAILABLE);\r\n      expect(exception.isRetryable).toBe(true);\r\n      expect(exception.retryAfter).toBe(45);\r\n      expect(exception.errorCode).toBe('DEPENDENCY_UNAVAILABLE');\r\n      expect(exception.context).toEqual({\r\n        dependencyName: 'Redis',\r\n        reason: 'Connection refused',\r\n        host: 'redis.example.com',\r\n      });\r\n    });\r\n\r\n    it('should create dependency unavailable exception without reason', () => {\r\n      const exception = new DependencyUnavailableException('Database');\r\n\r\n      expect(exception.message).toBe(\"Dependency 'Database' is unavailable\");\r\n      expect(exception.context).toEqual({\r\n        dependencyName: 'Database',\r\n        reason: undefined,\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('ExceptionUtils', () => {\r\n    describe('isRetryable', () => {\r\n      it('should identify retryable custom exceptions', () => {\r\n        const retryableException = new DatabaseOperationException('query', new Error('timeout'));\r\n        const nonRetryableException = new BusinessValidationException('invalid input');\r\n\r\n        expect(ExceptionUtils.isRetryable(retryableException)).toBe(true);\r\n        expect(ExceptionUtils.isRetryable(nonRetryableException)).toBe(false);\r\n      });\r\n\r\n      it('should identify retryable error patterns', () => {\r\n        const timeoutError = new Error('Request timeout');\r\n        const networkError = new Error('Network connection failed');\r\n        const validationError = new Error('Validation failed');\r\n\r\n        expect(ExceptionUtils.isRetryable(timeoutError)).toBe(true);\r\n        expect(ExceptionUtils.isRetryable(networkError)).toBe(true);\r\n        expect(ExceptionUtils.isRetryable(validationError)).toBe(false);\r\n      });\r\n\r\n      it('should identify retryable HTTP status codes', () => {\r\n        const serverError = { status: 500 };\r\n        const timeoutError = { status: 408 };\r\n        const rateLimitError = { status: 429 };\r\n        const clientError = { status: 400 };\r\n\r\n        expect(ExceptionUtils.isRetryable(serverError)).toBe(true);\r\n        expect(ExceptionUtils.isRetryable(timeoutError)).toBe(true);\r\n        expect(ExceptionUtils.isRetryable(rateLimitError)).toBe(true);\r\n        expect(ExceptionUtils.isRetryable(clientError)).toBe(false);\r\n      });\r\n    });\r\n\r\n    describe('getRetryAfter', () => {\r\n      it('should get retry after from custom exception', () => {\r\n        const exception = new RateLimitExceededException(100, 60, 120);\r\n        expect(ExceptionUtils.getRetryAfter(exception)).toBe(120);\r\n      });\r\n\r\n      it('should get retry after from HTTP headers', () => {\r\n        const exception = {\r\n          response: {\r\n            headers: {\r\n              'retry-after': '300',\r\n            },\r\n          },\r\n        };\r\n        expect(ExceptionUtils.getRetryAfter(exception)).toBe(300);\r\n      });\r\n\r\n      it('should return undefined when no retry after available', () => {\r\n        const exception = new Error('Generic error');\r\n        expect(ExceptionUtils.getRetryAfter(exception)).toBeUndefined();\r\n      });\r\n    });\r\n\r\n    describe('fromError', () => {\r\n      it('should return custom exception as-is', () => {\r\n        const customException = new BusinessValidationException('test');\r\n        const result = ExceptionUtils.fromError(customException);\r\n        expect(result).toBe(customException);\r\n      });\r\n\r\n      it('should map Prisma unique constraint error', () => {\r\n        const prismaError = { code: 'P2002', message: 'Unique constraint failed' };\r\n        const result = ExceptionUtils.fromError(prismaError);\r\n        expect(result).toBeInstanceOf(DuplicateResourceException);\r\n      });\r\n\r\n      it('should map Prisma record not found error', () => {\r\n        const prismaError = { code: 'P2025', message: 'Record not found' };\r\n        const result = ExceptionUtils.fromError(prismaError);\r\n        expect(result).toBeInstanceOf(ResourceNotFoundException);\r\n      });\r\n\r\n      it('should map timeout errors', () => {\r\n        const timeoutError = { code: 'ETIMEDOUT', message: 'Request timeout' };\r\n        const result = ExceptionUtils.fromError(timeoutError);\r\n        expect(result).toBeInstanceOf(TimeoutException);\r\n      });\r\n\r\n      it('should map rate limit errors', () => {\r\n        const rateLimitError = { status: 429, message: 'Too many requests' };\r\n        const result = ExceptionUtils.fromError(rateLimitError);\r\n        expect(result).toBeInstanceOf(RateLimitExceededException);\r\n      });\r\n\r\n      it('should map server errors', () => {\r\n        const serverError = { status: 500, message: 'Internal server error' };\r\n        const result = ExceptionUtils.fromError(serverError);\r\n        expect(result).toBeInstanceOf(ExternalServiceException);\r\n      });\r\n\r\n      it('should default to business validation error', () => {\r\n        const genericError = { message: 'Unknown error' };\r\n        const result = ExceptionUtils.fromError(genericError);\r\n        expect(result).toBeInstanceOf(BusinessValidationException);\r\n      });\r\n    });\r\n  });\r\n});"],"names":["describe","it","exception","BaseCustomException","HttpStatus","BAD_REQUEST","key","expect","message","toBe","getStatus","isRetryable","retryAfter","errorCode","context","toEqual","BusinessValidationException","field","name","ResourceNotFoundException","tenantId","NOT_FOUND","resource","identifier","undefined","DuplicateResourceException","CONFLICT","value","originalError","Error","DatabaseOperationException","table","INTERNAL_SERVER_ERROR","operation","ExternalServiceException","recipient","SERVICE_UNAVAILABLE","serviceName","RateLimitExceededException","clientId","TOO_MANY_REQUESTS","limit","windowSeconds","TimeoutException","query","REQUEST_TIMEOUT","timeoutMs","InsufficientPermissionsException","userId","FORBIDDEN","action","InvalidTenantException","reason","ConfigurationException","service","configKey","MaintenanceModeException","type","estimatedDurationMinutes","resetTime","Date","QuotaExceededException","plan","quotaType","current","toISOString","DependencyUnavailableException","host","dependencyName","retryableException","nonRetryableException","ExceptionUtils","timeoutError","networkError","validationError","serverError","status","rateLimitError","clientError","getRetryAfter","response","headers","toBeUndefined","customException","result","fromError","prismaError","code","toBeInstanceOf","genericError"],"mappings":"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"}