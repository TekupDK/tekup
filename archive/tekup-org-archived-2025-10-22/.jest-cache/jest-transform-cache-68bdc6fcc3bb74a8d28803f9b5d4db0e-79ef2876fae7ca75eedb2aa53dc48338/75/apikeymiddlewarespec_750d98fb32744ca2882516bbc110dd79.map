{"version":3,"sources":["C:\\Users\\empir\\Tekup-org\\apps\\flow-api\\src\\auth\\api-key.middleware.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { ApiKeyMiddleware } from './api-key.middleware';\r\nimport { PrismaService } from '../prisma/prisma.service.js';\r\nimport { EnhancedApiKeyService } from './enhanced-api-key.service.js';\r\nimport { TenantContextService } from './tenant-context.service.js';\r\nimport { UnauthorizedException } from '@nestjs/common';\r\nimport { Request, Response } from 'express';\r\n\r\n// Mock services\r\nconst mockPrismaService = {\r\n  $executeRaw: jest.fn(),\r\n  $executeRawUnsafe: jest.fn(),\r\n};\r\n\r\nconst mockEnhancedApiKeyService = {\r\n  validateApiKey: jest.fn(),\r\n  logUsage: jest.fn(),\r\n};\r\n\r\nconst mockTenantContextService = {\r\n  setTenantContext: jest.fn(),\r\n};\r\n\r\ndescribe('ApiKeyMiddleware', () => {\r\n  let middleware: ApiKeyMiddleware;\r\n  let tenantContextService: TenantContextService;\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        ApiKeyMiddleware,\r\n        {\r\n          provide: PrismaService,\r\n          useValue: mockPrismaService,\r\n        },\r\n        {\r\n          provide: EnhancedApiKeyService,\r\n          useValue: mockEnhancedApiKeyService,\r\n        },\r\n        {\r\n          provide: TenantContextService,\r\n          useValue: mockTenantContextService,\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    middleware = module.get<ApiKeyMiddleware>(ApiKeyMiddleware);\r\n    tenantContextService = module.get<TenantContextService>(TenantContextService);\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(middleware).toBeDefined();\r\n  });\r\n\r\n  describe('use', () => {\r\n    let mockRequest: Partial<Request>;\r\n    let mockResponse: Partial<Response>;\r\n    let nextFunction: jest.Mock;\r\n\r\n    beforeEach(() => {\r\n      mockRequest = {\r\n        header: jest.fn(),\r\n        get: jest.fn(),\r\n        path: '/test',\r\n        method: 'GET',\r\n        query: {},\r\n        body: {},\r\n      };\r\n      \r\n      mockResponse = {\r\n        setHeader: jest.fn(),\r\n        on: jest.fn(),\r\n        send: jest.fn(function(data) {\r\n          return data;\r\n        }),\r\n      };\r\n      \r\n      nextFunction = jest.fn();\r\n      \r\n      // Mock the response event emitter\r\n      (mockResponse.on as jest.Mock).mockImplementation((event, callback) => {\r\n        if (event === 'finish') {\r\n          // Don't call callback immediately to avoid async issues in tests\r\n        }\r\n      });\r\n    });\r\n\r\n    it('should throw UnauthorizedException if no API key is provided', async () => {\r\n      (mockRequest.header as jest.Mock).mockReturnValue(undefined);\r\n\r\n      await expect(\r\n        middleware.use(\r\n          mockRequest as Request,\r\n          mockResponse as Response,\r\n          nextFunction\r\n        )\r\n      ).rejects.toThrow(UnauthorizedException);\r\n      \r\n      expect(nextFunction).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should validate API key and set tenant context using TenantContextService', async () => {\r\n      const apiKey = 'test-api-key';\r\n      const tenantId = 'test-tenant-id';\r\n      \r\n      (mockRequest.header as jest.Mock).mockReturnValue(apiKey);\r\n      (mockRequest.get as jest.Mock).mockReturnValue('test-user-agent');\r\n      \r\n      mockEnhancedApiKeyService.validateApiKey.mockResolvedValue({\r\n        valid: true,\r\n        apiKey: {\r\n          id: 'api-key-id',\r\n          tenantId,\r\n          scopes: [],\r\n          permissions: [],\r\n          environment: 'test',\r\n        },\r\n        shouldRotate: false,\r\n      });\r\n\r\n      mockTenantContextService.setTenantContext.mockResolvedValue(undefined);\r\n\r\n      await middleware.use(\r\n        mockRequest as Request,\r\n        mockResponse as Response,\r\n        nextFunction\r\n      );\r\n\r\n      // Verify that TenantContextService.setTenantContext was called with the correct tenant ID\r\n      expect(tenantContextService.setTenantContext).toHaveBeenCalledWith(tenantId);\r\n      \r\n      // Verify that the unsafe method is not called\r\n      expect(mockPrismaService.$executeRawUnsafe).not.toHaveBeenCalled();\r\n      \r\n      // Verify that next() was called\r\n      expect(nextFunction).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should handle tenant context setting errors gracefully', async () => {\r\n      const apiKey = 'test-api-key';\r\n      const tenantId = 'test-tenant-id';\r\n      \r\n      (mockRequest.header as jest.Mock).mockReturnValue(apiKey);\r\n      (mockRequest.get as jest.Mock).mockReturnValue('test-user-agent');\r\n      \r\n      mockEnhancedApiKeyService.validateApiKey.mockResolvedValue({\r\n        valid: true,\r\n        apiKey: {\r\n          id: 'api-key-id',\r\n          tenantId,\r\n          scopes: [],\r\n          permissions: [],\r\n          environment: 'test',\r\n        },\r\n        shouldRotate: false,\r\n      });\r\n\r\n      // Simulate an error when setting tenant context\r\n      mockTenantContextService.setTenantContext.mockRejectedValue(new Error('Database error'));\r\n\r\n      // Should not throw an error but log a warning\r\n      await expect(\r\n        middleware.use(\r\n          mockRequest as Request,\r\n          mockResponse as Response,\r\n          nextFunction\r\n        )\r\n      ).resolves.not.toThrow();\r\n\r\n      // Verify that TenantContextService.setTenantContext was called\r\n      expect(tenantContextService.setTenantContext).toHaveBeenCalledWith(tenantId);\r\n      \r\n      // Verify that next() was still called despite the error\r\n      expect(nextFunction).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should set rotation headers when key should be rotated', async () => {\r\n      const apiKey = 'test-api-key';\r\n      \r\n      (mockRequest.header as jest.Mock).mockReturnValue(apiKey);\r\n      (mockRequest.get as jest.Mock).mockReturnValue('test-user-agent');\r\n      \r\n      mockEnhancedApiKeyService.validateApiKey.mockResolvedValue({\r\n        valid: true,\r\n        apiKey: {\r\n          id: 'api-key-id',\r\n          tenantId: 'test-tenant-id',\r\n          scopes: [],\r\n          permissions: [],\r\n          environment: 'test',\r\n        },\r\n        shouldRotate: true, // Key should be rotated\r\n      });\r\n\r\n      mockTenantContextService.setTenantContext.mockResolvedValue(undefined);\r\n\r\n      await middleware.use(\r\n        mockRequest as Request,\r\n        mockResponse as Response,\r\n        nextFunction\r\n      );\r\n\r\n      // Verify that rotation headers are set\r\n      expect(mockResponse.setHeader).toHaveBeenCalledWith(\r\n        'X-API-Key-Rotation-Recommended',\r\n        'true'\r\n      );\r\n      expect(mockResponse.setHeader).toHaveBeenCalledWith(\r\n        'X-API-Key-Rotation-Reason',\r\n        'Key should be rotated for security'\r\n      );\r\n      \r\n      expect(nextFunction).toHaveBeenCalled();\r\n    });\r\n  });\r\n});"],"names":["mockPrismaService","$executeRaw","jest","fn","$executeRawUnsafe","mockEnhancedApiKeyService","validateApiKey","logUsage","mockTenantContextService","setTenantContext","describe","middleware","tenantContextService","beforeEach","module","Test","createTestingModule","providers","ApiKeyMiddleware","provide","PrismaService","useValue","EnhancedApiKeyService","TenantContextService","compile","get","afterEach","clearAllMocks","it","expect","toBeDefined","mockRequest","mockResponse","nextFunction","header","path","method","query","body","setHeader","on","send","data","mockImplementation","event","callback","mockReturnValue","undefined","use","rejects","toThrow","UnauthorizedException","not","toHaveBeenCalled","apiKey","tenantId","mockResolvedValue","valid","id","scopes","permissions","environment","shouldRotate","toHaveBeenCalledWith","mockRejectedValue","Error","resolves"],"mappings":"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"}