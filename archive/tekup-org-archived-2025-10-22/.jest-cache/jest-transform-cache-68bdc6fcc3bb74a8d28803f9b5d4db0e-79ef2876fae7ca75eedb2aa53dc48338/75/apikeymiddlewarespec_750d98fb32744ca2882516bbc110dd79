6e0ebc349908f5a457a9066c1ddb863a
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _testing = require("@nestjs/testing");
const _apikeymiddleware = require("./api-key.middleware");
const _prismaservice = require("../prisma/prisma.service.js");
const _enhancedapikeyservice = require("./enhanced-api-key.service.js");
const _tenantcontextservice = require("./tenant-context.service.js");
const _common = require("@nestjs/common");
// Mock services
const mockPrismaService = {
    $executeRaw: jest.fn(),
    $executeRawUnsafe: jest.fn()
};
const mockEnhancedApiKeyService = {
    validateApiKey: jest.fn(),
    logUsage: jest.fn()
};
const mockTenantContextService = {
    setTenantContext: jest.fn()
};
describe('ApiKeyMiddleware', ()=>{
    let middleware;
    let tenantContextService;
    beforeEach(async ()=>{
        const module = await _testing.Test.createTestingModule({
            providers: [
                _apikeymiddleware.ApiKeyMiddleware,
                {
                    provide: _prismaservice.PrismaService,
                    useValue: mockPrismaService
                },
                {
                    provide: _enhancedapikeyservice.EnhancedApiKeyService,
                    useValue: mockEnhancedApiKeyService
                },
                {
                    provide: _tenantcontextservice.TenantContextService,
                    useValue: mockTenantContextService
                }
            ]
        }).compile();
        middleware = module.get(_apikeymiddleware.ApiKeyMiddleware);
        tenantContextService = module.get(_tenantcontextservice.TenantContextService);
    });
    afterEach(()=>{
        jest.clearAllMocks();
    });
    it('should be defined', ()=>{
        expect(middleware).toBeDefined();
    });
    describe('use', ()=>{
        let mockRequest;
        let mockResponse;
        let nextFunction;
        beforeEach(()=>{
            mockRequest = {
                header: jest.fn(),
                get: jest.fn(),
                path: '/test',
                method: 'GET',
                query: {},
                body: {}
            };
            mockResponse = {
                setHeader: jest.fn(),
                on: jest.fn(),
                send: jest.fn(function(data) {
                    return data;
                })
            };
            nextFunction = jest.fn();
            // Mock the response event emitter
            mockResponse.on.mockImplementation((event, callback)=>{
                if (event === 'finish') {
                // Don't call callback immediately to avoid async issues in tests
                }
            });
        });
        it('should throw UnauthorizedException if no API key is provided', async ()=>{
            mockRequest.header.mockReturnValue(undefined);
            await expect(middleware.use(mockRequest, mockResponse, nextFunction)).rejects.toThrow(_common.UnauthorizedException);
            expect(nextFunction).not.toHaveBeenCalled();
        });
        it('should validate API key and set tenant context using TenantContextService', async ()=>{
            const apiKey = 'test-api-key';
            const tenantId = 'test-tenant-id';
            mockRequest.header.mockReturnValue(apiKey);
            mockRequest.get.mockReturnValue('test-user-agent');
            mockEnhancedApiKeyService.validateApiKey.mockResolvedValue({
                valid: true,
                apiKey: {
                    id: 'api-key-id',
                    tenantId,
                    scopes: [],
                    permissions: [],
                    environment: 'test'
                },
                shouldRotate: false
            });
            mockTenantContextService.setTenantContext.mockResolvedValue(undefined);
            await middleware.use(mockRequest, mockResponse, nextFunction);
            // Verify that TenantContextService.setTenantContext was called with the correct tenant ID
            expect(tenantContextService.setTenantContext).toHaveBeenCalledWith(tenantId);
            // Verify that the unsafe method is not called
            expect(mockPrismaService.$executeRawUnsafe).not.toHaveBeenCalled();
            // Verify that next() was called
            expect(nextFunction).toHaveBeenCalled();
        });
        it('should handle tenant context setting errors gracefully', async ()=>{
            const apiKey = 'test-api-key';
            const tenantId = 'test-tenant-id';
            mockRequest.header.mockReturnValue(apiKey);
            mockRequest.get.mockReturnValue('test-user-agent');
            mockEnhancedApiKeyService.validateApiKey.mockResolvedValue({
                valid: true,
                apiKey: {
                    id: 'api-key-id',
                    tenantId,
                    scopes: [],
                    permissions: [],
                    environment: 'test'
                },
                shouldRotate: false
            });
            // Simulate an error when setting tenant context
            mockTenantContextService.setTenantContext.mockRejectedValue(new Error('Database error'));
            // Should not throw an error but log a warning
            await expect(middleware.use(mockRequest, mockResponse, nextFunction)).resolves.not.toThrow();
            // Verify that TenantContextService.setTenantContext was called
            expect(tenantContextService.setTenantContext).toHaveBeenCalledWith(tenantId);
            // Verify that next() was still called despite the error
            expect(nextFunction).toHaveBeenCalled();
        });
        it('should set rotation headers when key should be rotated', async ()=>{
            const apiKey = 'test-api-key';
            mockRequest.header.mockReturnValue(apiKey);
            mockRequest.get.mockReturnValue('test-user-agent');
            mockEnhancedApiKeyService.validateApiKey.mockResolvedValue({
                valid: true,
                apiKey: {
                    id: 'api-key-id',
                    tenantId: 'test-tenant-id',
                    scopes: [],
                    permissions: [],
                    environment: 'test'
                },
                shouldRotate: true
            });
            mockTenantContextService.setTenantContext.mockResolvedValue(undefined);
            await middleware.use(mockRequest, mockResponse, nextFunction);
            // Verify that rotation headers are set
            expect(mockResponse.setHeader).toHaveBeenCalledWith('X-API-Key-Rotation-Recommended', 'true');
            expect(mockResponse.setHeader).toHaveBeenCalledWith('X-API-Key-Rotation-Reason', 'Key should be rotated for security');
            expect(nextFunction).toHaveBeenCalled();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,