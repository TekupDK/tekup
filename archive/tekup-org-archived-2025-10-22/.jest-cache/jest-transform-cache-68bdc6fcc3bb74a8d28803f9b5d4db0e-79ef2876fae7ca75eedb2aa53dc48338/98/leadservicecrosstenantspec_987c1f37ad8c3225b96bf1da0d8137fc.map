{"version":3,"sources":["C:\\Users\\empir\\Tekup-org\\apps\\flow-api\\src\\lead\\lead.service.cross-tenant.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { LeadService } from './lead.service';\r\nimport { PrismaService } from '../prisma/prisma.service.js';\r\nimport { MetricsService } from '../metrics/metrics.service.js';\r\nimport { SettingsService } from '../settings/settings.service.js';\r\nimport { CacheService } from '../cache/cache.service.js';\r\nimport { PerformanceService } from '../performance/performance.service.js';\r\nimport { StructuredLoggerService } from '../common/logging/structured-logger.service.js';\r\nimport { AsyncContextService } from '../common/logging/async-context.service.js';\r\nimport { RetryService } from '../common/exceptions/retry.service.js';\r\nimport { CircuitBreakerService } from '../common/circuit-breaker/circuit-breaker.service.js';\r\nimport { DuplicateDetectionService } from './services/duplicate-detection.service.js';\r\nimport { PerformanceOptimizationService } from '../performance/performance-optimization.service.js';\r\nimport { WebSocketService } from '../websocket/websocket.service.js';\r\nimport { PaginationService } from '../common/pagination/pagination.service.js';\r\nimport { NotFoundException } from '@nestjs/common';\r\nimport { LeadNotFoundException } from '../common/exceptions/custom-exceptions.js';\r\n\r\n// Mock all services\r\nconst mockPrismaService = {\r\n  lead: {\r\n    findFirst: jest.fn(),\r\n    update: jest.fn(),\r\n  },\r\n  $transaction: jest.fn(),\r\n  leadEvent: {\r\n    create: jest.fn(),\r\n  },\r\n};\r\n\r\nconst mockMetricsService = {\r\n  increment: jest.fn(),\r\n};\r\n\r\nconst mockSettingsService = {};\r\nconst mockCacheService = {};\r\nconst mockPerformanceService = {\r\n  measureQuery: jest.fn(),\r\n};\r\nconst mockLogger = {\r\n  logBusinessEvent: jest.fn(),\r\n  debug: jest.fn(),\r\n  error: jest.fn(),\r\n  warn: jest.fn(),\r\n};\r\nconst mockContextService = {\r\n  toLogContext: jest.fn().mockReturnValue({}),\r\n  getUserId: jest.fn(),\r\n};\r\nconst mockRetryService = {\r\n  executeWithDatabaseRetry: jest.fn(),\r\n};\r\nconst mockCircuitBreakerService = {};\r\nconst mockDuplicateDetectionService = {};\r\nconst mockPerformanceOptimizationService = {\r\n  invalidateLeadStats: jest.fn(),\r\n  invalidateLeadCounts: jest.fn(),\r\n};\r\nconst mockWebSocketService = {\r\n  sendStatusChange: jest.fn(),\r\n};\r\nconst mockPaginationService = {\r\n  paginateLeads: jest.fn(),\r\n};\r\n\r\ndescribe('LeadService - Cross-Tenant Access', () => {\r\n  let service: LeadService;\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        LeadService,\r\n        {\r\n          provide: PrismaService,\r\n          useValue: mockPrismaService,\r\n        },\r\n        {\r\n          provide: MetricsService,\r\n          useValue: mockMetricsService,\r\n        },\r\n        {\r\n          provide: SettingsService,\r\n          useValue: mockSettingsService,\r\n        },\r\n        {\r\n          provide: CacheService,\r\n          useValue: mockCacheService,\r\n        },\r\n        {\r\n          provide: PerformanceService,\r\n          useValue: mockPerformanceService,\r\n        },\r\n        {\r\n          provide: StructuredLoggerService,\r\n          useValue: mockLogger,\r\n        },\r\n        {\r\n          provide: AsyncContextService,\r\n          useValue: mockContextService,\r\n        },\r\n        {\r\n          provide: RetryService,\r\n          useValue: mockRetryService,\r\n        },\r\n        {\r\n          provide: CircuitBreakerService,\r\n          useValue: mockCircuitBreakerService,\r\n        },\r\n        {\r\n          provide: DuplicateDetectionService,\r\n          useValue: mockDuplicateDetectionService,\r\n        },\r\n        {\r\n          provide: PerformanceOptimizationService,\r\n          useValue: mockPerformanceOptimizationService,\r\n        },\r\n        {\r\n          provide: WebSocketService,\r\n          useValue: mockWebSocketService,\r\n        },\r\n        {\r\n          provide: PaginationService,\r\n          useValue: mockPaginationService,\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<LeadService>(LeadService);\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(service).toBeDefined();\r\n  });\r\n\r\n  describe('changeStatus', () => {\r\n    const leadId = 'test-lead-id';\r\n    const tenantId = 'test-tenant-id';\r\n    const toStatus = 'CONTACTED' as const;\r\n\r\n    it('should throw NotFoundException for cross-tenant access attempts (P2004 error)', async () => {\r\n      // Create a proper Prisma error with code property\r\n      const prismaError: any = new Error('Insufficient permissions');\r\n      prismaError.code = 'P2004';\r\n      \r\n      mockRetryService.executeWithDatabaseRetry.mockRejectedValue(prismaError);\r\n\r\n      await expect(service.changeStatus(leadId, tenantId, toStatus)).rejects.toThrow(NotFoundException);\r\n      await expect(service.changeStatus(leadId, tenantId, toStatus)).rejects.toThrow('Lead not found');\r\n    });\r\n\r\n    it('should re-throw LeadNotFoundException as-is', async () => {\r\n      const leadNotFoundError = new LeadNotFoundException(leadId, tenantId);\r\n      mockRetryService.executeWithDatabaseRetry.mockRejectedValue(leadNotFoundError);\r\n\r\n      await expect(service.changeStatus(leadId, tenantId, toStatus)).rejects.toThrow(LeadNotFoundException);\r\n    });\r\n\r\n    it('should throw DatabaseException for other errors', async () => {\r\n      const otherError = new Error('Some other database error');\r\n      mockRetryService.executeWithDatabaseRetry.mockRejectedValue(otherError);\r\n\r\n      // We expect it to throw a DatabaseException, but we can't easily check the exact type\r\n      // in this test setup. The important thing is that it doesn't throw the original error.\r\n      await expect(service.changeStatus(leadId, tenantId, toStatus)).rejects.toThrow();\r\n    });\r\n  });\r\n});"],"names":["mockPrismaService","lead","findFirst","jest","fn","update","$transaction","leadEvent","create","mockMetricsService","increment","mockSettingsService","mockCacheService","mockPerformanceService","measureQuery","mockLogger","logBusinessEvent","debug","error","warn","mockContextService","toLogContext","mockReturnValue","getUserId","mockRetryService","executeWithDatabaseRetry","mockCircuitBreakerService","mockDuplicateDetectionService","mockPerformanceOptimizationService","invalidateLeadStats","invalidateLeadCounts","mockWebSocketService","sendStatusChange","mockPaginationService","paginateLeads","describe","service","beforeEach","module","Test","createTestingModule","providers","LeadService","provide","PrismaService","useValue","MetricsService","SettingsService","CacheService","PerformanceService","StructuredLoggerService","AsyncContextService","RetryService","CircuitBreakerService","DuplicateDetectionService","PerformanceOptimizationService","WebSocketService","PaginationService","compile","get","afterEach","clearAllMocks","it","expect","toBeDefined","leadId","tenantId","toStatus","prismaError","Error","code","mockRejectedValue","changeStatus","rejects","toThrow","NotFoundException","leadNotFoundError","LeadNotFoundException","otherError"],"mappings":"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"}