{"version":3,"sources":["C:\\Users\\empir\\Tekup-org\\apps\\flow-api\\src\\common\\retry\\__tests__\\retry.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { RetryService, RetryableError, NonRetryableError } from '../retry.service.js';\r\nimport { StructuredLoggerService } from '../../logging/structured-logger.service.js';\r\n\r\ndescribe('RetryService', () => {\r\n  let service: RetryService;\r\n  let mockLogger: jest.Mocked<StructuredLoggerService>;\r\n\r\n  beforeEach(async () => {\r\n    mockLogger = {\r\n      info: jest.fn(),\r\n      warn: jest.fn(),\r\n      error: jest.fn(),\r\n    } as any;\r\n\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        RetryService,\r\n        { provide: StructuredLoggerService, useValue: mockLogger },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<RetryService>(RetryService);\r\n  });\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(service).toBeDefined();\r\n  });\r\n\r\n  describe('executeWithRetry', () => {\r\n    it('should succeed on first attempt', async () => {\r\n      const mockOperation = jest.fn().mockResolvedValue('success');\r\n\r\n      const result = await service.executeWithRetry(mockOperation);\r\n\r\n      expect(result.result).toBe('success');\r\n      expect(result.attempts).toBe(1);\r\n      expect(result.errors).toHaveLength(0);\r\n      expect(mockOperation).toHaveBeenCalledTimes(1);\r\n    });\r\n\r\n    it('should retry on retryable errors', async () => {\r\n      const mockOperation = jest.fn()\r\n        .mockRejectedValueOnce(new RetryableError('Temporary failure'))\r\n        .mockRejectedValueOnce(new RetryableError('Another failure'))\r\n        .mockResolvedValue('success');\r\n\r\n      const result = await service.executeWithRetry(mockOperation, {\r\n        maxRetries: 3,\r\n        baseDelay: 10, // Short delay for testing\r\n      });\r\n\r\n      expect(result.result).toBe('success');\r\n      expect(result.attempts).toBe(3);\r\n      expect(result.errors).toHaveLength(2);\r\n      expect(mockOperation).toHaveBeenCalledTimes(3);\r\n    });\r\n\r\n    it('should not retry on non-retryable errors', async () => {\r\n      const mockOperation = jest.fn().mockRejectedValue(new NonRetryableError('Permanent failure'));\r\n\r\n      await expect(\r\n        service.executeWithRetry(mockOperation, { maxRetries: 3 })\r\n      ).rejects.toThrow('Permanent failure');\r\n\r\n      expect(mockOperation).toHaveBeenCalledTimes(1);\r\n    });\r\n\r\n    it('should respect maxRetries limit', async () => {\r\n      const mockOperation = jest.fn().mockRejectedValue(new RetryableError('Always fails'));\r\n\r\n      await expect(\r\n        service.executeWithRetry(mockOperation, {\r\n          maxRetries: 2,\r\n          baseDelay: 10,\r\n        })\r\n      ).rejects.toThrow('Always fails');\r\n\r\n      expect(mockOperation).toHaveBeenCalledTimes(3); // Initial + 2 retries\r\n    });\r\n\r\n    it('should use custom retry condition', async () => {\r\n      const mockOperation = jest.fn().mockRejectedValue(new Error('Custom error'));\r\n      const customRetryCondition = jest.fn().mockReturnValue(true);\r\n\r\n      await expect(\r\n        service.executeWithRetry(mockOperation, {\r\n          maxRetries: 1,\r\n          baseDelay: 10,\r\n          retryCondition: customRetryCondition,\r\n        })\r\n      ).rejects.toThrow('Custom error');\r\n\r\n      expect(customRetryCondition).toHaveBeenCalledWith(expect.any(Error), 1);\r\n      expect(mockOperation).toHaveBeenCalledTimes(2);\r\n    });\r\n\r\n    it('should call onRetry callback', async () => {\r\n      const mockOperation = jest.fn()\r\n        .mockRejectedValueOnce(new RetryableError('Failure'))\r\n        .mockResolvedValue('success');\r\n\r\n      const onRetry = jest.fn();\r\n\r\n      await service.executeWithRetry(mockOperation, {\r\n        maxRetries: 1,\r\n        baseDelay: 10,\r\n        onRetry,\r\n      });\r\n\r\n      expect(onRetry).toHaveBeenCalledWith(\r\n        expect.any(RetryableError),\r\n        1,\r\n        expect.any(Number)\r\n      );\r\n    });\r\n\r\n    it('should handle timeout', async () => {\r\n      const mockOperation = jest.fn().mockImplementation(\r\n        () => new Promise(resolve => setTimeout(resolve, 200))\r\n      );\r\n\r\n      await expect(\r\n        service.executeWithRetry(mockOperation, {\r\n          timeout: 50,\r\n          maxRetries: 0,\r\n        })\r\n      ).rejects.toThrow('Operation timed out after 50ms');\r\n    });\r\n  });\r\n\r\n  describe('withRetry', () => {\r\n    it('should create retryable function', async () => {\r\n      const originalFn = jest.fn().mockResolvedValue('result');\r\n      const retryableFn = service.withRetry(originalFn, { maxRetries: 2 });\r\n\r\n      const result = await retryableFn('arg1', 'arg2');\r\n\r\n      expect(result).toBe('result');\r\n      expect(originalFn).toHaveBeenCalledWith('arg1', 'arg2');\r\n    });\r\n\r\n    it('should retry wrapped function', async () => {\r\n      const originalFn = jest.fn()\r\n        .mockRejectedValueOnce(new RetryableError('Failure'))\r\n        .mockResolvedValue('success');\r\n\r\n      const retryableFn = service.withRetry(originalFn, {\r\n        maxRetries: 1,\r\n        baseDelay: 10,\r\n      });\r\n\r\n      const result = await retryableFn();\r\n\r\n      expect(result).toBe('success');\r\n      expect(originalFn).toHaveBeenCalledTimes(2);\r\n    });\r\n  });\r\n\r\n  describe('default retry condition', () => {\r\n    it('should retry network errors', () => {\r\n      const networkError = new Error('Connection refused');\r\n      networkError.name = 'NetworkError';\r\n      (networkError as any).code = 'ECONNREFUSED';\r\n\r\n      const shouldRetry = service['defaultRetryCondition'](networkError, 1);\r\n      expect(shouldRetry).toBe(true);\r\n    });\r\n\r\n    it('should retry timeout errors', () => {\r\n      const timeoutError = new Error('Request timeout');\r\n      (timeoutError as any).code = 'ETIMEDOUT';\r\n\r\n      const shouldRetry = service['defaultRetryCondition'](timeoutError, 1);\r\n      expect(shouldRetry).toBe(true);\r\n    });\r\n\r\n    it('should retry database connection errors', () => {\r\n      const dbError = new Error('Connection terminated');\r\n      (dbError as any).code = 'P1001';\r\n\r\n      const shouldRetry = service['defaultRetryCondition'](dbError, 1);\r\n      expect(shouldRetry).toBe(true);\r\n    });\r\n\r\n    it('should retry server errors', () => {\r\n      const serverError = new Error('Internal server error');\r\n      (serverError as any).status = 500;\r\n\r\n      const shouldRetry = service['defaultRetryCondition'](serverError, 1);\r\n      expect(shouldRetry).toBe(true);\r\n    });\r\n\r\n    it('should retry rate limit errors', () => {\r\n      const rateLimitError = new Error('Too many requests');\r\n      (rateLimitError as any).status = 429;\r\n\r\n      const shouldRetry = service['defaultRetryCondition'](rateLimitError, 1);\r\n      expect(shouldRetry).toBe(true);\r\n    });\r\n\r\n    it('should not retry client errors', () => {\r\n      const clientError = new Error('Bad request');\r\n      (clientError as any).status = 400;\r\n\r\n      const shouldRetry = service['defaultRetryCondition'](clientError, 1);\r\n      expect(shouldRetry).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('delay calculation', () => {\r\n    it('should calculate linear backoff', () => {\r\n      const delay1 = service['calculateDelay'](1, 1000, 10000, 'linear', false);\r\n      const delay2 = service['calculateDelay'](2, 1000, 10000, 'linear', false);\r\n      const delay3 = service['calculateDelay'](3, 1000, 10000, 'linear', false);\r\n\r\n      expect(delay1).toBe(1000);\r\n      expect(delay2).toBe(2000);\r\n      expect(delay3).toBe(3000);\r\n    });\r\n\r\n    it('should calculate exponential backoff', () => {\r\n      const delay1 = service['calculateDelay'](1, 1000, 10000, 'exponential', false);\r\n      const delay2 = service['calculateDelay'](2, 1000, 10000, 'exponential', false);\r\n      const delay3 = service['calculateDelay'](3, 1000, 10000, 'exponential', false);\r\n\r\n      expect(delay1).toBe(1000);\r\n      expect(delay2).toBe(2000);\r\n      expect(delay3).toBe(4000);\r\n    });\r\n\r\n    it('should calculate fixed backoff', () => {\r\n      const delay1 = service['calculateDelay'](1, 1000, 10000, 'fixed', false);\r\n      const delay2 = service['calculateDelay'](2, 1000, 10000, 'fixed', false);\r\n      const delay3 = service['calculateDelay'](3, 1000, 10000, 'fixed', false);\r\n\r\n      expect(delay1).toBe(1000);\r\n      expect(delay2).toBe(1000);\r\n      expect(delay3).toBe(1000);\r\n    });\r\n\r\n    it('should respect max delay', () => {\r\n      const delay = service['calculateDelay'](10, 1000, 5000, 'exponential', false);\r\n      expect(delay).toBe(5000);\r\n    });\r\n\r\n    it('should add jitter when enabled', () => {\r\n      const delay1 = service['calculateDelay'](2, 1000, 10000, 'exponential', true);\r\n      const delay2 = service['calculateDelay'](2, 1000, 10000, 'exponential', true);\r\n\r\n      // With jitter, delays should be different (with high probability)\r\n      // Base delay is 2000, jitter is Â±200, so range is 1800-2200\r\n      expect(delay1).toBeGreaterThanOrEqual(1800);\r\n      expect(delay1).toBeLessThanOrEqual(2200);\r\n      expect(delay2).toBeGreaterThanOrEqual(1800);\r\n      expect(delay2).toBeLessThanOrEqual(2200);\r\n    });\r\n  });\r\n\r\n  describe('error type detection', () => {\r\n    it('should detect network errors', () => {\r\n      const networkError = new Error('Connection refused');\r\n      (networkError as any).code = 'ECONNREFUSED';\r\n\r\n      expect(service['isNetworkError'](networkError)).toBe(true);\r\n    });\r\n\r\n    it('should detect timeout errors', () => {\r\n      const timeoutError = new Error('Operation timed out');\r\n      expect(service['isTimeoutError'](timeoutError)).toBe(true);\r\n    });\r\n\r\n    it('should detect database connection errors', () => {\r\n      const dbError = new Error('Connection terminated');\r\n      (dbError as any).code = 'P1001';\r\n\r\n      expect(service['isDatabaseConnectionError'](dbError)).toBe(true);\r\n    });\r\n\r\n    it('should detect server errors', () => {\r\n      const serverError = new Error('Internal server error');\r\n      (serverError as any).status = 500;\r\n\r\n      expect(service['isServerError'](serverError)).toBe(true);\r\n    });\r\n\r\n    it('should detect rate limit errors', () => {\r\n      const rateLimitError = new Error('Rate limit exceeded');\r\n      (rateLimitError as any).status = 429;\r\n\r\n      expect(service['isRateLimitError'](rateLimitError)).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('static retry options', () => {\r\n    it('should provide database retry options', () => {\r\n      const options = RetryService.databaseRetryOptions();\r\n\r\n      expect(options.maxRetries).toBe(3);\r\n      expect(options.backoffStrategy).toBe('exponential');\r\n      expect(options.jitter).toBe(true);\r\n      expect(options.retryCondition).toBeDefined();\r\n    });\r\n\r\n    it('should provide HTTP retry options', () => {\r\n      const options = RetryService.httpRetryOptions();\r\n\r\n      expect(options.maxRetries).toBe(3);\r\n      expect(options.backoffStrategy).toBe('exponential');\r\n      expect(options.jitter).toBe(true);\r\n      expect(options.retryCondition).toBeDefined();\r\n    });\r\n\r\n    it('should provide external API retry options', () => {\r\n      const options = RetryService.externalApiRetryOptions();\r\n\r\n      expect(options.maxRetries).toBe(5);\r\n      expect(options.timeout).toBe(30000);\r\n      expect(options.backoffStrategy).toBe('exponential');\r\n      expect(options.retryCondition).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe('logging', () => {\r\n    it('should log successful retry', async () => {\r\n      const mockOperation = jest.fn()\r\n        .mockRejectedValueOnce(new RetryableError('Failure'))\r\n        .mockResolvedValue('success');\r\n\r\n      await service.executeWithRetry(mockOperation, {\r\n        maxRetries: 1,\r\n        baseDelay: 10,\r\n      });\r\n\r\n      expect(mockLogger.info).toHaveBeenCalledWith(\r\n        'Operation succeeded after retries',\r\n        expect.objectContaining({\r\n          attempts: 2,\r\n          operation: 'mockConstructor',\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should log retry attempts', async () => {\r\n      const mockOperation = jest.fn()\r\n        .mockRejectedValueOnce(new RetryableError('Failure'))\r\n        .mockResolvedValue('success');\r\n\r\n      await service.executeWithRetry(mockOperation, {\r\n        maxRetries: 1,\r\n        baseDelay: 10,\r\n      });\r\n\r\n      expect(mockLogger.warn).toHaveBeenCalledWith(\r\n        expect.stringContaining('Operation failed, retrying'),\r\n        expect.objectContaining({\r\n          attempt: 1,\r\n          maxRetries: 1,\r\n          error: 'Failure',\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should log final failure', async () => {\r\n      const mockOperation = jest.fn().mockRejectedValue(new RetryableError('Always fails'));\r\n\r\n      await expect(\r\n        service.executeWithRetry(mockOperation, {\r\n          maxRetries: 1,\r\n          baseDelay: 10,\r\n        })\r\n      ).rejects.toThrow();\r\n\r\n      expect(mockLogger.error).toHaveBeenCalledWith(\r\n        'Operation failed after all retries',\r\n        expect.any(RetryableError),\r\n        expect.objectContaining({\r\n          attempts: 2,\r\n          maxRetries: 1,\r\n          finalError: 'Always fails',\r\n        })\r\n      );\r\n    });\r\n  });\r\n});"],"names":["describe","service","mockLogger","beforeEach","info","jest","fn","warn","error","module","Test","createTestingModule","providers","RetryService","provide","StructuredLoggerService","useValue","compile","get","clearAllMocks","it","expect","toBeDefined","mockOperation","mockResolvedValue","result","executeWithRetry","toBe","attempts","errors","toHaveLength","toHaveBeenCalledTimes","mockRejectedValueOnce","RetryableError","maxRetries","baseDelay","mockRejectedValue","NonRetryableError","rejects","toThrow","Error","customRetryCondition","mockReturnValue","retryCondition","toHaveBeenCalledWith","any","onRetry","Number","mockImplementation","Promise","resolve","setTimeout","timeout","originalFn","retryableFn","withRetry","networkError","name","code","shouldRetry","timeoutError","dbError","serverError","status","rateLimitError","clientError","delay1","delay2","delay3","delay","toBeGreaterThanOrEqual","toBeLessThanOrEqual","options","databaseRetryOptions","backoffStrategy","jitter","httpRetryOptions","externalApiRetryOptions","objectContaining","operation","stringContaining","attempt","finalError"],"mappings":"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"}