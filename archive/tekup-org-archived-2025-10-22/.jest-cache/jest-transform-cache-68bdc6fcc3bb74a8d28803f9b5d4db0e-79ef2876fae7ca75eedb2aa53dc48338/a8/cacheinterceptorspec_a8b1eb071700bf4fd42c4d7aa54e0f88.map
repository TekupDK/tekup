{"version":3,"sources":["C:\\Users\\empir\\Tekup-org\\apps\\flow-api\\src\\cache\\__tests__\\cache.interceptor.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { ExecutionContext, CallHandler } from '@nestjs/common';\r\nimport { of } from 'rxjs';\r\nimport { CacheInterceptor } from '../cache.interceptor.js';\r\nimport { CacheService } from '../cache.service.js';\r\n\r\ndescribe('CacheInterceptor', () => {\r\n  let interceptor: CacheInterceptor;\r\n  let cacheService: jest.Mocked<CacheService>;\r\n  let mockExecutionContext: jest.Mocked<ExecutionContext>;\r\n  let mockCallHandler: jest.Mocked<CallHandler>;\r\n  let mockRequest: any;\r\n  let mockResponse: any;\r\n\r\n  beforeEach(async () => {\r\n    const mockCacheService = {\r\n      get: jest.fn(),\r\n      set: jest.fn(),\r\n      invalidate: jest.fn(),\r\n    };\r\n\r\n    mockRequest = {\r\n      method: 'GET',\r\n      path: '/leads',\r\n      query: { status: 'new', limit: '10' },\r\n      tenantId: 'tenant-123',\r\n      get: jest.fn(),\r\n      id: 'req-123',\r\n    };\r\n\r\n    mockResponse = {\r\n      setHeader: jest.fn(),\r\n    };\r\n\r\n    mockExecutionContext = {\r\n      switchToHttp: jest.fn().mockReturnValue({\r\n        getRequest: () => mockRequest,\r\n        getResponse: () => mockResponse,\r\n      }),\r\n    } as any;\r\n\r\n    mockCallHandler = {\r\n      handle: jest.fn(),\r\n    } as any;\r\n\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        {\r\n          provide: CacheService,\r\n          useValue: mockCacheService,\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    cacheService = module.get<CacheService>(CacheService) as jest.Mocked<CacheService>;\r\n    interceptor = new CacheInterceptor(cacheService);\r\n  });\r\n\r\n  describe('intercept', () => {\r\n    it('should return cached result when cache hit', async () => {\r\n      const cachedData = { id: 1, name: 'cached' };\r\n      cacheService.get.mockResolvedValue(cachedData);\r\n      mockRequest.get.mockReturnValue('v1');\r\n\r\n      const result = await interceptor.intercept(mockExecutionContext, mockCallHandler);\r\n      const data = await result.toPromise();\r\n\r\n      expect(data).toEqual(cachedData);\r\n      expect(mockResponse.setHeader).toHaveBeenCalledWith('X-Cache', 'HIT');\r\n      expect(mockResponse.setHeader).toHaveBeenCalledWith('X-Request-ID', 'req-123');\r\n      expect(mockCallHandler.handle).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should execute handler and cache result on cache miss', async () => {\r\n      const handlerData = { id: 2, name: 'fresh' };\r\n      cacheService.get.mockResolvedValue(null);\r\n      mockCallHandler.handle.mockReturnValue(of(handlerData));\r\n      mockRequest.get.mockReturnValue('v1');\r\n\r\n      const result = await interceptor.intercept(mockExecutionContext, mockCallHandler);\r\n      const data = await result.toPromise();\r\n\r\n      expect(data).toEqual(handlerData);\r\n      expect(mockResponse.setHeader).toHaveBeenCalledWith('X-Cache', 'MISS');\r\n      expect(mockResponse.setHeader).toHaveBeenCalledWith('X-Request-ID', 'req-123');\r\n      expect(mockCallHandler.handle).toHaveBeenCalled();\r\n      expect(cacheService.set).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should skip caching for non-GET requests', async () => {\r\n      mockRequest.method = 'POST';\r\n\r\n      const result = await interceptor.intercept(mockExecutionContext, mockCallHandler);\r\n\r\n      expect(cacheService.get).not.toHaveBeenCalled();\r\n      expect(mockCallHandler.handle).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should skip caching when condition returns false', async () => {\r\n      const interceptorWithCondition = new CacheInterceptor(cacheService, {\r\n        condition: () => false,\r\n      });\r\n\r\n      const result = await interceptorWithCondition.intercept(mockExecutionContext, mockCallHandler);\r\n\r\n      expect(cacheService.get).not.toHaveBeenCalled();\r\n      expect(mockCallHandler.handle).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should use custom key generator when provided', async () => {\r\n      const customKey = 'custom-cache-key';\r\n      const interceptorWithKeyGen = new CacheInterceptor(cacheService, {\r\n        keyGenerator: () => customKey,\r\n      });\r\n\r\n      cacheService.get.mockResolvedValue(null);\r\n      mockCallHandler.handle.mockReturnValue(of({}));\r\n\r\n      await interceptorWithKeyGen.intercept(mockExecutionContext, mockCallHandler);\r\n\r\n      expect(cacheService.get).toHaveBeenCalledWith(customKey);\r\n    });\r\n\r\n    it('should use enhanced cache key generation with API version', async () => {\r\n      cacheService.get.mockResolvedValue(null);\r\n      mockCallHandler.handle.mockReturnValue(of({}));\r\n      mockRequest.get.mockReturnValue('v2');\r\n\r\n      await interceptor.intercept(mockExecutionContext, mockCallHandler);\r\n\r\n      const expectedKey = 'v2:tenant-123:GET:/leads?limit=10&status=new';\r\n      expect(cacheService.get).toHaveBeenCalledWith(expectedKey);\r\n    });\r\n\r\n    it('should handle cache service errors gracefully', async () => {\r\n      cacheService.get.mockRejectedValue(new Error('Cache error'));\r\n      mockCallHandler.handle.mockReturnValue(of({ data: 'test' }));\r\n\r\n      const result = await interceptor.intercept(mockExecutionContext, mockCallHandler);\r\n      const data = await result.toPromise();\r\n\r\n      expect(data).toEqual({ data: 'test' });\r\n      expect(mockCallHandler.handle).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should handle cache set errors gracefully', async () => {\r\n      cacheService.get.mockResolvedValue(null);\r\n      cacheService.set.mockRejectedValue(new Error('Cache set error'));\r\n      mockCallHandler.handle.mockReturnValue(of({ data: 'test' }));\r\n\r\n      const result = await interceptor.intercept(mockExecutionContext, mockCallHandler);\r\n      const data = await result.toPromise();\r\n\r\n      expect(data).toEqual({ data: 'test' });\r\n      expect(mockCallHandler.handle).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should set cache headers correctly', async () => {\r\n      const cacheKey = 'tenant-123:/leads?limit=10&status=new';\r\n      cacheService.get.mockResolvedValue({ cached: true });\r\n\r\n      await interceptor.intercept(mockExecutionContext, mockCallHandler);\r\n\r\n      expect(mockResponse.setHeader).toHaveBeenCalledWith('X-Cache', 'HIT');\r\n      expect(mockResponse.setHeader).toHaveBeenCalledWith('X-Cache-Key', cacheKey);\r\n    });\r\n\r\n    it('should handle requests without tenant ID', async () => {\r\n      mockRequest.tenantId = undefined;\r\n      cacheService.get.mockResolvedValue(null);\r\n      mockCallHandler.handle.mockReturnValue(of({}));\r\n      mockRequest.get.mockReturnValue('v1');\r\n\r\n      await interceptor.intercept(mockExecutionContext, mockCallHandler);\r\n\r\n      const expectedKey = 'v1:unknown:GET:/leads?limit=10&status=new';\r\n      expect(cacheService.get).toHaveBeenCalledWith(expectedKey);\r\n    });\r\n\r\n    it('should handle requests without query parameters', async () => {\r\n      mockRequest.query = {};\r\n      cacheService.get.mockResolvedValue(null);\r\n      mockCallHandler.handle.mockReturnValue(of({}));\r\n      mockRequest.get.mockReturnValue('v1');\r\n\r\n      await interceptor.intercept(mockExecutionContext, mockCallHandler);\r\n\r\n      const expectedKey = 'v1:tenant-123:GET:/leads';\r\n      expect(cacheService.get).toHaveBeenCalledWith(expectedKey);\r\n    });\r\n  });\r\n\r\n  describe('performance metrics', () => {\r\n    it('should track cache hits and misses correctly', async () => {\r\n      // Test cache hit\r\n      cacheService.get.mockResolvedValue({ data: 'hit' });\r\n      mockRequest.get.mockReturnValue('v1');\r\n      await interceptor.intercept(mockExecutionContext, mockCallHandler);\r\n\r\n      // Test cache miss\r\n      cacheService.get.mockResolvedValue(null);\r\n      mockCallHandler.handle.mockReturnValue(of({ data: 'miss' }));\r\n      await interceptor.intercept(mockExecutionContext, mockCallHandler);\r\n\r\n      const metrics = interceptor.getPerformanceMetrics();\r\n      expect(metrics.cacheHits).toBe(1);\r\n      expect(metrics.cacheMisses).toBe(1);\r\n      expect(metrics.hitRate).toBe(50);\r\n      expect(metrics.totalRequests).toBe(2);\r\n    });\r\n\r\n    it('should track cache errors', async () => {\r\n      cacheService.get.mockRejectedValue(new Error('Cache error'));\r\n      mockCallHandler.handle.mockReturnValue(of({ data: 'test' }));\r\n      mockRequest.get.mockReturnValue('v1');\r\n\r\n      await interceptor.intercept(mockExecutionContext, mockCallHandler);\r\n\r\n      const metrics = interceptor.getPerformanceMetrics();\r\n      expect(metrics.cacheErrors).toBe(1);\r\n    });\r\n  });\r\n\r\n  describe('cache strategy determination', () => {\r\n    it('should use appropriate TTL for settings endpoints', async () => {\r\n      mockRequest.path = '/settings';\r\n      cacheService.get.mockResolvedValue(null);\r\n      mockCallHandler.handle.mockReturnValue(of({ setting: 'value' }));\r\n      mockRequest.get.mockReturnValue('v1');\r\n\r\n      await interceptor.intercept(mockExecutionContext, mockCallHandler);\r\n\r\n      expect(cacheService.set).toHaveBeenCalledWith(\r\n        expect.any(String),\r\n        expect.any(Object),\r\n        expect.objectContaining({\r\n          ttl: 900, // 15 minutes for settings\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should add appropriate tags for different endpoints', async () => {\r\n      mockRequest.path = '/leads';\r\n      cacheService.get.mockResolvedValue(null);\r\n      mockCallHandler.handle.mockReturnValue(of([{ id: '1' }]));\r\n      mockRequest.get.mockReturnValue('v1');\r\n\r\n      await interceptor.intercept(mockExecutionContext, mockCallHandler);\r\n\r\n      expect(cacheService.set).toHaveBeenCalledWith(\r\n        expect.any(String),\r\n        expect.any(Object),\r\n        expect.objectContaining({\r\n          tags: ['tenant:tenant-123', 'leads'],\r\n        })\r\n      );\r\n    });\r\n  });\r\n});"],"names":["describe","interceptor","cacheService","mockExecutionContext","mockCallHandler","mockRequest","mockResponse","beforeEach","mockCacheService","get","jest","fn","set","invalidate","method","path","query","status","limit","tenantId","id","setHeader","switchToHttp","mockReturnValue","getRequest","getResponse","handle","module","Test","createTestingModule","providers","provide","CacheService","useValue","compile","CacheInterceptor","it","cachedData","name","mockResolvedValue","result","intercept","data","toPromise","expect","toEqual","toHaveBeenCalledWith","not","toHaveBeenCalled","handlerData","of","interceptorWithCondition","condition","customKey","interceptorWithKeyGen","keyGenerator","expectedKey","mockRejectedValue","Error","cacheKey","cached","undefined","metrics","getPerformanceMetrics","cacheHits","toBe","cacheMisses","hitRate","totalRequests","cacheErrors","setting","any","String","Object","objectContaining","ttl","tags"],"mappings":"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"}