{"version":3,"sources":["C:\\Users\\empir\\Tekup-org\\apps\\flow-api\\src\\common\\pagination\\__tests__\\pagination.integration.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { PaginationService } from '../pagination.service.js';\r\nimport { PrismaService } from '../../../prisma/prisma.service.js';\r\n\r\ndescribe('PaginationService Integration', () => {\r\n  let service: PaginationService;\r\n  let prismaService: jest.Mocked<PrismaService>;\r\n\r\n  const mockLeadModel = {\r\n    count: jest.fn(),\r\n    findMany: jest.fn(),\r\n  };\r\n\r\n  beforeEach(async () => {\r\n    const mockPrismaService = {\r\n      lead: mockLeadModel,\r\n    };\r\n\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        PaginationService,\r\n        { provide: PrismaService, useValue: mockPrismaService },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<PaginationService>(PaginationService);\r\n    prismaService = module.get(PrismaService);\r\n  });\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('Lead pagination integration', () => {\r\n    it('should paginate leads with filters', async () => {\r\n      const mockLeads = [\r\n        { id: '1', tenantId: 'tenant1', status: 'new', createdAt: new Date() },\r\n        { id: '2', tenantId: 'tenant1', status: 'new', createdAt: new Date() },\r\n      ];\r\n\r\n      mockLeadModel.count.mockResolvedValue(10);\r\n      mockLeadModel.findMany.mockResolvedValue(mockLeads);\r\n\r\n      const result = await service.paginate(mockLeadModel, {\r\n        page: 1,\r\n        limit: 20,\r\n        sortBy: 'createdAt',\r\n        sortOrder: 'desc',\r\n        where: {\r\n          tenantId: 'tenant1',\r\n          status: 'new',\r\n        },\r\n        include: {\r\n          events: {\r\n            orderBy: { createdAt: 'desc' },\r\n            take: 5,\r\n          },\r\n        },\r\n      });\r\n\r\n      expect(result.data).toEqual(mockLeads);\r\n      expect(result.pagination.total).toBe(10);\r\n      expect(mockLeadModel.findMany).toHaveBeenCalledWith({\r\n        where: {\r\n          tenantId: 'tenant1',\r\n          status: 'new',\r\n        },\r\n        include: {\r\n          events: {\r\n            orderBy: { createdAt: 'desc' },\r\n            take: 5,\r\n          },\r\n        },\r\n        skip: 0,\r\n        take: 20,\r\n        orderBy: { createdAt: 'desc' },\r\n      });\r\n    });\r\n\r\n    it('should handle cursor pagination for large datasets', async () => {\r\n      const mockLeads = [\r\n        { id: '3', tenantId: 'tenant1', createdAt: new Date('2023-01-03') },\r\n        { id: '2', tenantId: 'tenant1', createdAt: new Date('2023-01-02') },\r\n      ];\r\n\r\n      mockLeadModel.findMany.mockResolvedValue([...mockLeads, { id: '1' }]); // Extra item to indicate hasNext\r\n\r\n      const result = await service.paginateWithCursor(mockLeadModel, {\r\n        limit: 2,\r\n        sortBy: 'createdAt',\r\n        sortOrder: 'desc',\r\n        where: {\r\n          tenantId: 'tenant1',\r\n        },\r\n      });\r\n\r\n      expect(result.data).toHaveLength(2);\r\n      expect(result.pagination.hasNext).toBe(true);\r\n      expect(result.pagination.nextCursor).toBeDefined();\r\n    });\r\n\r\n    it('should handle hybrid pagination switching between modes', async () => {\r\n      const mockLeads = [\r\n        { id: '1', tenantId: 'tenant1', createdAt: new Date() },\r\n        { id: '2', tenantId: 'tenant1', createdAt: new Date() },\r\n      ];\r\n\r\n      // First call without cursor (offset mode)\r\n      mockLeadModel.count.mockResolvedValue(25);\r\n      mockLeadModel.findMany.mockResolvedValue(mockLeads);\r\n\r\n      const offsetResult = await service.paginateHybrid(mockLeadModel, {\r\n        page: 1,\r\n        limit: 20,\r\n        sortBy: 'createdAt',\r\n        where: { tenantId: 'tenant1' },\r\n      });\r\n\r\n      expect(offsetResult.data).toEqual(mockLeads);\r\n      expect(offsetResult.pagination.hasNext).toBe(true);\r\n      expect(offsetResult.totalCount).toBe(25);\r\n\r\n      // Second call with cursor (cursor mode)\r\n      const cursor = service['encodeCursor'](new Date());\r\n      mockLeadModel.findMany.mockResolvedValue(mockLeads);\r\n\r\n      const cursorResult = await service.paginateHybrid(mockLeadModel, {\r\n        cursor,\r\n        limit: 20,\r\n        sortBy: 'createdAt',\r\n        where: { tenantId: 'tenant1' },\r\n      });\r\n\r\n      expect(cursorResult.data).toEqual(mockLeads);\r\n      expect(cursorResult.pagination.hasPrevious).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('Performance considerations', () => {\r\n    it('should execute count and findMany in parallel for offset pagination', async () => {\r\n      const mockLeads = [{ id: '1' }];\r\n      \r\n      mockLeadModel.count.mockResolvedValue(1);\r\n      mockLeadModel.findMany.mockResolvedValue(mockLeads);\r\n\r\n      await service.paginate(mockLeadModel, {\r\n        page: 1,\r\n        limit: 20,\r\n      });\r\n\r\n      // Both should be called\r\n      expect(mockLeadModel.count).toHaveBeenCalledTimes(1);\r\n      expect(mockLeadModel.findMany).toHaveBeenCalledTimes(1);\r\n    });\r\n\r\n    it('should avoid count query for cursor pagination', async () => {\r\n      const mockLeads = [{ id: '1' }];\r\n      \r\n      mockLeadModel.findMany.mockResolvedValue(mockLeads);\r\n\r\n      await service.paginateWithCursor(mockLeadModel, {\r\n        limit: 20,\r\n        sortBy: 'id',\r\n      });\r\n\r\n      // Only findMany should be called, not count\r\n      expect(mockLeadModel.count).not.toHaveBeenCalled();\r\n      expect(mockLeadModel.findMany).toHaveBeenCalledTimes(1);\r\n    });\r\n  });\r\n});"],"names":["describe","service","prismaService","mockLeadModel","count","jest","fn","findMany","beforeEach","mockPrismaService","lead","module","Test","createTestingModule","providers","PaginationService","provide","PrismaService","useValue","compile","get","clearAllMocks","it","mockLeads","id","tenantId","status","createdAt","Date","mockResolvedValue","result","paginate","page","limit","sortBy","sortOrder","where","include","events","orderBy","take","expect","data","toEqual","pagination","total","toBe","toHaveBeenCalledWith","skip","paginateWithCursor","toHaveLength","hasNext","nextCursor","toBeDefined","offsetResult","paginateHybrid","totalCount","cursor","cursorResult","hasPrevious","toHaveBeenCalledTimes","not","toHaveBeenCalled"],"mappings":"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"}