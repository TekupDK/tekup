{"version":3,"sources":["C:\\Users\\empir\\Tekup-org\\apps\\flow-api\\src\\common\\exceptions\\custom-exceptions.ts"],"sourcesContent":["import { HttpException, HttpStatus } from '@nestjs/common';\r\n\r\nexport enum ErrorCategory {\r\n  BUSINESS_LOGIC = 'business_logic',\r\n  VALIDATION = 'validation',\r\n  AUTHENTICATION = 'authentication',\r\n  AUTHORIZATION = 'authorization',\r\n  RATE_LIMITING = 'rate_limiting',\r\n  EXTERNAL_SERVICE = 'external_service',\r\n  DATABASE = 'database',\r\n  CACHE = 'cache',\r\n  NETWORK = 'network',\r\n  SYSTEM = 'system',\r\n  CONFIGURATION = 'configuration',\r\n}\r\n\r\nexport enum ErrorSeverity {\r\n  LOW = 'low',\r\n  MEDIUM = 'medium',\r\n  HIGH = 'high',\r\n  CRITICAL = 'critical',\r\n}\r\n\r\nexport interface ErrorDetails {\r\n  code: string;\r\n  category: ErrorCategory;\r\n  severity: ErrorSeverity;\r\n  retryable: boolean;\r\n  retryAfter?: number;\r\n  maxRetries?: number;\r\n  correlationId?: string;\r\n  requestId?: string;\r\n  tenantId?: string;\r\n  timestamp: Date;\r\n  context?: Record<string, any>;\r\n  userMessage?: string;\r\n  technicalMessage?: string;\r\n  suggestions?: string[];\r\n  supportReference?: string;\r\n}\r\n\r\nexport class BaseCustomException extends HttpException {\r\n  public readonly details: ErrorDetails;\r\n\r\n  constructor(\r\n    message: string,\r\n    status: HttpStatus,\r\n    details: Partial<ErrorDetails> & Pick<ErrorDetails, 'code' | 'category'>\r\n  ) {\r\n    super(message, status);\r\n    \r\n    this.details = {\r\n      ...details,\r\n      severity: details.severity || ErrorSeverity.MEDIUM,\r\n      retryable: details.retryable ?? false,\r\n      timestamp: new Date(),\r\n      technicalMessage: message,\r\n      userMessage: details.userMessage || this.generateUserMessage(details.category),\r\n    };\r\n  }\r\n\r\n  private generateUserMessage(category: ErrorCategory): string {\r\n    switch (category) {\r\n      case ErrorCategory.BUSINESS_LOGIC:\r\n        return 'A business rule prevented this operation from completing.';\r\n      case ErrorCategory.VALIDATION:\r\n        return 'The provided data is invalid. Please check your input and try again.';\r\n      case ErrorCategory.AUTHENTICATION:\r\n        return 'Authentication failed. Please check your credentials.';\r\n      case ErrorCategory.AUTHORIZATION:\r\n        return 'You do not have permission to perform this action.';\r\n      case ErrorCategory.RATE_LIMITING:\r\n        return 'Too many requests. Please wait before trying again.';\r\n      case ErrorCategory.EXTERNAL_SERVICE:\r\n        return 'An external service is temporarily unavailable. Please try again later.';\r\n      case ErrorCategory.DATABASE:\r\n        return 'A database error occurred. Please try again later.';\r\n      case ErrorCategory.CACHE:\r\n        return 'A caching error occurred. The operation may be slower than usual.';\r\n      case ErrorCategory.NETWORK:\r\n        return 'A network error occurred. Please check your connection and try again.';\r\n      case ErrorCategory.SYSTEM:\r\n        return 'A system error occurred. Please try again later.';\r\n      case ErrorCategory.CONFIGURATION:\r\n        return 'A configuration error was detected. Please contact support.';\r\n      default:\r\n        return 'An unexpected error occurred. Please try again later.';\r\n    }\r\n  }\r\n}\r\n\r\n// Business Logic Exceptions\r\nexport class BusinessLogicException extends BaseCustomException {\r\n  constructor(message: string, code: string, context?: Record<string, any>) {\r\n    super(message, HttpStatus.UNPROCESSABLE_ENTITY, {\r\n      code,\r\n      category: ErrorCategory.BUSINESS_LOGIC,\r\n      severity: ErrorSeverity.LOW,\r\n      retryable: false,\r\n      context,\r\n    });\r\n  }\r\n}\r\n\r\nexport class ValidationException extends BaseCustomException {\r\n  constructor(message: string, errors: Record<string, string[]>, context?: Record<string, any>) {\r\n    super(message, HttpStatus.BAD_REQUEST, {\r\n      code: 'VALIDATION_ERROR',\r\n      category: ErrorCategory.VALIDATION,\r\n      severity: ErrorSeverity.LOW,\r\n      retryable: false,\r\n      context: { ...context, validationErrors: errors },\r\n      suggestions: ['Please check the provided data and correct any validation errors.'],\r\n    });\r\n  }\r\n}\r\n\r\n// Authentication & Authorization Exceptions\r\nexport class AuthenticationException extends BaseCustomException {\r\n  constructor(message: string = 'Authentication failed', code: string = 'AUTH_FAILED') {\r\n    super(message, HttpStatus.UNAUTHORIZED, {\r\n      code,\r\n      category: ErrorCategory.AUTHENTICATION,\r\n      severity: ErrorSeverity.MEDIUM,\r\n      retryable: false,\r\n      suggestions: ['Please check your API key or authentication credentials.'],\r\n    });\r\n  }\r\n}\r\n\r\nexport class AuthorizationException extends BaseCustomException {\r\n  constructor(message: string = 'Access denied', requiredPermission?: string) {\r\n    super(message, HttpStatus.FORBIDDEN, {\r\n      code: 'ACCESS_DENIED',\r\n      category: ErrorCategory.AUTHORIZATION,\r\n      severity: ErrorSeverity.MEDIUM,\r\n      retryable: false,\r\n      context: requiredPermission ? { requiredPermission } : undefined,\r\n      suggestions: ['Please contact your administrator to request the necessary permissions.'],\r\n    });\r\n  }\r\n}\r\n\r\n// Rate Limiting Exception\r\nexport class RateLimitException extends BaseCustomException {\r\n  constructor(retryAfter: number, limit: number, window: number) {\r\n    super('Rate limit exceeded', HttpStatus.TOO_MANY_REQUESTS, {\r\n      code: 'RATE_LIMIT_EXCEEDED',\r\n      category: ErrorCategory.RATE_LIMITING,\r\n      severity: ErrorSeverity.MEDIUM,\r\n      retryable: true,\r\n      retryAfter,\r\n      context: { limit, window },\r\n      suggestions: [`Please wait ${retryAfter} seconds before making another request.`],\r\n    });\r\n  }\r\n}\r\n\r\n// External Service Exceptions\r\nexport class ExternalServiceException extends BaseCustomException {\r\n  constructor(\r\n    serviceName: string,\r\n    message: string = 'External service unavailable',\r\n    retryable: boolean = true\r\n  ) {\r\n    super(message, HttpStatus.BAD_GATEWAY, {\r\n      code: 'EXTERNAL_SERVICE_ERROR',\r\n      category: ErrorCategory.EXTERNAL_SERVICE,\r\n      severity: ErrorSeverity.HIGH,\r\n      retryable,\r\n      retryAfter: retryable ? 30 : undefined,\r\n      maxRetries: retryable ? 3 : undefined,\r\n      context: { serviceName },\r\n      suggestions: retryable \r\n        ? ['The service will retry automatically. Please wait a moment.']\r\n        : ['Please contact support if this problem persists.'],\r\n    });\r\n  }\r\n}\r\n\r\n// Database Exceptions\r\nexport class DatabaseException extends BaseCustomException {\r\n  constructor(\r\n    operation: string,\r\n    originalError?: Error,\r\n    retryable: boolean = true\r\n  ) {\r\n    super(`Database error during ${operation}`, HttpStatus.INTERNAL_SERVER_ERROR, {\r\n      code: 'DATABASE_ERROR',\r\n      category: ErrorCategory.DATABASE,\r\n      severity: ErrorSeverity.HIGH,\r\n      retryable,\r\n      retryAfter: retryable ? 5 : undefined,\r\n      maxRetries: retryable ? 3 : undefined,\r\n      context: { \r\n        operation,\r\n        originalError: originalError?.message,\r\n      },\r\n      suggestions: retryable\r\n        ? ['The operation will be retried automatically.']\r\n        : ['Please contact support if this problem persists.'],\r\n    });\r\n  }\r\n}\r\n\r\n// Cache Exceptions\r\nexport class CacheException extends BaseCustomException {\r\n  constructor(operation: string, originalError?: Error) {\r\n    super(`Cache error during ${operation}`, HttpStatus.INTERNAL_SERVER_ERROR, {\r\n      code: 'CACHE_ERROR',\r\n      category: ErrorCategory.CACHE,\r\n      severity: ErrorSeverity.MEDIUM,\r\n      retryable: true,\r\n      retryAfter: 1,\r\n      maxRetries: 2,\r\n      context: { \r\n        operation,\r\n        originalError: originalError?.message,\r\n      },\r\n      suggestions: ['The system will continue to function but may be slower than usual.'],\r\n    });\r\n  }\r\n}\r\n\r\n// Network Exceptions\r\nexport class NetworkException extends BaseCustomException {\r\n  constructor(message: string = 'Network error occurred', timeout?: number) {\r\n    super(message, HttpStatus.REQUEST_TIMEOUT, {\r\n      code: 'NETWORK_ERROR',\r\n      category: ErrorCategory.NETWORK,\r\n      severity: ErrorSeverity.MEDIUM,\r\n      retryable: true,\r\n      retryAfter: 5,\r\n      maxRetries: 3,\r\n      context: timeout ? { timeout } : undefined,\r\n      suggestions: ['Please check your network connection and try again.'],\r\n    });\r\n  }\r\n}\r\n\r\n// System Exceptions\r\nexport class SystemException extends BaseCustomException {\r\n  constructor(message: string, code: string = 'SYSTEM_ERROR', context?: Record<string, any>) {\r\n    const supportRef = `SUP-${Date.now()}-${Math.random().toString(36).substr(2, 8).toUpperCase()}`;\r\n    super(message, HttpStatus.INTERNAL_SERVER_ERROR, {\r\n      code,\r\n      category: ErrorCategory.SYSTEM,\r\n      severity: ErrorSeverity.CRITICAL,\r\n      retryable: false,\r\n      context,\r\n      supportReference: supportRef,\r\n      suggestions: ['Please contact support with the provided reference number.'],\r\n    });\r\n  }\r\n\r\n  // generateSupportReference removed (inlined to avoid using this before super)\r\n}\r\n\r\n// Configuration Exception\r\nexport class ConfigurationException extends BaseCustomException {\r\n  constructor(configKey: string, expectedType?: string) {\r\n    super(`Configuration error: ${configKey}`, HttpStatus.INTERNAL_SERVER_ERROR, {\r\n      code: 'CONFIGURATION_ERROR',\r\n      category: ErrorCategory.CONFIGURATION,\r\n      severity: ErrorSeverity.CRITICAL,\r\n      retryable: false,\r\n      context: { configKey, expectedType },\r\n      supportReference: `CFG-${Date.now()}`,\r\n      suggestions: ['Please contact your system administrator.'],\r\n    });\r\n  }\r\n}\r\n\r\n// Tenant-specific exceptions\r\nexport class TenantNotFoundException extends BaseCustomException {\r\n  constructor(tenantId: string) {\r\n    super(`Tenant not found: ${tenantId}`, HttpStatus.NOT_FOUND, {\r\n      code: 'TENANT_NOT_FOUND',\r\n      category: ErrorCategory.BUSINESS_LOGIC,\r\n      severity: ErrorSeverity.MEDIUM,\r\n      retryable: false,\r\n      context: { tenantId },\r\n      suggestions: ['Please check the tenant ID and try again.'],\r\n    });\r\n  }\r\n}\r\n\r\nexport class LeadNotFoundException extends BaseCustomException {\r\n  constructor(leadId: string, tenantId?: string) {\r\n    super(`Lead not found: ${leadId}`, HttpStatus.NOT_FOUND, {\r\n      code: 'LEAD_NOT_FOUND',\r\n      category: ErrorCategory.BUSINESS_LOGIC,\r\n      severity: ErrorSeverity.LOW,\r\n      retryable: false,\r\n      context: { leadId, tenantId },\r\n      suggestions: ['Please check the lead ID and try again.'],\r\n    });\r\n  }\r\n}\r\n\r\n// Helper function to determine if an error is retryable\r\nexport function isRetryableError(error: any): boolean {\r\n  if (error instanceof BaseCustomException) {\r\n    return error.details.retryable;\r\n  }\r\n\r\n  // Database connection errors\r\n  if (error.code === 'ECONNREFUSED' || error.code === 'ENOTFOUND') {\r\n    return true;\r\n  }\r\n\r\n  // Timeout errors\r\n  if (error.code === 'ETIMEDOUT' || error.name === 'TimeoutError') {\r\n    return true;\r\n  }\r\n\r\n  // HTTP 5xx errors (except 501)\r\n  if (error.status >= 500 && error.status !== 501) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n// Helper function to get retry delay\r\nexport function getRetryDelay(error: any, attempt: number): number {\r\n  if (error instanceof BaseCustomException && error.details.retryAfter) {\r\n    return error.details.retryAfter * 1000; // Convert to milliseconds\r\n  }\r\n\r\n  // Exponential backoff with jitter\r\n  const baseDelay = Math.min(1000 * Math.pow(2, attempt), 30000); // Max 30 seconds\r\n  const jitter = Math.random() * 0.1 * baseDelay; // 10% jitter\r\n  return baseDelay + jitter;\r\n}\r\n\r\n// Helper function to get max retries\r\nexport function getMaxRetries(error: any): number {\r\n  if (error instanceof BaseCustomException && error.details.maxRetries) {\r\n    return error.details.maxRetries;\r\n  }\r\n\r\n  // Default retry counts based on error type\r\n  if (error.code === 'ECONNREFUSED') return 3;\r\n  if (error.code === 'ETIMEDOUT') return 2;\r\n  if (error.status >= 500) return 3;\r\n\r\n  return 0; // No retries by default\r\n}"],"names":["AuthenticationException","AuthorizationException","BaseCustomException","BusinessLogicException","CacheException","ConfigurationException","DatabaseException","ErrorCategory","ErrorSeverity","ExternalServiceException","LeadNotFoundException","NetworkException","RateLimitException","SystemException","TenantNotFoundException","ValidationException","getMaxRetries","getRetryDelay","isRetryableError","HttpException","generateUserMessage","category","message","status","details","severity","retryable","timestamp","Date","technicalMessage","userMessage","code","context","HttpStatus","UNPROCESSABLE_ENTITY","errors","BAD_REQUEST","validationErrors","suggestions","UNAUTHORIZED","requiredPermission","FORBIDDEN","undefined","retryAfter","limit","window","TOO_MANY_REQUESTS","serviceName","BAD_GATEWAY","maxRetries","operation","originalError","INTERNAL_SERVER_ERROR","timeout","REQUEST_TIMEOUT","supportRef","now","Math","random","toString","substr","toUpperCase","supportReference","configKey","expectedType","tenantId","NOT_FOUND","leadId","error","name","attempt","baseDelay","min","pow","jitter"],"mappings":"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"}