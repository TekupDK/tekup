4b82d1acfd833e7bbe50fe19b933181a
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get AuthenticationException () {
        return AuthenticationException;
    },
    get AuthorizationException () {
        return AuthorizationException;
    },
    get BaseCustomException () {
        return BaseCustomException;
    },
    get BusinessLogicException () {
        return BusinessLogicException;
    },
    get CacheException () {
        return CacheException;
    },
    get ConfigurationException () {
        return ConfigurationException;
    },
    get DatabaseException () {
        return DatabaseException;
    },
    get ErrorCategory () {
        return ErrorCategory;
    },
    get ErrorSeverity () {
        return ErrorSeverity;
    },
    get ExternalServiceException () {
        return ExternalServiceException;
    },
    get LeadNotFoundException () {
        return LeadNotFoundException;
    },
    get NetworkException () {
        return NetworkException;
    },
    get RateLimitException () {
        return RateLimitException;
    },
    get SystemException () {
        return SystemException;
    },
    get TenantNotFoundException () {
        return TenantNotFoundException;
    },
    get ValidationException () {
        return ValidationException;
    },
    get getMaxRetries () {
        return getMaxRetries;
    },
    get getRetryDelay () {
        return getRetryDelay;
    },
    get isRetryableError () {
        return isRetryableError;
    }
});
const _common = require("@nestjs/common");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
var ErrorCategory = /*#__PURE__*/ function(ErrorCategory) {
    ErrorCategory["BUSINESS_LOGIC"] = "business_logic";
    ErrorCategory["VALIDATION"] = "validation";
    ErrorCategory["AUTHENTICATION"] = "authentication";
    ErrorCategory["AUTHORIZATION"] = "authorization";
    ErrorCategory["RATE_LIMITING"] = "rate_limiting";
    ErrorCategory["EXTERNAL_SERVICE"] = "external_service";
    ErrorCategory["DATABASE"] = "database";
    ErrorCategory["CACHE"] = "cache";
    ErrorCategory["NETWORK"] = "network";
    ErrorCategory["SYSTEM"] = "system";
    ErrorCategory["CONFIGURATION"] = "configuration";
    return ErrorCategory;
}({});
var ErrorSeverity = /*#__PURE__*/ function(ErrorSeverity) {
    ErrorSeverity["LOW"] = "low";
    ErrorSeverity["MEDIUM"] = "medium";
    ErrorSeverity["HIGH"] = "high";
    ErrorSeverity["CRITICAL"] = "critical";
    return ErrorSeverity;
}({});
class BaseCustomException extends _common.HttpException {
    generateUserMessage(category) {
        switch(category){
            case "business_logic":
                return 'A business rule prevented this operation from completing.';
            case "validation":
                return 'The provided data is invalid. Please check your input and try again.';
            case "authentication":
                return 'Authentication failed. Please check your credentials.';
            case "authorization":
                return 'You do not have permission to perform this action.';
            case "rate_limiting":
                return 'Too many requests. Please wait before trying again.';
            case "external_service":
                return 'An external service is temporarily unavailable. Please try again later.';
            case "database":
                return 'A database error occurred. Please try again later.';
            case "cache":
                return 'A caching error occurred. The operation may be slower than usual.';
            case "network":
                return 'A network error occurred. Please check your connection and try again.';
            case "system":
                return 'A system error occurred. Please try again later.';
            case "configuration":
                return 'A configuration error was detected. Please contact support.';
            default:
                return 'An unexpected error occurred. Please try again later.';
        }
    }
    constructor(message, status, details){
        super(message, status), _define_property(this, "details", void 0);
        this.details = {
            ...details,
            severity: details.severity || "medium",
            retryable: details.retryable ?? false,
            timestamp: new Date(),
            technicalMessage: message,
            userMessage: details.userMessage || this.generateUserMessage(details.category)
        };
    }
}
class BusinessLogicException extends BaseCustomException {
    constructor(message, code, context){
        super(message, _common.HttpStatus.UNPROCESSABLE_ENTITY, {
            code,
            category: "business_logic",
            severity: "low",
            retryable: false,
            context
        });
    }
}
class ValidationException extends BaseCustomException {
    constructor(message, errors, context){
        super(message, _common.HttpStatus.BAD_REQUEST, {
            code: 'VALIDATION_ERROR',
            category: "validation",
            severity: "low",
            retryable: false,
            context: {
                ...context,
                validationErrors: errors
            },
            suggestions: [
                'Please check the provided data and correct any validation errors.'
            ]
        });
    }
}
class AuthenticationException extends BaseCustomException {
    constructor(message = 'Authentication failed', code = 'AUTH_FAILED'){
        super(message, _common.HttpStatus.UNAUTHORIZED, {
            code,
            category: "authentication",
            severity: "medium",
            retryable: false,
            suggestions: [
                'Please check your API key or authentication credentials.'
            ]
        });
    }
}
class AuthorizationException extends BaseCustomException {
    constructor(message = 'Access denied', requiredPermission){
        super(message, _common.HttpStatus.FORBIDDEN, {
            code: 'ACCESS_DENIED',
            category: "authorization",
            severity: "medium",
            retryable: false,
            context: requiredPermission ? {
                requiredPermission
            } : undefined,
            suggestions: [
                'Please contact your administrator to request the necessary permissions.'
            ]
        });
    }
}
class RateLimitException extends BaseCustomException {
    constructor(retryAfter, limit, window){
        super('Rate limit exceeded', _common.HttpStatus.TOO_MANY_REQUESTS, {
            code: 'RATE_LIMIT_EXCEEDED',
            category: "rate_limiting",
            severity: "medium",
            retryable: true,
            retryAfter,
            context: {
                limit,
                window
            },
            suggestions: [
                `Please wait ${retryAfter} seconds before making another request.`
            ]
        });
    }
}
class ExternalServiceException extends BaseCustomException {
    constructor(serviceName, message = 'External service unavailable', retryable = true){
        super(message, _common.HttpStatus.BAD_GATEWAY, {
            code: 'EXTERNAL_SERVICE_ERROR',
            category: "external_service",
            severity: "high",
            retryable,
            retryAfter: retryable ? 30 : undefined,
            maxRetries: retryable ? 3 : undefined,
            context: {
                serviceName
            },
            suggestions: retryable ? [
                'The service will retry automatically. Please wait a moment.'
            ] : [
                'Please contact support if this problem persists.'
            ]
        });
    }
}
class DatabaseException extends BaseCustomException {
    constructor(operation, originalError, retryable = true){
        super(`Database error during ${operation}`, _common.HttpStatus.INTERNAL_SERVER_ERROR, {
            code: 'DATABASE_ERROR',
            category: "database",
            severity: "high",
            retryable,
            retryAfter: retryable ? 5 : undefined,
            maxRetries: retryable ? 3 : undefined,
            context: {
                operation,
                originalError: originalError?.message
            },
            suggestions: retryable ? [
                'The operation will be retried automatically.'
            ] : [
                'Please contact support if this problem persists.'
            ]
        });
    }
}
class CacheException extends BaseCustomException {
    constructor(operation, originalError){
        super(`Cache error during ${operation}`, _common.HttpStatus.INTERNAL_SERVER_ERROR, {
            code: 'CACHE_ERROR',
            category: "cache",
            severity: "medium",
            retryable: true,
            retryAfter: 1,
            maxRetries: 2,
            context: {
                operation,
                originalError: originalError?.message
            },
            suggestions: [
                'The system will continue to function but may be slower than usual.'
            ]
        });
    }
}
class NetworkException extends BaseCustomException {
    constructor(message = 'Network error occurred', timeout){
        super(message, _common.HttpStatus.REQUEST_TIMEOUT, {
            code: 'NETWORK_ERROR',
            category: "network",
            severity: "medium",
            retryable: true,
            retryAfter: 5,
            maxRetries: 3,
            context: timeout ? {
                timeout
            } : undefined,
            suggestions: [
                'Please check your network connection and try again.'
            ]
        });
    }
}
class SystemException extends BaseCustomException {
    constructor(message, code = 'SYSTEM_ERROR', context){
        const supportRef = `SUP-${Date.now()}-${Math.random().toString(36).substr(2, 8).toUpperCase()}`;
        super(message, _common.HttpStatus.INTERNAL_SERVER_ERROR, {
            code,
            category: "system",
            severity: "critical",
            retryable: false,
            context,
            supportReference: supportRef,
            suggestions: [
                'Please contact support with the provided reference number.'
            ]
        });
    }
}
class ConfigurationException extends BaseCustomException {
    constructor(configKey, expectedType){
        super(`Configuration error: ${configKey}`, _common.HttpStatus.INTERNAL_SERVER_ERROR, {
            code: 'CONFIGURATION_ERROR',
            category: "configuration",
            severity: "critical",
            retryable: false,
            context: {
                configKey,
                expectedType
            },
            supportReference: `CFG-${Date.now()}`,
            suggestions: [
                'Please contact your system administrator.'
            ]
        });
    }
}
class TenantNotFoundException extends BaseCustomException {
    constructor(tenantId){
        super(`Tenant not found: ${tenantId}`, _common.HttpStatus.NOT_FOUND, {
            code: 'TENANT_NOT_FOUND',
            category: "business_logic",
            severity: "medium",
            retryable: false,
            context: {
                tenantId
            },
            suggestions: [
                'Please check the tenant ID and try again.'
            ]
        });
    }
}
class LeadNotFoundException extends BaseCustomException {
    constructor(leadId, tenantId){
        super(`Lead not found: ${leadId}`, _common.HttpStatus.NOT_FOUND, {
            code: 'LEAD_NOT_FOUND',
            category: "business_logic",
            severity: "low",
            retryable: false,
            context: {
                leadId,
                tenantId
            },
            suggestions: [
                'Please check the lead ID and try again.'
            ]
        });
    }
}
function isRetryableError(error) {
    if (error instanceof BaseCustomException) {
        return error.details.retryable;
    }
    // Database connection errors
    if (error.code === 'ECONNREFUSED' || error.code === 'ENOTFOUND') {
        return true;
    }
    // Timeout errors
    if (error.code === 'ETIMEDOUT' || error.name === 'TimeoutError') {
        return true;
    }
    // HTTP 5xx errors (except 501)
    if (error.status >= 500 && error.status !== 501) {
        return true;
    }
    return false;
}
function getRetryDelay(error, attempt) {
    if (error instanceof BaseCustomException && error.details.retryAfter) {
        return error.details.retryAfter * 1000; // Convert to milliseconds
    }
    // Exponential backoff with jitter
    const baseDelay = Math.min(1000 * Math.pow(2, attempt), 30000); // Max 30 seconds
    const jitter = Math.random() * 0.1 * baseDelay; // 10% jitter
    return baseDelay + jitter;
}
function getMaxRetries(error) {
    if (error instanceof BaseCustomException && error.details.maxRetries) {
        return error.details.maxRetries;
    }
    // Default retry counts based on error type
    if (error.code === 'ECONNREFUSED') return 3;
    if (error.code === 'ETIMEDOUT') return 2;
    if (error.status >= 500) return 3;
    return 0; // No retries by default
}

//# sourceMappingURL=data:application/json;base64,