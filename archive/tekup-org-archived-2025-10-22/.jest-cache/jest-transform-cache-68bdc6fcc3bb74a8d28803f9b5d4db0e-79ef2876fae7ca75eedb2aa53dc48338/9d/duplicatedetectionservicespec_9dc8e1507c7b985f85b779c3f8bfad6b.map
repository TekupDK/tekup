{"version":3,"sources":["C:\\Users\\empir\\Tekup-org\\apps\\flow-api\\src\\lead\\services\\duplicate-detection.service.spec.ts"],"sourcesContent":["import { DuplicateDetectionService } from './duplicate-detection.service.js';\r\nimport { PrismaService } from '../../prisma/prisma.service.js';\r\nimport { MetricsService } from '../../metrics/metrics.service.js';\r\nimport { StructuredLogger } from '../../common/logging/structured-logger.service.js';\r\nimport { AsyncContextService } from '../../common/logging/async-context.service.js';\r\n\r\ndescribe('DuplicateDetectionService', () => {\r\n  let service: DuplicateDetectionService;\r\n  let prisma: jest.Mocked<PrismaService>;\r\n  let metrics: jest.Mocked<MetricsService>;\r\n  let logger: jest.Mocked<StructuredLogger>;\r\n  let contextService: jest.Mocked<AsyncContextService>;\r\n\r\n  beforeEach(() => {\r\n    prisma = {\r\n      lead: {\r\n        findFirst: jest.fn(),\r\n        findMany: jest.fn(),\r\n      },\r\n    } as any;\r\n    \r\n    metrics = {\r\n      increment: jest.fn(),\r\n      histogram: jest.fn(),\r\n      gauge: jest.fn(),\r\n      observe: jest.fn(),\r\n    } as any;\r\n    \r\n    logger = {\r\n      debug: jest.fn(),\r\n      error: jest.fn(),\r\n      logBusinessEvent: jest.fn(),\r\n    } as any;\r\n    \r\n    contextService = {\r\n      toLogContext: jest.fn().mockReturnValue({}),\r\n    } as any;\r\n    \r\n    service = new DuplicateDetectionService(prisma, metrics, logger, contextService);\r\n  });\r\n\r\n  describe('findDuplicate', () => {\r\n    it('should return null when no identifying information is provided', async () => {\r\n      const result = await service.findDuplicate('tenant1', {});\r\n      expect(result).toBeNull();\r\n    });\r\n\r\n    it('should find duplicate by exact email match', async () => {\r\n      const mockLead = { id: 'lead1', payload: { email: 'test@example.com' } };\r\n      (prisma.lead.findFirst as jest.Mock).mockResolvedValue(mockLead);\r\n      \r\n      const result = await service.findDuplicate('tenant1', { email: 'test@example.com' });\r\n      \r\n      expect(result).toEqual(mockLead);\r\n      expect(prisma.lead.findFirst).toHaveBeenCalledWith({\r\n        where: {\r\n          tenantId: 'tenant1',\r\n          createdAt: expect.any(Object),\r\n          payload: { path: ['email'], equals: 'test@example.com' }\r\n        },\r\n        orderBy: { createdAt: 'desc' }\r\n      });\r\n      expect(metrics.increment).toHaveBeenCalledWith('duplicate_detection_total', { strategy: 'email_exact', tenant: 'tenant1' });\r\n    });\r\n\r\n    it('should find duplicate by exact phone match when email is not found', async () => {\r\n      // First call for email returns null, second call for phone returns a lead\r\n      (prisma.lead.findFirst as jest.Mock)\r\n        .mockResolvedValueOnce(null)\r\n        .mockResolvedValueOnce({ id: 'lead2', payload: { phone: '+4512345678' } });\r\n      \r\n      const result = await service.findDuplicate('tenant1', { phone: '12 34 56 78' });\r\n      \r\n      expect(result).toEqual({ id: 'lead2', payload: { phone: '+4512345678' } });\r\n      expect(prisma.lead.findFirst).toHaveBeenCalledTimes(2);\r\n      expect(metrics.increment).toHaveBeenCalledWith('duplicate_detection_total', { strategy: 'phone_exact', tenant: 'tenant1' });\r\n    });\r\n\r\n    it('should find duplicate by fuzzy name and address match', async () => {\r\n      const mockLeads = [\r\n        { id: 'lead3', payload: { name: 'John Doe', address: 'Gade 123', postal_code: '2100' } }\r\n      ];\r\n      (prisma.lead.findFirst as jest.Mock).mockResolvedValue(null);\r\n      (prisma.lead.findMany as jest.Mock).mockResolvedValue(mockLeads);\r\n      \r\n      const result = await service.findDuplicate('tenant1', { \r\n        name: 'Jon Doe', \r\n        address: 'Gade 123', \r\n        postal_code: '2100' \r\n      });\r\n      \r\n      expect(result).toEqual(mockLeads[0]);\r\n      expect(metrics.increment).toHaveBeenCalledWith('duplicate_detection_total', { strategy: 'name_address_fuzzy', tenant: 'tenant1' });\r\n    });\r\n\r\n    it('should find duplicate by fuzzy name and phone match', async () => {\r\n      const mockLeads = [\r\n        { id: 'lead4', payload: { name: 'Jane Smith', phone: '+4587654321' } }\r\n      ];\r\n      (prisma.lead.findFirst as jest.Mock).mockResolvedValue(null);\r\n      (prisma.lead.findMany as jest.Mock).mockResolvedValueOnce([]).mockResolvedValueOnce(mockLeads);\r\n      \r\n      const result = await service.findDuplicate('tenant1', { \r\n        name: 'Jane Smith', \r\n        phone: '87654321' \r\n      });\r\n      \r\n      expect(result).toEqual(mockLeads[0]);\r\n      expect(metrics.increment).toHaveBeenCalledWith('duplicate_detection_total', { strategy: 'name_phone_fuzzy', tenant: 'tenant1' });\r\n    });\r\n\r\n    it('should return null when no duplicates are found', async () => {\r\n      (prisma.lead.findFirst as jest.Mock).mockResolvedValue(null);\r\n      (prisma.lead.findMany as jest.Mock).mockResolvedValue([]);\r\n      \r\n      const result = await service.findDuplicate('tenant1', { \r\n        email: 'unique@example.com',\r\n        name: 'Unique Person',\r\n        address: 'Unique Address',\r\n        postal_code: '1234'\r\n      });\r\n      \r\n      expect(result).toBeNull();\r\n      expect(metrics.increment).toHaveBeenCalledWith('duplicate_detection_total', { strategy: 'none_found', tenant: 'tenant1' });\r\n    });\r\n\r\n    it('should handle errors gracefully and return null', async () => {\r\n      (prisma.lead.findFirst as jest.Mock).mockRejectedValue(new Error('Database error'));\r\n      \r\n      const result = await service.findDuplicate('tenant1', { email: 'test@example.com' });\r\n      \r\n      expect(result).toBeNull();\r\n      expect(logger.error).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('mergeLeadPayloads', () => {\r\n    it('should merge payloads preferring non-empty values from new payload', () => {\r\n      const existingLead = {\r\n        payload: {\r\n          name: 'John Doe',\r\n          email: 'john@example.com',\r\n          phone: '',\r\n          address: 'Old Address'\r\n        }\r\n      } as any;\r\n      \r\n      const newPayload = {\r\n        name: '',\r\n        email: 'john.doe@example.com',\r\n        phone: '+4512345678',\r\n        address: 'New Address',\r\n        service_type: 'privat'\r\n      };\r\n      \r\n      const merged = service.mergeLeadPayloads(existingLead, newPayload);\r\n      \r\n      expect(merged).toEqual({\r\n        name: 'John Doe', // Kept from existing (new was empty)\r\n        email: 'john.doe@example.com', // Taken from new (not empty)\r\n        phone: '+4512345678', // Taken from new (existing was empty)\r\n        address: 'New Address', // Taken from new (not empty)\r\n        service_type: 'privat' // Taken from new (not in existing)\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('normalize functions', () => {\r\n    it('should normalize email to lowercase and trim', () => {\r\n      expect(service['normalizeEmail']('  Test@Example.COM  ')).toBe('test@example.com');\r\n      expect(service['normalizeEmail']('')).toBeUndefined();\r\n      expect(service['normalizeEmail'](undefined)).toBeUndefined();\r\n    });\r\n\r\n    it('should normalize phone by removing non-digits and adding +45 prefix for Danish numbers', () => {\r\n      expect(service['normalizePhone']('12 34 56 78')).toBe('+4512345678');\r\n      expect(service['normalizePhone']('+45 12 34 56 78')).toBe('+4512345678');\r\n      expect(service['normalizePhone']('(+45) 12 34 56 78')).toBe('+4512345678');\r\n      expect(service['normalizePhone']('')).toBeUndefined();\r\n    });\r\n\r\n    it('should normalize name to lowercase, trim, and collapse whitespace', () => {\r\n      expect(service['normalizeName']('  John   Doe  ')).toBe('john doe');\r\n      expect(service['normalizeName']('')).toBeUndefined();\r\n    });\r\n\r\n    it('should normalize address to lowercase, trim, and collapse whitespace', () => {\r\n      expect(service['normalizeAddress']('  Gade   123  ')).toBe('gade 123');\r\n      expect(service['normalizeAddress']('')).toBeUndefined();\r\n    });\r\n\r\n    it('should normalize postal code to uppercase and remove whitespace', () => {\r\n      expect(service['normalizePostalCode'](' 2100 ')).toBe('2100');\r\n      expect(service['normalizePostalCode']('dk-2100')).toBe('DK-2100');\r\n      expect(service['normalizePostalCode']('')).toBeUndefined();\r\n    });\r\n  });\r\n\r\n  describe('calculateLevenshteinDistance', () => {\r\n    it('should calculate Levenshtein distance correctly', () => {\r\n      expect(service['calculateLevenshteinDistance']('kitten', 'sitting')).toBe(3);\r\n      expect(service['calculateLevenshteinDistance']('john', 'jon')).toBe(1);\r\n      expect(service['calculateLevenshteinDistance']('same', 'same')).toBe(0);\r\n    });\r\n  });\r\n});"],"names":["describe","service","prisma","metrics","logger","contextService","beforeEach","lead","findFirst","jest","fn","findMany","increment","histogram","gauge","observe","debug","error","logBusinessEvent","toLogContext","mockReturnValue","DuplicateDetectionService","it","result","findDuplicate","expect","toBeNull","mockLead","id","payload","email","mockResolvedValue","toEqual","toHaveBeenCalledWith","where","tenantId","createdAt","any","Object","path","equals","orderBy","strategy","tenant","mockResolvedValueOnce","phone","toHaveBeenCalledTimes","mockLeads","name","address","postal_code","mockRejectedValue","Error","toHaveBeenCalled","existingLead","newPayload","service_type","merged","mergeLeadPayloads","toBe","toBeUndefined","undefined"],"mappings":"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"}