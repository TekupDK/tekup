{"version":3,"sources":["C:\\Users\\empir\\Tekup-org\\apps\\flow-api\\src\\lead\\lead.controller.spec.ts"],"sourcesContent":["import { LeadController } from './lead.controller.js';\r\nimport { LeadService } from './lead.service.js';\r\nimport { CacheService } from '../cache/cache.service.js';\r\nimport { PaginationService } from '../common/services/pagination.service.js';\r\nimport { SlaCalculationService } from './services/sla-calculation.service.js';\r\nimport { PerformanceOptimizationService } from '../performance/performance-optimization.service.js';\r\nimport { CreateComplianceLeadDto } from './dto/compliance.dto.js';\r\n\r\ndescribe('LeadController', () => {\r\n  let controller: LeadController;\r\n  let service: jest.Mocked<LeadService>;\r\n  let cacheService: jest.Mocked<CacheService>;\r\n  let paginationService: jest.Mocked<PaginationService>;\r\n  let slaCalculationService: jest.Mocked<SlaCalculationService>;\r\n  let performanceOptimizationService: jest.Mocked<PerformanceOptimizationService>;\r\n\r\n  beforeEach(() => {\r\n    service = {\r\n      findOne: jest.fn(),\r\n      changeStatus: jest.fn(),\r\n      createComplianceLead: jest.fn(),\r\n    } as any;\r\n    \r\n    cacheService = {\r\n      invalidate: jest.fn(),\r\n      invalidatePattern: jest.fn(),\r\n    } as any;\r\n    \r\n    paginationService = {\r\n      validatePaginationDto: jest.fn(),\r\n      paginateLeads: jest.fn(),\r\n      paginateLeadEvents: jest.fn(),\r\n    } as any;\r\n    \r\n    slaCalculationService = {\r\n      calculateSlaDeadline: jest.fn(),\r\n      estimateEffort: jest.fn(),\r\n      isAutoActionable: jest.fn(),\r\n      isSlaApproaching: jest.fn(),\r\n      isSlaBreached: jest.fn(),\r\n    } as any;\r\n    \r\n    performanceOptimizationService = {\r\n      invalidateLeadStats: jest.fn(),\r\n      invalidateLeadCounts: jest.fn(),\r\n    } as any;\r\n    \r\n    controller = new LeadController(\r\n      service,\r\n      cacheService,\r\n      paginationService,\r\n      slaCalculationService,\r\n      performanceOptimizationService\r\n    );\r\n  });\r\n\r\n  describe('createComplianceLead', () => {\r\n    it('should create a compliance lead and return the response DTO', async () => {\r\n      const dto: CreateComplianceLeadDto = {\r\n        type: 'nis2_finding',\r\n        severity: 'high',\r\n        scanId: 'scan-123',\r\n        category: 'network_security',\r\n        title: 'Open Port Detected',\r\n        description: 'Port 22 is open to the internet',\r\n        recommendation: 'Close port 22 or restrict access',\r\n        hasQuickFix: true,\r\n        affectedSystems: ['server-01'],\r\n        evidence: { port: 22, protocol: 'ssh' },\r\n        companyName: 'Test Company',\r\n        contactEmail: 'contact@test.com',\r\n        contactPhone: '+4512345678'\r\n      };\r\n      \r\n      const mockLead = {\r\n        id: 'lead-123',\r\n        status: 'NEW',\r\n      };\r\n      \r\n      const mockSlaDeadline = new Date('2023-01-02T10:00:00Z');\r\n      const mockAutoActionable = true;\r\n      const mockEstimatedEffort = '15-30 minutes';\r\n      \r\n      (slaCalculationService.calculateSlaDeadline as jest.Mock).mockReturnValue(mockSlaDeadline);\r\n      (slaCalculationService.isAutoActionable as jest.Mock).mockReturnValue(mockAutoActionable);\r\n      (slaCalculationService.estimateEffort as jest.Mock).mockReturnValue(mockEstimatedEffort);\r\n      (service.createComplianceLead as jest.Mock).mockResolvedValue(mockLead);\r\n      \r\n      const req: any = { tenantId: 'tenant-123' };\r\n      \r\n      const result = await controller.createComplianceLead(dto, req);\r\n      \r\n      expect(result).toEqual({\r\n        leadId: 'lead-123',\r\n        slaDeadline: mockSlaDeadline.toISOString(),\r\n        autoActionable: mockAutoActionable,\r\n        estimatedEffort: mockEstimatedEffort,\r\n        status: 'new'\r\n      });\r\n      \r\n      expect(slaCalculationService.calculateSlaDeadline).toHaveBeenCalledWith('high');\r\n      expect(slaCalculationService.isAutoActionable).toHaveBeenCalledWith('high', true);\r\n      expect(slaCalculationService.estimateEffort).toHaveBeenCalledWith('high', true);\r\n      \r\n      expect(service.createComplianceLead).toHaveBeenCalledWith({\r\n        tenantId: 'tenant-123',\r\n        source: 'compliance',\r\n        payload: {\r\n          brand: 'tekup',\r\n          source: 'compliance',\r\n          name: 'Test Company',\r\n          email: 'contact@test.com',\r\n          phone: '+4512345678',\r\n          compliance_type: 'nis2_finding',\r\n          severity: 'high',\r\n          scan_id: 'scan-123',\r\n          finding_category: 'network_security',\r\n          title: 'Open Port Detected',\r\n          description: 'Port 22 is open to the internet',\r\n          recommendation: 'Close port 22 or restrict access',\r\n          auto_actionable: true,\r\n          sla_deadline: mockSlaDeadline.toISOString(),\r\n          affected_systems: ['server-01'],\r\n          evidence: { port: 22, protocol: 'ssh' },\r\n          has_quick_fix: true\r\n        },\r\n        complianceType: 'nis2_finding',\r\n        severity: 'high',\r\n        scanId: 'scan-123',\r\n        findingCategory: 'network_security',\r\n        recommendation: 'Close port 22 or restrict access',\r\n        autoActionable: true,\r\n        slaDeadline: mockSlaDeadline,\r\n        affectedSystems: ['server-01'],\r\n        evidence: { port: 22, protocol: 'ssh' }\r\n      });\r\n      \r\n      // Verify cache invalidation was called\r\n      expect(performanceOptimizationService.invalidateLeadStats).toHaveBeenCalledWith('tenant-123');\r\n      expect(performanceOptimizationService.invalidateLeadCounts).toHaveBeenCalledWith('tenant-123');\r\n    });\r\n\r\n    it('should throw BadRequestException when tenantId is missing', async () => {\r\n      const dto: CreateComplianceLeadDto = {\r\n        type: 'nis2_finding',\r\n        severity: 'medium',\r\n        scanId: 'scan-456',\r\n        category: 'access_control',\r\n        title: 'Weak Password Policy',\r\n        description: 'Password policy allows weak passwords',\r\n        recommendation: 'Enforce strong password policy',\r\n        hasQuickFix: false\r\n      };\r\n      \r\n      const req: any = {}; // No tenantId\r\n      \r\n      await expect(controller.createComplianceLead(dto, req)).rejects.toThrow('tenant missing');\r\n    });\r\n  });\r\n\r\n  describe('markContacted', () => {\r\n    it('should invalidate caches when changing lead status', async () => {\r\n      const dto = { status: 'CONTACTED' as const };\r\n      const req: any = { tenantId: 'tenant-123', id: 'request-123' };\r\n      \r\n      (service.changeStatus as jest.Mock).mockResolvedValue({ id: 'lead-123', status: 'CONTACTED' });\r\n      (cacheService.invalidate as jest.Mock).mockResolvedValue(undefined);\r\n      (performanceOptimizationService.invalidateLeadStats as jest.Mock).mockResolvedValue(undefined);\r\n      (performanceOptimizationService.invalidateLeadCounts as jest.Mock).mockResolvedValue(undefined);\r\n      \r\n      const result = await controller.markContacted('lead-123', dto, req);\r\n      \r\n      expect(result).toEqual({ id: 'lead-123', status: 'CONTACTED' });\r\n      expect(cacheService.invalidate).toHaveBeenCalledTimes(3);\r\n      expect(performanceOptimizationService.invalidateLeadStats).toHaveBeenCalledWith('tenant-123');\r\n      expect(performanceOptimizationService.invalidateLeadCounts).toHaveBeenCalledWith('tenant-123');\r\n    });\r\n  });\r\n});"],"names":["describe","controller","service","cacheService","paginationService","slaCalculationService","performanceOptimizationService","beforeEach","findOne","jest","fn","changeStatus","createComplianceLead","invalidate","invalidatePattern","validatePaginationDto","paginateLeads","paginateLeadEvents","calculateSlaDeadline","estimateEffort","isAutoActionable","isSlaApproaching","isSlaBreached","invalidateLeadStats","invalidateLeadCounts","LeadController","it","dto","type","severity","scanId","category","title","description","recommendation","hasQuickFix","affectedSystems","evidence","port","protocol","companyName","contactEmail","contactPhone","mockLead","id","status","mockSlaDeadline","Date","mockAutoActionable","mockEstimatedEffort","mockReturnValue","mockResolvedValue","req","tenantId","result","expect","toEqual","leadId","slaDeadline","toISOString","autoActionable","estimatedEffort","toHaveBeenCalledWith","source","payload","brand","name","email","phone","compliance_type","scan_id","finding_category","auto_actionable","sla_deadline","affected_systems","has_quick_fix","complianceType","findingCategory","rejects","toThrow","undefined","markContacted","toHaveBeenCalledTimes"],"mappings":"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"}