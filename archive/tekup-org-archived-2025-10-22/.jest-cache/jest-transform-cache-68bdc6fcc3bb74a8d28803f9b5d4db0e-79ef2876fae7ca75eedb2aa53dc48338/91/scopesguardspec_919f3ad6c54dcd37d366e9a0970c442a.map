{"version":3,"sources":["C:\\Users\\empir\\Tekup-org\\apps\\flow-api\\src\\auth\\__tests__\\scopes.guard.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { ScopesGuard } from '../scopes.guard';\r\nimport { Reflector } from '@nestjs/core';\r\nimport { ForbiddenException, UnauthorizedException } from '@nestjs/common';\r\n\r\ndescribe('ScopesGuard', () => {\r\n  let guard: ScopesGuard;\r\n  let reflector: Reflector;\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [ScopesGuard, Reflector],\r\n    }).compile();\r\n\r\n    guard = module.get<ScopesGuard>(ScopesGuard);\r\n    reflector = module.get<Reflector>(Reflector);\r\n  });\r\n\r\n  describe('Basic Scope Validation', () => {\r\n    it('should allow access for admin scope', () => {\r\n      const mockContext = {\r\n        switchToHttp: () => ({\r\n          getRequest: () => ({\r\n            tenantId: 'test-tenant',\r\n            apiKeyScopes: ['admin'],\r\n          }),\r\n        }),\r\n      };\r\n\r\n      jest.spyOn(reflector, 'getAllAndOverride').mockReturnValue(['read:leads']);\r\n\r\n      expect(guard.canActivate(mockContext as any)).toBe(true);\r\n    });\r\n\r\n    it('should allow access for matching scope', () => {\r\n      const mockContext = {\r\n        switchToHttp: () => ({\r\n          getRequest: () => ({\r\n            tenantId: 'test-tenant',\r\n            apiKeyScopes: ['read:leads'],\r\n          }),\r\n        }),\r\n      };\r\n\r\n      jest.spyOn(reflector, 'getAllAndOverride').mockReturnValue(['read:leads']);\r\n\r\n      expect(guard.canActivate(mockContext as any)).toBe(true);\r\n    });\r\n\r\n    it('should deny access for insufficient scopes', () => {\r\n      const mockContext = {\r\n        switchToHttp: () => ({\r\n          getRequest: () => ({\r\n            tenantId: 'test-tenant',\r\n            apiKeyScopes: ['read:leads'],\r\n          }),\r\n        }),\r\n      };\r\n\r\n      jest.spyOn(reflector, 'getAllAndOverride').mockReturnValue(['manage:leads']);\r\n\r\n      expect(() => guard.canActivate(mockContext as any)).toThrow(ForbiddenException);\r\n    });\r\n\r\n    it('should throw error for missing API key context', () => {\r\n      const mockContext = {\r\n        switchToHttp: () => ({\r\n          getRequest: () => ({\r\n            tenantId: undefined,\r\n            apiKeyScopes: [],\r\n          }),\r\n        }),\r\n      };\r\n\r\n      jest.spyOn(reflector, 'getAllAndOverride').mockReturnValue(['read:leads']);\r\n\r\n      expect(() => guard.canActivate(mockContext as any)).toThrow(UnauthorizedException);\r\n    });\r\n  });\r\n\r\n  describe('Cross-Tenant Access Controls', () => {\r\n    it('should allow cross-tenant read with proper permissions', () => {\r\n      const mockContext = {\r\n        switchToHttp: () => ({\r\n          getRequest: () => ({\r\n            tenantId: 'test-tenant',\r\n            apiKeyScopes: ['cross_tenant:read'],\r\n          }),\r\n        }),\r\n      };\r\n\r\n      jest.spyOn(reflector, 'getAllAndOverride')\r\n        .mockReturnValueOnce(['cross_tenant:read']) // SCOPES_KEY\r\n        .mockReturnValueOnce(['cross_tenant:read']) // CROSS_TENANT_KEY\r\n        .mockReturnValueOnce(undefined); // BUSINESS_ACCESS_KEY\r\n\r\n      expect(guard.canActivate(mockContext as any)).toBe(true);\r\n    });\r\n\r\n    it('should deny cross-tenant access without proper permissions', () => {\r\n      const mockContext = {\r\n        switchToHttp: () => ({\r\n          getRequest: () => ({\r\n            tenantId: 'test-tenant',\r\n            apiKeyScopes: ['read:leads'],\r\n          }),\r\n        }),\r\n      };\r\n\r\n      jest.spyOn(reflector, 'getAllAndOverride')\r\n        .mockReturnValueOnce([]) // SCOPES_KEY\r\n        .mockReturnValueOnce(['cross_tenant:read']) // CROSS_TENANT_KEY\r\n        .mockReturnValueOnce(undefined); // BUSINESS_ACCESS_KEY\r\n\r\n      expect(() => guard.canActivate(mockContext as any)).toThrow(ForbiddenException);\r\n    });\r\n\r\n    it('should allow cross-tenant write with read permissions', () => {\r\n      const mockContext = {\r\n        switchToHttp: () => ({\r\n          getRequest: () => ({\r\n            tenantId: 'test-tenant',\r\n            apiKeyScopes: ['cross_tenant:read'],\r\n          }),\r\n        }),\r\n      };\r\n\r\n      jest.spyOn(reflector, 'getAllAndOverride')\r\n        .mockReturnValueOnce([]) // SCOPES_KEY\r\n        .mockReturnValueOnce(['cross_tenant:read']) // CROSS_TENANT_KEY\r\n        .mockReturnValueOnce(undefined); // BUSINESS_ACCESS_KEY\r\n\r\n      expect(guard.canActivate(mockContext as any)).toBe(true);\r\n    });\r\n\r\n    it('should allow cross-tenant admin with write permissions', () => {\r\n      const mockContext = {\r\n        switchToHttp: () => ({\r\n          getRequest: () => ({\r\n            tenantId: 'test-tenant',\r\n            apiKeyScopes: ['cross_tenant:write'],\r\n          }),\r\n        }),\r\n      };\r\n\r\n      jest.spyOn(reflector, 'getAllAndOverride')\r\n        .mockReturnValueOnce([]) // SCOPES_KEY\r\n        .mockReturnValueOnce(['cross_tenant:read']) // CROSS_TENANT_KEY\r\n        .mockReturnValueOnce(undefined); // BUSINESS_ACCESS_KEY\r\n\r\n      expect(guard.canActivate(mockContext as any)).toBe(true);\r\n    });\r\n\r\n    it('should require admin scope for cross-tenant admin operations', () => {\r\n      const mockContext = {\r\n        switchToHttp: () => ({\r\n          getRequest: () => ({\r\n            tenantId: 'test-tenant',\r\n            apiKeyScopes: ['cross_tenant:read'],\r\n          }),\r\n        }),\r\n      };\r\n\r\n      jest.spyOn(reflector, 'getAllAndOverride')\r\n        .mockReturnValueOnce([]) // SCOPES_KEY\r\n        .mockReturnValueOnce(['cross_tenant:admin']) // CROSS_TENANT_KEY\r\n        .mockReturnValueOnce(undefined); // BUSINESS_ACCESS_KEY\r\n\r\n      expect(() => guard.canActivate(mockContext as any)).toThrow(ForbiddenException);\r\n    });\r\n  });\r\n\r\n  describe('Business Access Controls', () => {\r\n    it('should allow business access for matching tenant', () => {\r\n      const mockContext = {\r\n        switchToHttp: () => ({\r\n          getRequest: () => ({\r\n            tenantId: 'foodtruck-tenant-id',\r\n            apiKeyScopes: ['business:foodtruck'],\r\n          }),\r\n        }),\r\n      };\r\n\r\n      jest.spyOn(reflector, 'getAllAndOverride')\r\n        .mockReturnValueOnce([]) // SCOPES_KEY\r\n        .mockReturnValueOnce(undefined) // CROSS_TENANT_KEY\r\n        .mockReturnValueOnce(['business:foodtruck']); // BUSINESS_ACCESS_KEY\r\n\r\n      expect(guard.canActivate(mockContext as any)).toBe(true);\r\n    });\r\n\r\n    it('should allow tekup admin access to any business', () => {\r\n      const mockContext = {\r\n        switchToHttp: () => ({\r\n          getRequest: () => ({\r\n            tenantId: 'foodtruck-tenant-id',\r\n            apiKeyScopes: ['business:tekup_admin'],\r\n          }),\r\n        }),\r\n      };\r\n\r\n      jest.spyOn(reflector, 'getAllAndOverride')\r\n        .mockReturnValueOnce([]) // SCOPES_KEY\r\n        .mockReturnValueOnce(undefined) // CROSS_TENANT_KEY\r\n        .mockReturnValueOnce(['business:foodtruck']); // BUSINESS_ACCESS_KEY\r\n\r\n      expect(guard.canActivate(mockContext as any)).toBe(true);\r\n    });\r\n\r\n    it('should deny business access for non-matching tenant', () => {\r\n      const mockContext = {\r\n        switchToHttp: () => ({\r\n          getRequest: () => ({\r\n            tenantId: 'foodtruck-tenant-id',\r\n            apiKeyScopes: ['business:essenza'],\r\n          }),\r\n        }),\r\n      };\r\n\r\n      jest.spyOn(reflector, 'getAllAndOverride')\r\n        .mockReturnValueOnce([]) // SCOPES_KEY\r\n        .mockReturnValueOnce(undefined) // CROSS_TENANT_KEY\r\n        .mockReturnValueOnce(['business:essenza']); // BUSINESS_ACCESS_KEY\r\n\r\n      expect(() => guard.canActivate(mockContext as any)).toThrow(ForbiddenException);\r\n    });\r\n\r\n    it('should deny access for unknown tenant', () => {\r\n      const mockContext = {\r\n        switchToHttp: () => ({\r\n          getRequest: () => ({\r\n            tenantId: 'unknown-tenant-id',\r\n            apiKeyScopes: ['business:foodtruck'],\r\n          }),\r\n        }),\r\n      };\r\n\r\n      jest.spyOn(reflector, 'getAllAndOverride')\r\n        .mockReturnValueOnce([]) // SCOPES_KEY\r\n        .mockReturnValueOnce(undefined) // CROSS_TENANT_KEY\r\n        .mockReturnValueOnce(['business:foodtruck']); // BUSINESS_ACCESS_KEY\r\n\r\n      expect(() => guard.canActivate(mockContext as any)).toThrow(ForbiddenException);\r\n    });\r\n  });\r\n\r\n  describe('Combined Permission Validation', () => {\r\n    it('should allow access with both scope and business permissions', () => {\r\n      const mockContext = {\r\n        switchToHttp: () => ({\r\n          getRequest: () => ({\r\n            tenantId: 'foodtruck-tenant-id',\r\n            apiKeyScopes: ['read:leads', 'business:foodtruck'],\r\n          }),\r\n        }),\r\n      };\r\n\r\n      jest.spyOn(reflector, 'getAllAndOverride')\r\n        .mockReturnValueOnce(['read:leads']) // SCOPES_KEY\r\n        .mockReturnValueOnce(undefined) // CROSS_TENANT_KEY\r\n        .mockReturnValueOnce(['business:foodtruck']); // BUSINESS_ACCESS_KEY\r\n\r\n      expect(guard.canActivate(mockContext as any)).toBe(true);\r\n    });\r\n\r\n    it('should deny access with scope but no business permission', () => {\r\n      const mockContext = {\r\n        switchToHttp: () => ({\r\n          getRequest: () => ({\r\n            tenantId: 'foodtruck-tenant-id',\r\n            apiKeyScopes: ['read:leads'],\r\n          }),\r\n        }),\r\n      };\r\n\r\n      jest.spyOn(reflector, 'getAllAndOverride')\r\n        .mockReturnValueOnce(['read:leads']) // SCOPES_KEY\r\n        .mockReturnValueOnce(undefined) // CROSS_TENANT_KEY\r\n        .mockReturnValueOnce(['business:essenza']); // BUSINESS_ACCESS_KEY\r\n\r\n      expect(() => guard.canActivate(mockContext as any)).toThrow(ForbiddenException);\r\n    });\r\n\r\n    it('should allow access with no requirements', () => {\r\n      const mockContext = {\r\n        switchToHttp: () => ({\r\n          getRequest: () => ({\r\n            tenantId: 'test-tenant',\r\n            apiKeyScopes: [],\r\n          }),\r\n        }),\r\n      };\r\n\r\n      jest.spyOn(reflector, 'getAllAndOverride')\r\n        .mockReturnValueOnce(undefined) // SCOPES_KEY\r\n        .mockReturnValueOnce(undefined) // CROSS_TENANT_KEY\r\n        .mockReturnValueOnce(undefined); // BUSINESS_ACCESS_KEY\r\n\r\n      expect(guard.canActivate(mockContext as any)).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('Error Messages', () => {\r\n    it('should provide detailed error for cross-tenant permission failure', () => {\r\n      const mockContext = {\r\n        switchToHttp: () => ({\r\n          getRequest: () => ({\r\n            tenantId: 'test-tenant',\r\n            apiKeyScopes: ['read:leads'],\r\n          }),\r\n        }),\r\n      };\r\n\r\n      jest.spyOn(reflector, 'getAllAndOverride')\r\n        .mockReturnValueOnce([]) // SCOPES_KEY\r\n        .mockReturnValueOnce(['cross_tenant:admin']) // CROSS_TENANT_KEY\r\n        .mockReturnValueOnce(undefined); // BUSINESS_ACCESS_KEY\r\n\r\n      try {\r\n        guard.canActivate(mockContext as any);\r\n      } catch (error) {\r\n        expect(error).toBeInstanceOf(ForbiddenException);\r\n        expect(error.message).toContain('insufficient_cross_tenant_permissions');\r\n        expect(error.message).toContain('Cross-tenant operations require specific permissions');\r\n      }\r\n    });\r\n\r\n    it('should provide detailed error for business permission failure', () => {\r\n      const mockContext = {\r\n        switchToHttp: () => ({\r\n          getRequest: () => ({\r\n            tenantId: 'foodtruck-tenant-id',\r\n            apiKeyScopes: ['read:leads'],\r\n          }),\r\n        }),\r\n      };\r\n\r\n      jest.spyOn(reflector, 'getAllAndOverride')\r\n        .mockReturnValueOnce(['read:leads']) // SCOPES_KEY\r\n        .mockReturnValueOnce(undefined) // CROSS_TENANT_KEY\r\n        .mockReturnValueOnce(['business:essenza']); // BUSINESS_ACCESS_KEY\r\n\r\n      try {\r\n        guard.canActivate(mockContext as any);\r\n      } catch (error) {\r\n        expect(error).toBeInstanceOf(ForbiddenException);\r\n        expect(error.message).toContain('insufficient_business_permissions');\r\n        expect(error.message).toContain('Business-specific operations require appropriate permissions');\r\n      }\r\n    });\r\n  });\r\n});\r\n"],"names":["describe","guard","reflector","beforeEach","module","Test","createTestingModule","providers","ScopesGuard","Reflector","compile","get","it","mockContext","switchToHttp","getRequest","tenantId","apiKeyScopes","jest","spyOn","mockReturnValue","expect","canActivate","toBe","toThrow","ForbiddenException","undefined","UnauthorizedException","mockReturnValueOnce","error","toBeInstanceOf","message","toContain"],"mappings":"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"}