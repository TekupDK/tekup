{"version":3,"sources":["C:\\Users\\empir\\Tekup-org\\apps\\flow-api\\src\\common\\logging\\__tests__\\logging.interceptor.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { ExecutionContext, CallHandler } from '@nestjs/common';\r\nimport { of, throwError } from 'rxjs';\r\nimport { LoggingInterceptor } from '../logging.interceptor.js';\r\nimport { StructuredLoggerService } from '../structured-logger.service.js';\r\n\r\ndescribe('LoggingInterceptor', () => {\r\n  let interceptor: LoggingInterceptor;\r\n  let mockLogger: jest.Mocked<StructuredLoggerService>;\r\n  let mockExecutionContext: jest.Mocked<ExecutionContext>;\r\n  let mockCallHandler: jest.Mocked<CallHandler>;\r\n  let mockRequest: any;\r\n  let mockResponse: any;\r\n\r\n  beforeEach(async () => {\r\n    mockLogger = {\r\n      runWithContext: jest.fn((context, fn) => fn()),\r\n      generateCorrelationId: jest.fn(() => 'test-correlation-id'),\r\n      http: jest.fn(),\r\n      apiRequest: jest.fn(),\r\n      warn: jest.fn(),\r\n      error: jest.fn(),\r\n    } as any;\r\n\r\n    mockRequest = {\r\n      method: 'GET',\r\n      url: '/api/leads?page=1',\r\n      path: '/api/leads',\r\n      headers: {\r\n        'user-agent': 'test-agent',\r\n        'x-forwarded-for': '192.168.1.1',\r\n      },\r\n      query: { page: '1' },\r\n      params: {},\r\n      connection: { remoteAddress: '127.0.0.1' },\r\n    };\r\n\r\n    mockResponse = {\r\n      setHeader: jest.fn(),\r\n      statusCode: 200,\r\n      getHeader: jest.fn(() => '1024'),\r\n    };\r\n\r\n    mockExecutionContext = {\r\n      switchToHttp: jest.fn(() => ({\r\n        getRequest: () => mockRequest,\r\n        getResponse: () => mockResponse,\r\n      })),\r\n    } as any;\r\n\r\n    mockCallHandler = {\r\n      handle: jest.fn(),\r\n    } as any;\r\n\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        LoggingInterceptor,\r\n        { provide: StructuredLoggerService, useValue: mockLogger },\r\n      ],\r\n    }).compile();\r\n\r\n    interceptor = module.get<LoggingInterceptor>(LoggingInterceptor);\r\n  });\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(interceptor).toBeDefined();\r\n  });\r\n\r\n  describe('successful requests', () => {\r\n    it('should log incoming request and successful response', (done) => {\r\n      const responseData = { data: 'test' };\r\n      mockCallHandler.handle.mockReturnValue(of(responseData));\r\n\r\n      const result$ = interceptor.intercept(mockExecutionContext, mockCallHandler);\r\n\r\n      result$.subscribe({\r\n        next: (data) => {\r\n          expect(data).toBe(responseData);\r\n          \r\n          // Should set correlation headers\r\n          expect(mockResponse.setHeader).toHaveBeenCalledWith('X-Correlation-ID', 'test-correlation-id');\r\n          expect(mockResponse.setHeader).toHaveBeenCalledWith('X-Request-ID', expect.any(String));\r\n          \r\n          // Should log incoming request\r\n          expect(mockLogger.http).toHaveBeenCalledWith(\r\n            'Incoming GET /api/leads',\r\n            expect.objectContaining({\r\n              method: 'GET',\r\n              url: '/api/leads?page=1',\r\n              userAgent: 'test-agent',\r\n              ip: '192.168.1.1',\r\n            })\r\n          );\r\n          \r\n          // Should log successful response\r\n          expect(mockLogger.apiRequest).toHaveBeenCalledWith(\r\n            'GET',\r\n            '/api/leads',\r\n            200,\r\n            expect.any(Number),\r\n            expect.objectContaining({\r\n              method: 'GET',\r\n              statusCode: 200,\r\n            })\r\n          );\r\n          \r\n          done();\r\n        },\r\n        error: done,\r\n      });\r\n    });\r\n\r\n    it('should extract correlation ID from request headers', (done) => {\r\n      const existingCorrelationId = 'existing-correlation-id';\r\n      mockRequest.headers['x-correlation-id'] = existingCorrelationId;\r\n      \r\n      mockCallHandler.handle.mockReturnValue(of({}));\r\n\r\n      const result$ = interceptor.intercept(mockExecutionContext, mockCallHandler);\r\n\r\n      result$.subscribe({\r\n        next: () => {\r\n          expect(mockResponse.setHeader).toHaveBeenCalledWith('X-Correlation-ID', existingCorrelationId);\r\n          done();\r\n        },\r\n        error: done,\r\n      });\r\n    });\r\n\r\n    it('should extract tenant ID from API key header', (done) => {\r\n      mockRequest.headers['x-tenant-key'] = 'tenant-api-key';\r\n      mockRequest.tenantId = 'tenant123';\r\n      \r\n      mockCallHandler.handle.mockReturnValue(of({}));\r\n\r\n      const result$ = interceptor.intercept(mockExecutionContext, mockCallHandler);\r\n\r\n      result$.subscribe({\r\n        next: () => {\r\n          expect(mockLogger.runWithContext).toHaveBeenCalledWith(\r\n            expect.objectContaining({\r\n              tenantId: 'tenant123',\r\n            }),\r\n            expect.any(Function)\r\n          );\r\n          done();\r\n        },\r\n        error: done,\r\n      });\r\n    });\r\n\r\n    it('should extract tenant ID from URL path', (done) => {\r\n      mockRequest.path = '/api/tenants/tenant456/leads';\r\n      \r\n      mockCallHandler.handle.mockReturnValue(of({}));\r\n\r\n      const result$ = interceptor.intercept(mockExecutionContext, mockCallHandler);\r\n\r\n      result$.subscribe({\r\n        next: () => {\r\n          expect(mockLogger.runWithContext).toHaveBeenCalledWith(\r\n            expect.objectContaining({\r\n              tenantId: 'tenant456',\r\n            }),\r\n            expect.any(Function)\r\n          );\r\n          done();\r\n        },\r\n        error: done,\r\n      });\r\n    });\r\n\r\n    it('should log slow requests as warnings', (done) => {\r\n      mockCallHandler.handle.mockReturnValue(of({}));\r\n      \r\n      // Mock Date.now to simulate slow request\r\n      const originalDateNow = Date.now;\r\n      let callCount = 0;\r\n      Date.now = jest.fn(() => {\r\n        callCount++;\r\n        return callCount === 1 ? 1000 : 2500; // 1500ms duration\r\n      });\r\n\r\n      const result$ = interceptor.intercept(mockExecutionContext, mockCallHandler);\r\n\r\n      result$.subscribe({\r\n        next: () => {\r\n          expect(mockLogger.warn).toHaveBeenCalledWith(\r\n            'Slow request detected',\r\n            expect.objectContaining({\r\n              duration: 1500,\r\n              threshold: 1000,\r\n            })\r\n          );\r\n          \r\n          Date.now = originalDateNow;\r\n          done();\r\n        },\r\n        error: (err) => {\r\n          Date.now = originalDateNow;\r\n          done(err);\r\n        },\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('error handling', () => {\r\n    it('should log error responses', (done) => {\r\n      const error = new Error('Test error');\r\n      (error as any).status = 400;\r\n      mockCallHandler.handle.mockReturnValue(throwError(() => error));\r\n\r\n      const result$ = interceptor.intercept(mockExecutionContext, mockCallHandler);\r\n\r\n      result$.subscribe({\r\n        next: () => done(new Error('Should not reach here')),\r\n        error: (err) => {\r\n          expect(err).toBe(error);\r\n          \r\n          // Should log error\r\n          expect(mockLogger.error).toHaveBeenCalledWith(\r\n            'Request failed: GET /api/leads',\r\n            error,\r\n            expect.objectContaining({\r\n              method: 'GET',\r\n              statusCode: 400,\r\n              errorName: 'Error',\r\n              errorMessage: 'Test error',\r\n            })\r\n          );\r\n          \r\n          // Should log API request with error status\r\n          expect(mockLogger.apiRequest).toHaveBeenCalledWith(\r\n            'GET',\r\n            '/api/leads',\r\n            400,\r\n            expect.any(Number),\r\n            expect.objectContaining({\r\n              method: 'GET',\r\n              statusCode: 400,\r\n            })\r\n          );\r\n          \r\n          done();\r\n        },\r\n      });\r\n    });\r\n\r\n    it('should handle errors without status code', (done) => {\r\n      const error = new Error('Test error');\r\n      mockCallHandler.handle.mockReturnValue(throwError(() => error));\r\n\r\n      const result$ = interceptor.intercept(mockExecutionContext, mockCallHandler);\r\n\r\n      result$.subscribe({\r\n        next: () => done(new Error('Should not reach here')),\r\n        error: (err) => {\r\n          expect(mockLogger.error).toHaveBeenCalledWith(\r\n            expect.any(String),\r\n            error,\r\n            expect.objectContaining({\r\n              statusCode: 500, // Default status\r\n            })\r\n          );\r\n          \r\n          done();\r\n        },\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('utility methods', () => {\r\n    it('should sanitize URLs with sensitive parameters', () => {\r\n      const url = '/api/users?password=secret&token=abc123&name=john';\r\n      const sanitized = interceptor['sanitizeUrl'](url);\r\n\r\n      expect(sanitized).toContain('password=***');\r\n      expect(sanitized).toContain('token=***');\r\n      expect(sanitized).toContain('name=john');\r\n      expect(sanitized).not.toContain('secret');\r\n      expect(sanitized).not.toContain('abc123');\r\n    });\r\n\r\n    it('should sanitize query parameters', () => {\r\n      const query = {\r\n        page: '1',\r\n        password: 'secret',\r\n        token: 'abc123',\r\n        name: 'john',\r\n      };\r\n\r\n      const sanitized = interceptor['sanitizeQuery'](query);\r\n\r\n      expect(sanitized).toEqual({\r\n        page: '1',\r\n        password: '***',\r\n        token: '***',\r\n        name: 'john',\r\n      });\r\n    });\r\n\r\n    it('should handle non-object query parameters', () => {\r\n      const query = 'string-query';\r\n      const sanitized = interceptor['sanitizeQuery'](query);\r\n      expect(sanitized).toBe(query);\r\n    });\r\n\r\n    it('should get client IP from various headers', () => {\r\n      // Test x-forwarded-for\r\n      mockRequest.headers['x-forwarded-for'] = '203.0.113.1';\r\n      let ip = interceptor['getClientIp'](mockRequest);\r\n      expect(ip).toBe('203.0.113.1');\r\n\r\n      // Test x-real-ip\r\n      delete mockRequest.headers['x-forwarded-for'];\r\n      mockRequest.headers['x-real-ip'] = '203.0.113.2';\r\n      ip = interceptor['getClientIp'](mockRequest);\r\n      expect(ip).toBe('203.0.113.2');\r\n\r\n      // Test connection.remoteAddress\r\n      delete mockRequest.headers['x-real-ip'];\r\n      mockRequest.connection = { remoteAddress: '203.0.113.3' };\r\n      ip = interceptor['getClientIp'](mockRequest);\r\n      expect(ip).toBe('203.0.113.3');\r\n\r\n      // Test fallback to unknown\r\n      delete mockRequest.connection;\r\n      ip = interceptor['getClientIp'](mockRequest);\r\n      expect(ip).toBe('unknown');\r\n    });\r\n\r\n    it('should calculate response size', () => {\r\n      const data = { message: 'test', count: 5 };\r\n      const size = interceptor['getResponseSize'](data);\r\n      \r\n      expect(size).toBe(JSON.stringify(data).length);\r\n    });\r\n\r\n    it('should handle response size calculation errors', () => {\r\n      const circularData = {};\r\n      (circularData as any).self = circularData;\r\n      \r\n      const size = interceptor['getResponseSize'](circularData);\r\n      expect(size).toBe(0);\r\n    });\r\n  });\r\n\r\n  describe('correlation ID generation', () => {\r\n    it('should generate request ID with proper format', () => {\r\n      const requestId = interceptor['generateRequestId']();\r\n      \r\n      expect(requestId).toMatch(/^req_[a-z0-9]+_[a-z0-9]+$/);\r\n    });\r\n\r\n    it('should extract correlation ID from various headers', () => {\r\n      const testCases = [\r\n        { header: 'x-correlation-id', value: 'test-id-1' },\r\n        { header: 'x-request-id', value: 'test-id-2' },\r\n        { header: 'correlation-id', value: 'test-id-3' },\r\n        { header: 'request-id', value: 'test-id-4' },\r\n      ];\r\n\r\n      testCases.forEach(({ header, value }) => {\r\n        mockRequest.headers = { [header]: value };\r\n        const extracted = interceptor['extractOrGenerateCorrelationId'](mockRequest);\r\n        expect(extracted).toBe(value);\r\n      });\r\n    });\r\n\r\n    it('should generate new correlation ID when none exists', () => {\r\n      mockRequest.headers = {};\r\n      const correlationId = interceptor['extractOrGenerateCorrelationId'](mockRequest);\r\n      \r\n      expect(correlationId).toBe('test-correlation-id');\r\n      expect(mockLogger.generateCorrelationId).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should handle array header values', () => {\r\n      mockRequest.headers = { 'x-correlation-id': ['first-id', 'second-id'] };\r\n      const correlationId = interceptor['extractOrGenerateCorrelationId'](mockRequest);\r\n      \r\n      expect(correlationId).toBe('test-correlation-id');\r\n      expect(mockLogger.generateCorrelationId).toHaveBeenCalled();\r\n    });\r\n  });\r\n});"],"names":["describe","interceptor","mockLogger","mockExecutionContext","mockCallHandler","mockRequest","mockResponse","beforeEach","runWithContext","jest","fn","context","generateCorrelationId","http","apiRequest","warn","error","method","url","path","headers","query","page","params","connection","remoteAddress","setHeader","statusCode","getHeader","switchToHttp","getRequest","getResponse","handle","module","Test","createTestingModule","providers","LoggingInterceptor","provide","StructuredLoggerService","useValue","compile","get","clearAllMocks","it","expect","toBeDefined","done","responseData","data","mockReturnValue","of","result$","intercept","subscribe","next","toBe","toHaveBeenCalledWith","any","String","objectContaining","userAgent","ip","Number","existingCorrelationId","tenantId","Function","originalDateNow","Date","now","callCount","duration","threshold","err","Error","status","throwError","errorName","errorMessage","sanitized","toContain","not","password","token","name","toEqual","message","count","size","JSON","stringify","length","circularData","self","requestId","toMatch","testCases","header","value","forEach","extracted","correlationId","toHaveBeenCalled"],"mappings":"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"}