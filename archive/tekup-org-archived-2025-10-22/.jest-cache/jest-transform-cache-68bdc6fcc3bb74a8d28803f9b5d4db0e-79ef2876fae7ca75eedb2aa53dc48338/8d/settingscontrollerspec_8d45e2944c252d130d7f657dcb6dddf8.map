{"version":3,"sources":["C:\\Users\\empir\\Tekup-org\\apps\\flow-api\\src\\settings\\settings.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { SettingsController } from './settings.controller.js';\r\nimport { SettingsService } from './settings.service.js';\r\nimport { ApiKeyGuard } from '../auth/api-key.guard.js';\r\nimport { ScopesGuard } from '../auth/scopes.guard.js';\r\nimport { BadRequestException, ForbiddenException } from '@nestjs/common';\r\n\r\ndescribe('SettingsController', () => {\r\n  let controller: SettingsController;\r\n  let settingsService: SettingsService;\r\n\r\n  const mockSettingsService = {\r\n    getResolved: jest.fn(),\r\n    update: jest.fn(),\r\n  };\r\n\r\n  const mockExecutionContext = {\r\n    switchToHttp: jest.fn(() => ({\r\n      getRequest: jest.fn(() => ({\r\n        tenantId: 'test-tenant',\r\n        apiKeyInfo: { \r\n          key: 'test-key',\r\n          scopes: ['manage:settings', 'view:settings'],\r\n          tenantId: 'test-tenant'\r\n        }\r\n      })),\r\n    })),\r\n  };\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      controllers: [SettingsController],\r\n      providers: [\r\n        {\r\n          provide: SettingsService,\r\n          useValue: mockSettingsService,\r\n        },\r\n      ],\r\n    })\r\n    .overrideGuard(ApiKeyGuard)\r\n    .useValue({ canActivate: jest.fn(() => true) })\r\n    .overrideGuard(ScopesGuard)\r\n    .useValue({ canActivate: jest.fn(() => true) })\r\n    .compile();\r\n\r\n    controller = module.get<SettingsController>(SettingsController);\r\n    settingsService = module.get<SettingsService>(SettingsService);\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(controller).toBeDefined();\r\n  });\r\n\r\n  describe('get', () => {\r\n    it('should return resolved settings for tenant', async () => {\r\n      const mockSettings = {\r\n        sla_response_minutes: 60,\r\n        duplicate_window_minutes: 60,\r\n        enable_advanced_parser: false,\r\n        brand_display_name: 'Test Brand',\r\n        theme_primary_color: '#ff0000'\r\n      };\r\n      \r\n      mockSettingsService.getResolved.mockResolvedValue(mockSettings);\r\n\r\n      const result = await controller.get('test-tenant');\r\n\r\n      expect(result).toEqual({ settings: mockSettings });\r\n      expect(settingsService.getResolved).toHaveBeenCalledWith('test-tenant');\r\n    });\r\n\r\n    it('should handle service errors', async () => {\r\n      mockSettingsService.getResolved.mockRejectedValue(new Error('Database error'));\r\n\r\n      await expect(controller.get('test-tenant')).rejects.toThrow('Database error');\r\n      expect(settingsService.getResolved).toHaveBeenCalledWith('test-tenant');\r\n    });\r\n  });\r\n\r\n  describe('patch', () => {\r\n    const mockApiKeyInfo = { \r\n      keyId: 'test-key',\r\n      scopes: ['manage:settings'],\r\n      tenantId: 'test-tenant'\r\n    };\r\n\r\n    const validUpdates = {\r\n      sla_response_minutes: 45,\r\n      theme_primary_color: '#00ff00',\r\n      brand_display_name: 'Updated Brand'\r\n    };\r\n\r\n    it('should update settings successfully', async () => {\r\n      const mockUpdatedSettings = {\r\n        ...validUpdates,\r\n        duplicate_window_minutes: 60,\r\n        enable_advanced_parser: false\r\n      };\r\n      \r\n      mockSettingsService.update.mockResolvedValue(mockUpdatedSettings);\r\n\r\n      const result = await controller.patch('test-tenant', mockApiKeyInfo as any, { updates: validUpdates });\r\n\r\n      expect(result).toEqual({ settings: mockUpdatedSettings });\r\n      expect(settingsService.update).toHaveBeenCalledWith('test-tenant', validUpdates, 'test-key');\r\n    });\r\n\r\n    it('should handle validation errors from service', async () => {\r\n      mockSettingsService.update.mockRejectedValue(new Error('invalid_theme_primary_color'));\r\n\r\n      await expect(controller.patch('test-tenant', mockApiKeyInfo as any, {\r\n        updates: { theme_primary_color: 'invalid-color' }\r\n      })).rejects.toThrow('invalid_theme_primary_color');\r\n    });\r\n\r\n    it('should handle no_valid_keys error', async () => {\r\n      mockSettingsService.update.mockRejectedValue(new Error('no_valid_keys'));\r\n\r\n      await expect(controller.patch('test-tenant', mockApiKeyInfo as any, {\r\n        updates: { invalid_key: 'value' }\r\n      })).rejects.toThrow('no_valid_keys');\r\n    });\r\n\r\n    it('should pass API key ID as actor', async () => {\r\n      mockSettingsService.update.mockResolvedValue({});\r\n\r\n      await controller.patch('test-tenant', mockApiKeyInfo as any, { updates: validUpdates });\r\n\r\n      expect(settingsService.update).toHaveBeenCalledWith('test-tenant', validUpdates, 'test-key');\r\n    });\r\n\r\n    it('should handle updates with multiple fields', async () => {\r\n      const multipleUpdates = {\r\n        sla_response_minutes: 30,\r\n        duplicate_window_minutes: 90,\r\n        enable_advanced_parser: true,\r\n        brand_display_name: 'Multi-field Update',\r\n        theme_primary_color: '#123456'\r\n      };\r\n\r\n      mockSettingsService.update.mockResolvedValue(multipleUpdates);\r\n\r\n      const result = await controller.patch('test-tenant', mockApiKeyInfo as any, { updates: multipleUpdates });\r\n\r\n      expect(result).toEqual({ settings: multipleUpdates });\r\n      expect(settingsService.update).toHaveBeenCalledWith('test-tenant', multipleUpdates, 'test-key');\r\n    });\r\n\r\n    it('should handle empty updates object', async () => {\r\n      mockSettingsService.update.mockRejectedValue(new Error('no_valid_keys'));\r\n\r\n      await expect(controller.patch('test-tenant', mockApiKeyInfo as any, { updates: {} }))\r\n        .rejects.toThrow('no_valid_keys');\r\n    });\r\n\r\n    it('should handle missing updates in body', async () => {\r\n      mockSettingsService.update.mockRejectedValue(new Error('no_valid_keys'));\r\n\r\n      await expect(controller.patch('test-tenant', mockApiKeyInfo as any, {}))\r\n        .rejects.toThrow('no_valid_keys');\r\n    });\r\n  });\r\n\r\n  describe('authorization', () => {\r\n    it('should have correct route guards configured', () => {\r\n      const controllerGuards = Reflect.getMetadata('__guards__', SettingsController);\r\n      expect(controllerGuards).toBeDefined();\r\n    });\r\n\r\n    it('should require manage:settings scope for updates', () => {\r\n      const updateMethodScopes = Reflect.getMetadata('__scopes__', controller.patch);\r\n      expect(updateMethodScopes).toContain('manage:settings');\r\n    });\r\n\r\n    // Note: GET endpoint doesn't explicitly require scopes in current implementation\r\n    // but is protected by ApiKeyGuard and ScopesGuard at controller level\r\n  });\r\n\r\n  describe('tenant context', () => {\r\n    it('should use tenant ID from path parameter', async () => {\r\n      mockSettingsService.getResolved.mockResolvedValue({});\r\n\r\n      await controller.get('specific-tenant');\r\n\r\n      expect(settingsService.getResolved).toHaveBeenCalledWith('specific-tenant');\r\n    });\r\n\r\n    it('should use tenant ID from path for updates', async () => {\r\n      const mockApiKeyInfo = { keyId: 'test-key' };\r\n      \r\n      mockSettingsService.update.mockResolvedValue({});\r\n\r\n      await controller.patch('specific-tenant', mockApiKeyInfo as any, { updates: { sla_response_minutes: 60 } });\r\n\r\n      expect(settingsService.update).toHaveBeenCalledWith('specific-tenant', expect.any(Object), 'test-key');\r\n    });\r\n  });\r\n\r\n  describe('error handling', () => {\r\n    it('should propagate service errors', async () => {\r\n      const serviceError = new Error('Service unavailable');\r\n      mockSettingsService.getResolved.mockRejectedValue(serviceError);\r\n\r\n      await expect(controller.get('test-tenant')).rejects.toThrow('Service unavailable');\r\n    });\r\n\r\n    it('should handle database connection errors', async () => {\r\n      mockSettingsService.update.mockRejectedValue(new Error('Database connection failed'));\r\n\r\n      const mockApiKeyInfo = { keyId: 'test-key' };\r\n      \r\n      await expect(controller.patch('test-tenant', mockApiKeyInfo as any, { \r\n        updates: { sla_response_minutes: 60 }\r\n      })).rejects.toThrow('Database connection failed');\r\n    });\r\n  });\r\n});\r\n"],"names":["describe","controller","settingsService","mockSettingsService","getResolved","jest","fn","update","mockExecutionContext","switchToHttp","getRequest","tenantId","apiKeyInfo","key","scopes","beforeEach","module","Test","createTestingModule","controllers","SettingsController","providers","provide","SettingsService","useValue","overrideGuard","ApiKeyGuard","canActivate","ScopesGuard","compile","get","afterEach","clearAllMocks","it","expect","toBeDefined","mockSettings","sla_response_minutes","duplicate_window_minutes","enable_advanced_parser","brand_display_name","theme_primary_color","mockResolvedValue","result","toEqual","settings","toHaveBeenCalledWith","mockRejectedValue","Error","rejects","toThrow","mockApiKeyInfo","keyId","validUpdates","mockUpdatedSettings","patch","updates","invalid_key","multipleUpdates","controllerGuards","Reflect","getMetadata","updateMethodScopes","toContain","any","Object","serviceError"],"mappings":"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"}