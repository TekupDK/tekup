c9f5736d0b79c64d10b348c54f0cbedd
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _leadservice = require("./lead.service.js");
const _metricsservice = require("../metrics/metrics.service.js");
// Minimal mock Prisma + metrics
const createDeps = ()=>{
    const store = {
        leads: [],
        events: []
    };
    const prisma = {
        lead: {
            findMany: jest.fn(async ({ where })=>store.leads.filter((l)=>l.tenantId === where.tenantId)),
            create: jest.fn(async ({ data })=>{
                const rec = {
                    status: 'NEW',
                    createdAt: new Date(),
                    updatedAt: new Date(),
                    ...data,
                    id: data.id || 'L' + (store.leads.length + 1)
                };
                store.leads.push(rec);
                return rec;
            }),
            findFirst: jest.fn(async ({ where })=>{
                // duplicate path OR query or by id lookup
                if (where.id) {
                    return store.leads.find((l)=>l.id === where.id && l.tenantId === where.tenantId);
                }
                // duplicate detection shape: { tenantId, status: 'NEW', createdAt: { gte: Date }, OR: [ { payload:... }, ... ] }
                return store.leads.find((l)=>l.tenantId === where.tenantId && l.status === where.status && l.createdAt >= where.createdAt.gte && where.OR.some((cond)=>{
                        if (cond?.payload?.path?.[0] === 'email') {
                            return (l.payload?.email || '').toLowerCase() === cond.payload.equals;
                        }
                        if (cond?.payload?.path?.[0] === 'phone') {
                            return (l.payload?.phone || '') === cond.payload.equals;
                        }
                        return false;
                    }));
            }),
            update: jest.fn(async ({ where, data })=>{
                const i = store.leads.findIndex((l)=>l.id === where.id);
                store.leads[i] = {
                    ...store.leads[i],
                    ...data
                };
                return store.leads[i];
            })
        },
        leadEvent: {
            create: jest.fn(async ({ data })=>{
                store.events.push({
                    ...data,
                    id: data.id || 'E' + (store.events.length + 1),
                    createdAt: new Date()
                });
                return data;
            }),
            findMany: jest.fn(async ({ where })=>store.events.filter((e)=>e.leadId === where.leadId))
        }
    };
    const metrics = new _metricsservice.MetricsService();
    const settings = {
        getResolved: jest.fn(async ()=>({
                duplicate_window_minutes: 60
            }))
    };
    return {
        prisma,
        metrics,
        settings,
        store
    };
};
describe('LeadService', ()=>{
    it('creates lead with NEW and transitions to CONTACTED once', async ()=>{
        const { prisma, metrics, settings } = createDeps();
        const svc = new _leadservice.LeadService(prisma, metrics, settings);
        const lead = await svc.create({
            tenantId: 't1',
            source: 'form'
        });
        expect(lead.status).toBe('NEW');
        const updated = await svc.changeStatus(lead.id, 't1', 'CONTACTED');
        expect(updated.status).toBe('CONTACTED');
        const updatedAgain = await svc.changeStatus(lead.id, 't1', 'CONTACTED');
        expect(updatedAgain.status).toBe('CONTACTED'); // idempotent
        const events = await svc.events(lead.id, 't1');
        expect(events.length).toBe(1);
    });
    it('deduplicates leads within window', async ()=>{
        const { prisma, metrics, settings } = createDeps();
        const svc = new _leadservice.LeadService(prisma, metrics, settings);
        const first = await svc.create({
            tenantId: 't1',
            source: 'form',
            payload: {
                email: 'User@Example.com'
            }
        });
        const dup = await svc.create({
            tenantId: 't1',
            source: 'form',
            payload: {
                email: 'user@example.com'
            }
        });
        expect(dup.id).toBe(first.id);
    });
});

//# sourceMappingURL=data:application/json;base64,