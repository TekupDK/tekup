{"version":3,"sources":["C:\\Users\\empir\\Tekup-org\\apps\\flow-api\\src\\lead\\lead.service.spec.ts"],"sourcesContent":["import { LeadService } from './lead.service.js';\r\nimport { PrismaService } from '../prisma/prisma.service.js';\r\nimport { MetricsService } from '../metrics/metrics.service.js';\r\nimport { SettingsService } from '../settings/settings.service.js';\r\n\r\ntype MockStore = { leads: any[]; events: any[] };\r\n\r\n// Minimal mock Prisma + metrics\r\nconst createDeps = () => {\r\n  const store: MockStore = { leads: [], events: [] };\r\n  const prisma = {\r\n    lead: {\r\n      findMany: jest.fn(async ({ where }: any) => store.leads.filter((l: any) => l.tenantId === where.tenantId)),\r\n  create: jest.fn(async ({ data }: any) => { const rec = { status: 'NEW', createdAt: new Date(), updatedAt: new Date(), ...data, id: data.id || 'L'+(store.leads.length+1) }; store.leads.push(rec); return rec; }),\r\n      findFirst: jest.fn(async ({ where }: any) => {\r\n        // duplicate path OR query or by id lookup\r\n        if (where.id) {\r\n          return store.leads.find((l: any) => l.id === where.id && l.tenantId === where.tenantId);\r\n        }\r\n        // duplicate detection shape: { tenantId, status: 'NEW', createdAt: { gte: Date }, OR: [ { payload:... }, ... ] }\r\n        return store.leads.find((l: any) => l.tenantId === where.tenantId && l.status === where.status && l.createdAt >= where.createdAt.gte && where.OR.some((cond: any) => {\r\n          if (cond?.payload?.path?.[0] === 'email') {\r\n            return (l.payload?.email || '').toLowerCase() === cond.payload.equals;\r\n          }\r\n          if (cond?.payload?.path?.[0] === 'phone') {\r\n            return (l.payload?.phone || '') === cond.payload.equals;\r\n          }\r\n          return false;\r\n        }));\r\n      }),\r\n      update: jest.fn(async ({ where, data }: any) => { const i = store.leads.findIndex((l: any) => l.id === where.id); store.leads[i] = { ...store.leads[i], ...data }; return store.leads[i]; })\r\n    },\r\n    leadEvent: { \r\n      create: jest.fn(async ({ data }: any) => { store.events.push({ ...data, id: data.id || 'E'+(store.events.length+1), createdAt: new Date() }); return data; }),\r\n      findMany: jest.fn(async ({ where }: any) => store.events.filter(e => e.leadId === where.leadId))\r\n    }\r\n  } as unknown as PrismaService;\r\n  const metrics = new MetricsService();\r\n  const settings: Partial<SettingsService> = {\r\n    getResolved: jest.fn(async () => ({ duplicate_window_minutes: 60 }))\r\n  } as any;\r\n  return { prisma, metrics, settings, store };\r\n};\r\n\r\ndescribe('LeadService', () => {\r\n  it('creates lead with NEW and transitions to CONTACTED once', async () => {\r\n    const { prisma, metrics, settings } = createDeps();\r\n    const svc = new LeadService(prisma, metrics, settings as SettingsService);\r\n    const lead = await svc.create({ tenantId: 't1', source: 'form' });\r\n    expect(lead.status).toBe('NEW');\r\n    const updated = await svc.changeStatus(lead.id, 't1', 'CONTACTED');\r\n    expect(updated.status).toBe('CONTACTED');\r\n    const updatedAgain = await svc.changeStatus(lead.id, 't1', 'CONTACTED');\r\n    expect(updatedAgain.status).toBe('CONTACTED'); // idempotent\r\n  const events = await svc.events(lead.id, 't1');\r\n  expect(events.length).toBe(1);\r\n  });\r\n\r\n  it('deduplicates leads within window', async () => {\r\n    const { prisma, metrics, settings } = createDeps();\r\n    const svc = new LeadService(prisma, metrics, settings as SettingsService);\r\n    const first = await svc.create({ tenantId: 't1', source: 'form', payload: { email: 'User@Example.com' } });\r\n    const dup = await svc.create({ tenantId: 't1', source: 'form', payload: { email: 'user@example.com' } });\r\n    expect(dup.id).toBe(first.id);\r\n  });\r\n});\r\n"],"names":["createDeps","store","leads","events","prisma","lead","findMany","jest","fn","where","filter","l","tenantId","create","data","rec","status","createdAt","Date","updatedAt","id","length","push","findFirst","find","gte","OR","some","cond","payload","path","email","toLowerCase","equals","phone","update","i","findIndex","leadEvent","e","leadId","metrics","MetricsService","settings","getResolved","duplicate_window_minutes","describe","it","svc","LeadService","source","expect","toBe","updated","changeStatus","updatedAgain","first","dup"],"mappings":"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"}