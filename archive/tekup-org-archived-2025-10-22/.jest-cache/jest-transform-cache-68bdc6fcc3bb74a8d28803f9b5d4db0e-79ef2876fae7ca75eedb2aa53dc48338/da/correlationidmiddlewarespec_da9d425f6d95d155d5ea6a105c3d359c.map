{"version":3,"sources":["C:\\Users\\empir\\Tekup-org\\apps\\flow-api\\src\\common\\logging\\__tests__\\correlation-id.middleware.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { Request, Response, NextFunction } from 'express';\r\nimport { CorrelationIdMiddleware, RequestWithContext } from '../correlation-id.middleware.js';\r\nimport { StructuredLoggerService } from '../structured-logger.service.js';\r\n\r\ndescribe('CorrelationIdMiddleware', () => {\r\n  let middleware: CorrelationIdMiddleware;\r\n  let mockLogger: jest.Mocked<StructuredLoggerService>;\r\n  let mockRequest: any;\r\n  let mockResponse: Partial<Response>;\r\n  let mockNext: jest.MockedFunction<NextFunction>;\r\n\r\n  beforeEach(async () => {\r\n    mockLogger = {\r\n      runWithContext: jest.fn((context, fn) => fn()),\r\n      generateCorrelationId: jest.fn(() => 'generated-correlation-id'),\r\n    } as any;\r\n\r\n    mockRequest = {\r\n      headers: {},\r\n      path: '/api/leads',\r\n      query: {},\r\n    };\r\n\r\n    mockResponse = {\r\n      setHeader: jest.fn(),\r\n    };\r\n\r\n    mockNext = jest.fn();\r\n\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        CorrelationIdMiddleware,\r\n        { provide: StructuredLoggerService, useValue: mockLogger },\r\n      ],\r\n    }).compile();\r\n\r\n    middleware = module.get<CorrelationIdMiddleware>(CorrelationIdMiddleware);\r\n  });\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(middleware).toBeDefined();\r\n  });\r\n\r\n  describe('correlation ID handling', () => {\r\n    it('should generate new correlation ID when none exists', () => {\r\n      middleware.use(\r\n        mockRequest as RequestWithContext,\r\n        mockResponse as Response,\r\n        mockNext\r\n      );\r\n\r\n      expect(mockRequest.correlationId).toBe('generated-correlation-id');\r\n      expect(mockResponse.setHeader).toHaveBeenCalledWith('X-Correlation-ID', 'generated-correlation-id');\r\n      expect(mockNext).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should use existing correlation ID from x-correlation-id header', () => {\r\n      const existingId = 'existing-correlation-id';\r\n      mockRequest.headers!['x-correlation-id'] = existingId;\r\n\r\n      middleware.use(\r\n        mockRequest as RequestWithContext,\r\n        mockResponse as Response,\r\n        mockNext\r\n      );\r\n\r\n      expect(mockRequest.correlationId).toBe(existingId);\r\n      expect(mockResponse.setHeader).toHaveBeenCalledWith('X-Correlation-ID', existingId);\r\n      expect(mockLogger.generateCorrelationId).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should use existing correlation ID from x-request-id header', () => {\r\n      const existingId = 'existing-request-id';\r\n      mockRequest.headers!['x-request-id'] = existingId;\r\n\r\n      middleware.use(\r\n        mockRequest as RequestWithContext,\r\n        mockResponse as Response,\r\n        mockNext\r\n      );\r\n\r\n      expect(mockRequest.correlationId).toBe(existingId);\r\n      expect(mockResponse.setHeader).toHaveBeenCalledWith('X-Correlation-ID', existingId);\r\n    });\r\n\r\n    it('should validate correlation ID format', () => {\r\n      // Valid UUID\r\n      const validUuid = '123e4567-e89b-12d3-a456-426614174000';\r\n      mockRequest.headers!['x-correlation-id'] = validUuid;\r\n\r\n      middleware.use(\r\n        mockRequest as RequestWithContext,\r\n        mockResponse as Response,\r\n        mockNext\r\n      );\r\n\r\n      expect(mockRequest.correlationId).toBe(validUuid);\r\n\r\n      // Invalid format should generate new ID\r\n      mockRequest.headers!['x-correlation-id'] = 'invalid-format!@#';\r\n      middleware.use(\r\n        mockRequest as RequestWithContext,\r\n        mockResponse as Response,\r\n        mockNext\r\n      );\r\n\r\n      expect(mockRequest.correlationId).toBe('generated-correlation-id');\r\n    });\r\n\r\n    it('should handle array header values', () => {\r\n      mockRequest.headers!['x-correlation-id'] = ['first-id', 'second-id'] as any;\r\n\r\n      middleware.use(\r\n        mockRequest as RequestWithContext,\r\n        mockResponse as Response,\r\n        mockNext\r\n      );\r\n\r\n      expect(mockRequest.correlationId).toBe('generated-correlation-id');\r\n      expect(mockLogger.generateCorrelationId).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('request ID generation', () => {\r\n    it('should generate unique request ID', () => {\r\n      middleware.use(\r\n        mockRequest as RequestWithContext,\r\n        mockResponse as Response,\r\n        mockNext\r\n      );\r\n\r\n      expect(mockRequest.requestId).toBeDefined();\r\n      expect(mockRequest.requestId).toMatch(/^req_[a-z0-9]+_[a-z0-9]+$/);\r\n      expect(mockResponse.setHeader).toHaveBeenCalledWith('X-Request-ID', mockRequest.requestId);\r\n    });\r\n\r\n    it('should generate different request IDs for different requests', () => {\r\n      const request1 = { ...mockRequest } as RequestWithContext;\r\n      const request2 = { ...mockRequest } as RequestWithContext;\r\n\r\n      middleware.use(request1, mockResponse as Response, mockNext);\r\n      middleware.use(request2, mockResponse as Response, mockNext);\r\n\r\n      expect(request1.requestId).toBeDefined();\r\n      expect(request2.requestId).toBeDefined();\r\n      expect(request1.requestId).not.toBe(request2.requestId);\r\n    });\r\n  });\r\n\r\n  describe('tenant ID extraction', () => {\r\n    it('should extract tenant ID from API key header', () => {\r\n      mockRequest.headers!['x-tenant-key'] = 'tenant-api-key';\r\n      (mockRequest as any).tenantId = 'tenant123';\r\n\r\n      middleware.use(\r\n        mockRequest as RequestWithContext,\r\n        mockResponse as Response,\r\n        mockNext\r\n      );\r\n\r\n      expect(mockLogger.runWithContext).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          tenantId: 'tenant123',\r\n        }),\r\n        expect.any(Function)\r\n      );\r\n    });\r\n\r\n    it('should extract tenant ID from URL path patterns', () => {\r\n      const testCases = [\r\n        { path: '/api/tenants/tenant456/leads', expected: 'tenant456' },\r\n        { path: '/t/tenant789/dashboard', expected: 'tenant789' },\r\n        { path: '/tenant/tenant101/settings', expected: 'tenant101' },\r\n      ];\r\n\r\n      testCases.forEach(({ path, expected }) => {\r\n        mockRequest.path = path;\r\n\r\n        middleware.use(\r\n          mockRequest as RequestWithContext,\r\n          mockResponse as Response,\r\n          mockNext\r\n        );\r\n\r\n        expect(mockLogger.runWithContext).toHaveBeenCalledWith(\r\n          expect.objectContaining({\r\n            tenantId: expected,\r\n          }),\r\n          expect.any(Function)\r\n        );\r\n      });\r\n    });\r\n\r\n    it('should extract tenant ID from query parameter', () => {\r\n      mockRequest.query!.tenantId = 'tenant-from-query';\r\n\r\n      middleware.use(\r\n        mockRequest as RequestWithContext,\r\n        mockResponse as Response,\r\n        mockNext\r\n      );\r\n\r\n      expect(mockLogger.runWithContext).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          tenantId: 'tenant-from-query',\r\n        }),\r\n        expect.any(Function)\r\n      );\r\n    });\r\n\r\n    it('should handle missing tenant ID', () => {\r\n      middleware.use(\r\n        mockRequest as RequestWithContext,\r\n        mockResponse as Response,\r\n        mockNext\r\n      );\r\n\r\n      expect(mockLogger.runWithContext).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          tenantId: undefined,\r\n        }),\r\n        expect.any(Function)\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('user ID extraction', () => {\r\n    it('should extract user ID from user object', () => {\r\n      (mockRequest as any).user = { id: 'user123' };\r\n\r\n      middleware.use(\r\n        mockRequest as RequestWithContext,\r\n        mockResponse as Response,\r\n        mockNext\r\n      );\r\n\r\n      expect(mockLogger.runWithContext).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          userId: 'user123',\r\n        }),\r\n        expect.any(Function)\r\n      );\r\n    });\r\n\r\n    it('should extract user ID from user.userId property', () => {\r\n      (mockRequest as any).user = { userId: 'user456' };\r\n\r\n      middleware.use(\r\n        mockRequest as RequestWithContext,\r\n        mockResponse as Response,\r\n        mockNext\r\n      );\r\n\r\n      expect(mockLogger.runWithContext).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          userId: 'user456',\r\n        }),\r\n        expect.any(Function)\r\n      );\r\n    });\r\n\r\n    it('should extract user ID from user.sub property', () => {\r\n      (mockRequest as any).user = { sub: 'user789' };\r\n\r\n      middleware.use(\r\n        mockRequest as RequestWithContext,\r\n        mockResponse as Response,\r\n        mockNext\r\n      );\r\n\r\n      expect(mockLogger.runWithContext).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          userId: 'user789',\r\n        }),\r\n        expect.any(Function)\r\n      );\r\n    });\r\n\r\n    it('should extract user ID from x-user-id header', () => {\r\n      mockRequest.headers!['x-user-id'] = 'header-user-id';\r\n\r\n      middleware.use(\r\n        mockRequest as RequestWithContext,\r\n        mockResponse as Response,\r\n        mockNext\r\n      );\r\n\r\n      expect(mockLogger.runWithContext).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          userId: 'header-user-id',\r\n        }),\r\n        expect.any(Function)\r\n      );\r\n    });\r\n\r\n    it('should handle missing user ID', () => {\r\n      middleware.use(\r\n        mockRequest as RequestWithContext,\r\n        mockResponse as Response,\r\n        mockNext\r\n      );\r\n\r\n      expect(mockLogger.runWithContext).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          userId: undefined,\r\n        }),\r\n        expect.any(Function)\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('context setup', () => {\r\n    it('should set up complete logging context', () => {\r\n      const correlationId = 'test-correlation-id';\r\n      mockRequest.headers!['x-correlation-id'] = correlationId;\r\n      mockRequest.headers!['x-tenant-key'] = 'tenant-key';\r\n      mockRequest.headers!['x-user-id'] = 'user123';\r\n      (mockRequest as any).tenantId = 'tenant456';\r\n      mockRequest.path = '/api/leads';\r\n\r\n      middleware.use(\r\n        mockRequest as RequestWithContext,\r\n        mockResponse as Response,\r\n        mockNext\r\n      );\r\n\r\n      expect(mockLogger.runWithContext).toHaveBeenCalledWith(\r\n        {\r\n          correlationId,\r\n          requestId: expect.stringMatching(/^req_[a-z0-9]+_[a-z0-9]+$/),\r\n          tenantId: 'tenant456',\r\n          userId: 'user123',\r\n        },\r\n        expect.any(Function)\r\n      );\r\n\r\n      expect(mockNext).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should call next function within context', () => {\r\n      let contextDuringNext: any;\r\n\r\n      mockLogger.runWithContext.mockImplementation((context, fn) => {\r\n        contextDuringNext = context;\r\n        return fn();\r\n      });\r\n\r\n      middleware.use(\r\n        mockRequest as RequestWithContext,\r\n        mockResponse as Response,\r\n        mockNext\r\n      );\r\n\r\n      expect(contextDuringNext).toBeDefined();\r\n      expect(contextDuringNext.correlationId).toBeDefined();\r\n      expect(contextDuringNext.requestId).toBeDefined();\r\n      expect(mockNext).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('correlation ID validation', () => {\r\n    it('should validate UUID format', () => {\r\n      const validUuids = [\r\n        '123e4567-e89b-12d3-a456-426614174000',\r\n        'f47ac10b-58cc-4372-a567-0e02b2c3d479',\r\n        '6ba7b810-9dad-11d1-80b4-00c04fd430c8',\r\n      ];\r\n\r\n      validUuids.forEach(uuid => {\r\n        expect(middleware['isValidCorrelationId'](uuid)).toBe(true);\r\n      });\r\n    });\r\n\r\n    it('should validate custom ID format', () => {\r\n      const validCustomIds = [\r\n        'custom-id-123',\r\n        'req_12345_abcdef',\r\n        'trace-abc123def456',\r\n        '12345678',\r\n      ];\r\n\r\n      validCustomIds.forEach(id => {\r\n        expect(middleware['isValidCorrelationId'](id)).toBe(true);\r\n      });\r\n    });\r\n\r\n    it('should reject invalid formats', () => {\r\n      const invalidIds = [\r\n        'short',\r\n        'invalid!@#$%',\r\n        'too-long-id-that-exceeds-the-maximum-length-of-64-characters-and-should-be-rejected',\r\n        '',\r\n        '   ',\r\n      ];\r\n\r\n      invalidIds.forEach(id => {\r\n        expect(middleware['isValidCorrelationId'](id)).toBe(false);\r\n      });\r\n    });\r\n  });\r\n});"],"names":["describe","middleware","mockLogger","mockRequest","mockResponse","mockNext","beforeEach","runWithContext","jest","fn","context","generateCorrelationId","headers","path","query","setHeader","module","Test","createTestingModule","providers","CorrelationIdMiddleware","provide","StructuredLoggerService","useValue","compile","get","clearAllMocks","it","expect","toBeDefined","use","correlationId","toBe","toHaveBeenCalledWith","toHaveBeenCalled","existingId","not","validUuid","requestId","toMatch","request1","request2","tenantId","objectContaining","any","Function","testCases","expected","forEach","undefined","user","id","userId","sub","stringMatching","contextDuringNext","mockImplementation","validUuids","uuid","validCustomIds","invalidIds"],"mappings":"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"}