472a87784163904d9f0986065f9e9f48
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get baseSchema () {
        return baseSchema;
    },
    get clientConfigPick () {
        return clientConfigPick;
    },
    get loadConfig () {
        return loadConfig;
    },
    get logConfig () {
        return logConfig;
    },
    get requireConfig () {
        return requireConfig;
    }
});
const _zod = require("zod");
// Note: relies on @types/node in the root tsconfig; if absent, add locally.
// Common schema for core service endpoints
const Url = _zod.z.string().url();
const baseSchema = _zod.z.object({
    NODE_ENV: _zod.z.enum([
        'development',
        'test',
        'production'
    ]).default('development'),
    // Flow API (leads & compliance)
    FLOW_API_URL: Url.default('http://localhost:4000'),
    FLOW_API_KEY: _zod.z.string().min(10).optional(),
    // Secure Platform (incidents) â€“ future
    SECURE_API_URL: Url.optional(),
    SECURE_API_KEY: _zod.z.string().optional(),
    // Inbox AI
    INBOX_API_URL: Url.optional(),
    INBOX_API_KEY: _zod.z.string().optional(),
    // Website (marketing -> ingest)
    WEBSITE_TENANT_KEY: _zod.z.string().optional(),
    // WebSocket endpoints
    FLOW_WS_URL: Url.optional(),
    // AI Providers
    ANTHROPIC_API_KEY: _zod.z.string().optional(),
    CLAUDE_API_KEY: _zod.z.string().optional(),
    GEMINI_API_KEY: _zod.z.string().optional(),
    GEMINI_MODEL: _zod.z.string().optional(),
    GEMINI_TEMPERATURE: _zod.z.string().optional(),
    GEMINI_MAX_TOKENS: _zod.z.string().optional(),
    // Internal service endpoints/keys
    LEAD_API_URL: Url.optional(),
    LEAD_API_KEY: _zod.z.string().optional(),
    CRM_API_URL: Url.optional(),
    CRM_API_KEY: _zod.z.string().optional(),
    VOICE_API_URL: Url.optional(),
    VOICE_API_KEY: _zod.z.string().optional(),
    AGENTROOMS_API_URL: Url.optional(),
    AGENTROOMS_API_KEY: _zod.z.string().optional(),
    // Feature flags
    FEATURE_INCIDENTS: _zod.z.string().transform((v)=>v === 'true').optional(),
    FEATURE_LEADS: _zod.z.string().transform((v)=>v === 'true').optional(),
    FEATURE_INBOX: _zod.z.string().transform((v)=>v === 'true').optional(),
    // Analytics
    PLAUSIBLE_DOMAIN: _zod.z.string().optional(),
    PLAUSIBLE_API_HOST: Url.optional(),
    // Mobile specific
    MOBILE_API_BASE: Url.optional(),
    // Platform build / infra (added for centralization)
    PX_API_PORT: _zod.z.string().regex(/^\d+$/).optional(),
    PX_AUTO_SEED: _zod.z.string().transform((v)=>v === 'true').optional(),
    // Canonical DB URL (preferred going forward)
    DATABASE_URL: _zod.z.string().optional(),
    // Legacy alias still referenced by Prisma schema (will be phased out)
    PX_DATABASE_URL: _zod.z.string().optional()
});
function loadConfig(opts = {}) {
    const { source, required = [], mask = [
        'FLOW_API_KEY',
        'SECURE_API_KEY',
        'WEBSITE_TENANT_KEY',
        'GEMINI_API_KEY',
        'ANTHROPIC_API_KEY',
        'CLAUDE_API_KEY',
        'LEAD_API_KEY',
        'CRM_API_KEY',
        'VOICE_API_KEY',
        'AGENTROOMS_API_KEY',
        'INBOX_API_KEY'
    ], allowProcessEnvFallback = true, onError } = opts;
    const raw = {
        ...allowProcessEnvFallback ? process.env : {},
        ...source || {}
    };
    const missing = required.filter((k)=>!raw[String(k)]);
    if (missing.length) {
        const msg = missing.map((k)=>`Missing required env: ${String(k)}`).join(', ');
        onError?.(missing.map((m)=>`Missing required env: ${String(m)}`));
        throw new Error(msg);
    }
    const parsed = baseSchema.safeParse(raw);
    if (!parsed.success) {
        const issues = parsed.error.issues.map((i)=>`${i.path.join('.')}: ${i.message}`);
        onError?.(issues);
        throw new Error('Invalid configuration: ' + issues.join('; '));
    }
    const config = parsed.data;
    // Bidirectional aliasing so either env var works; prefer DATABASE_URL.
    if (!config.DATABASE_URL && config.PX_DATABASE_URL) {
        config.DATABASE_URL = config.PX_DATABASE_URL;
    } else if (!config.PX_DATABASE_URL && config.DATABASE_URL) {
        config.PX_DATABASE_URL = config.DATABASE_URL;
    }
    const redacted = Object.fromEntries(Object.entries(config).map(([k, v])=>[
            k,
            mask.includes(k) && v ? '***REDACTED***' : v
        ]));
    return {
        config,
        redacted
    };
}
function requireConfig(...keys) {
    const { config } = loadConfig({
        required: keys
    });
    return config;
}
function clientConfigPick(keys) {
    const { config } = loadConfig();
    const subset = {};
    keys.forEach((k)=>{
        const v = config[k];
        if (v !== undefined) subset[k] = v;
    });
    return subset;
}
// Simple logger to avoid @tekup/shared dependency
const logger = {
    info: (label, data)=>console.log(`[${label}]`, data)
};
function logConfig(label = 'config:init') {
    const { redacted } = loadConfig();
    // eslint-disable-next-line no-console
    logger.info(`[${label}]`, redacted);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZW1waXJcXFRla3VwLW9yZ1xccGFja2FnZXNcXGNvbmZpZ1xcc3JjXFxpbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB6IH0gZnJvbSAnem9kJztcclxuLy8gRGVjbGFyZSBwcm9jZXNzIGZvciBlbnZpcm9ubWVudHMgd2hlcmUgQHR5cGVzL25vZGUgaXNuJ3QgZ2xvYmFsbHkgaW5jbHVkZWQgKHdpbGwgYmUgbWVyZ2VkIGlmIHByZXNlbnQpXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbmRlY2xhcmUgY29uc3QgcHJvY2VzczogYW55O1xyXG4vLyBOb3RlOiByZWxpZXMgb24gQHR5cGVzL25vZGUgaW4gdGhlIHJvb3QgdHNjb25maWc7IGlmIGFic2VudCwgYWRkIGxvY2FsbHkuXHJcblxyXG4vLyBDb21tb24gc2NoZW1hIGZvciBjb3JlIHNlcnZpY2UgZW5kcG9pbnRzXHJcbmNvbnN0IFVybCA9IHouc3RyaW5nKCkudXJsKCk7XHJcblxyXG5leHBvcnQgY29uc3QgYmFzZVNjaGVtYSA9IHoub2JqZWN0KHtcclxuICBOT0RFX0VOVjogei5lbnVtKFsnZGV2ZWxvcG1lbnQnLCAndGVzdCcsICdwcm9kdWN0aW9uJ10pLmRlZmF1bHQoJ2RldmVsb3BtZW50JyksXHJcblxyXG4gIC8vIEZsb3cgQVBJIChsZWFkcyAmIGNvbXBsaWFuY2UpXHJcbiAgRkxPV19BUElfVVJMOiBVcmwuZGVmYXVsdCgnaHR0cDovL2xvY2FsaG9zdDo0MDAwJyksXHJcbiAgRkxPV19BUElfS0VZOiB6LnN0cmluZygpLm1pbigxMCkub3B0aW9uYWwoKSxcclxuXHJcbiAgLy8gU2VjdXJlIFBsYXRmb3JtIChpbmNpZGVudHMpIOKAkyBmdXR1cmVcclxuICBTRUNVUkVfQVBJX1VSTDogVXJsLm9wdGlvbmFsKCksXHJcbiAgU0VDVVJFX0FQSV9LRVk6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcclxuXHJcbiAgLy8gSW5ib3ggQUlcclxuICBJTkJPWF9BUElfVVJMOiBVcmwub3B0aW9uYWwoKSxcclxuICBJTkJPWF9BUElfS0VZOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXHJcblxyXG4gIC8vIFdlYnNpdGUgKG1hcmtldGluZyAtPiBpbmdlc3QpXHJcbiAgV0VCU0lURV9URU5BTlRfS0VZOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXHJcblxyXG4gIC8vIFdlYlNvY2tldCBlbmRwb2ludHNcclxuICBGTE9XX1dTX1VSTDogVXJsLm9wdGlvbmFsKCksXHJcblxyXG4gIC8vIEFJIFByb3ZpZGVyc1xyXG4gIEFOVEhST1BJQ19BUElfS0VZOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXHJcbiAgQ0xBVURFX0FQSV9LRVk6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcclxuICBHRU1JTklfQVBJX0tFWTogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxyXG4gIEdFTUlOSV9NT0RFTDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxyXG4gIEdFTUlOSV9URU1QRVJBVFVSRTogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxyXG4gIEdFTUlOSV9NQVhfVE9LRU5TOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXHJcblxyXG4gIC8vIEludGVybmFsIHNlcnZpY2UgZW5kcG9pbnRzL2tleXNcclxuICBMRUFEX0FQSV9VUkw6IFVybC5vcHRpb25hbCgpLFxyXG4gIExFQURfQVBJX0tFWTogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxyXG4gIENSTV9BUElfVVJMOiBVcmwub3B0aW9uYWwoKSxcclxuICBDUk1fQVBJX0tFWTogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxyXG4gIFZPSUNFX0FQSV9VUkw6IFVybC5vcHRpb25hbCgpLFxyXG4gIFZPSUNFX0FQSV9LRVk6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcclxuICBBR0VOVFJPT01TX0FQSV9VUkw6IFVybC5vcHRpb25hbCgpLFxyXG4gIEFHRU5UUk9PTVNfQVBJX0tFWTogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxyXG5cclxuICAvLyBGZWF0dXJlIGZsYWdzXHJcbiAgRkVBVFVSRV9JTkNJREVOVFM6IHouc3RyaW5nKCkudHJhbnNmb3JtKCh2OiBzdHJpbmcpID0+IHYgPT09ICd0cnVlJykub3B0aW9uYWwoKSxcclxuICBGRUFUVVJFX0xFQURTOiB6LnN0cmluZygpLnRyYW5zZm9ybSgodjogc3RyaW5nKSA9PiB2ID09PSAndHJ1ZScpLm9wdGlvbmFsKCksXHJcbiAgRkVBVFVSRV9JTkJPWDogei5zdHJpbmcoKS50cmFuc2Zvcm0oKHY6IHN0cmluZykgPT4gdiA9PT0gJ3RydWUnKS5vcHRpb25hbCgpLFxyXG5cclxuICAvLyBBbmFseXRpY3NcclxuICBQTEFVU0lCTEVfRE9NQUlOOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXHJcbiAgUExBVVNJQkxFX0FQSV9IT1NUOiBVcmwub3B0aW9uYWwoKSxcclxuXHJcbiAgLy8gTW9iaWxlIHNwZWNpZmljXHJcbiAgTU9CSUxFX0FQSV9CQVNFOiBVcmwub3B0aW9uYWwoKSxcclxuXHJcbiAgLy8gUGxhdGZvcm0gYnVpbGQgLyBpbmZyYSAoYWRkZWQgZm9yIGNlbnRyYWxpemF0aW9uKVxyXG4gIFBYX0FQSV9QT1JUOiB6LnN0cmluZygpLnJlZ2V4KC9eXFxkKyQvKS5vcHRpb25hbCgpLFxyXG4gIFBYX0FVVE9fU0VFRDogei5zdHJpbmcoKS50cmFuc2Zvcm0oKHY6IHN0cmluZykgPT4gdiA9PT0gJ3RydWUnKS5vcHRpb25hbCgpLFxyXG4gIC8vIENhbm9uaWNhbCBEQiBVUkwgKHByZWZlcnJlZCBnb2luZyBmb3J3YXJkKVxyXG4gIERBVEFCQVNFX1VSTDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxyXG4gIC8vIExlZ2FjeSBhbGlhcyBzdGlsbCByZWZlcmVuY2VkIGJ5IFByaXNtYSBzY2hlbWEgKHdpbGwgYmUgcGhhc2VkIG91dClcclxuICBQWF9EQVRBQkFTRV9VUkw6IHouc3RyaW5nKCkub3B0aW9uYWwoKVxyXG59KTtcclxuXHJcbmV4cG9ydCB0eXBlIEJhc2VDb25maWcgPSB6LmluZmVyPHR5cGVvZiBiYXNlU2NoZW1hPjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTG9hZE9wdGlvbnMge1xyXG4gIHNvdXJjZT86IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IHVuZGVmaW5lZD47XHJcbiAgcmVxdWlyZWQ/OiAoa2V5b2YgQmFzZUNvbmZpZylbXTtcclxuICBtYXNrPzogKGtleW9mIEJhc2VDb25maWcpW107XHJcbiAgYWxsb3dQcm9jZXNzRW52RmFsbGJhY2s/OiBib29sZWFuO1xyXG4gIG9uRXJyb3I/OiAoZXJyb3JzOiBzdHJpbmdbXSkgPT4gdm9pZDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRDb25maWcob3B0czogTG9hZE9wdGlvbnMgPSB7fSkge1xyXG4gIGNvbnN0IHsgc291cmNlLCByZXF1aXJlZCA9IFtdLCBtYXNrID0gWydGTE9XX0FQSV9LRVknLCAnU0VDVVJFX0FQSV9LRVknLCAnV0VCU0lURV9URU5BTlRfS0VZJywgJ0dFTUlOSV9BUElfS0VZJywgJ0FOVEhST1BJQ19BUElfS0VZJywgJ0NMQVVERV9BUElfS0VZJywgJ0xFQURfQVBJX0tFWScsICdDUk1fQVBJX0tFWScsICdWT0lDRV9BUElfS0VZJywgJ0FHRU5UUk9PTVNfQVBJX0tFWScsICdJTkJPWF9BUElfS0VZJ10sIGFsbG93UHJvY2Vzc0VudkZhbGxiYWNrID0gdHJ1ZSwgb25FcnJvciB9ID0gb3B0cztcclxuICBjb25zdCByYXc6IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IHVuZGVmaW5lZD4gPSB7IC4uLihhbGxvd1Byb2Nlc3NFbnZGYWxsYmFjayA/IChwcm9jZXNzIGFzIGFueSkuZW52IDoge30pLCAuLi4oc291cmNlIHx8IHt9KSB9O1xyXG5cclxuICBjb25zdCBtaXNzaW5nID0gcmVxdWlyZWQuZmlsdGVyKGsgPT4gIXJhd1tTdHJpbmcoayldKTtcclxuICBpZiAobWlzc2luZy5sZW5ndGgpIHtcclxuICBjb25zdCBtc2cgPSBtaXNzaW5nLm1hcChrID0+IGBNaXNzaW5nIHJlcXVpcmVkIGVudjogJHtTdHJpbmcoayl9YCkuam9pbignLCAnKTtcclxuICBvbkVycm9yPy4obWlzc2luZy5tYXAobSA9PiBgTWlzc2luZyByZXF1aXJlZCBlbnY6ICR7U3RyaW5nKG0pfWApKTtcclxuICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgcGFyc2VkID0gYmFzZVNjaGVtYS5zYWZlUGFyc2UocmF3KTtcclxuICBpZiAoIXBhcnNlZC5zdWNjZXNzKSB7XHJcbiAgY29uc3QgaXNzdWVzID0gcGFyc2VkLmVycm9yLmlzc3Vlcy5tYXAoKGk6IGFueSkgPT4gYCR7aS5wYXRoLmpvaW4oJy4nKX06ICR7aS5tZXNzYWdlfWApO1xyXG4gICAgb25FcnJvcj8uKGlzc3Vlcyk7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29uZmlndXJhdGlvbjogJyArIGlzc3Vlcy5qb2luKCc7ICcpKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IGNvbmZpZyA9IHBhcnNlZC5kYXRhIGFzIEJhc2VDb25maWc7XHJcblxyXG4gIC8vIEJpZGlyZWN0aW9uYWwgYWxpYXNpbmcgc28gZWl0aGVyIGVudiB2YXIgd29ya3M7IHByZWZlciBEQVRBQkFTRV9VUkwuXHJcbiAgaWYgKCEoY29uZmlnIGFzIGFueSkuREFUQUJBU0VfVVJMICYmIChjb25maWcgYXMgYW55KS5QWF9EQVRBQkFTRV9VUkwpIHtcclxuICAgIChjb25maWcgYXMgYW55KS5EQVRBQkFTRV9VUkwgPSAoY29uZmlnIGFzIGFueSkuUFhfREFUQUJBU0VfVVJMO1xyXG4gIH0gZWxzZSBpZiAoIShjb25maWcgYXMgYW55KS5QWF9EQVRBQkFTRV9VUkwgJiYgKGNvbmZpZyBhcyBhbnkpLkRBVEFCQVNFX1VSTCkge1xyXG4gICAgKGNvbmZpZyBhcyBhbnkpLlBYX0RBVEFCQVNFX1VSTCA9IChjb25maWcgYXMgYW55KS5EQVRBQkFTRV9VUkw7XHJcbiAgfVxyXG5cclxuICBjb25zdCByZWRhY3RlZCA9IE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhjb25maWcpLm1hcCgoW2ssIHZdKSA9PiBbaywgbWFzay5pbmNsdWRlcyhrIGFzIGtleW9mIEJhc2VDb25maWcpICYmIHYgPyAnKioqUkVEQUNURUQqKionIDogdl0pKTtcclxuICByZXR1cm4geyBjb25maWcsIHJlZGFjdGVkIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZXF1aXJlQ29uZmlnPEsgZXh0ZW5kcyAoa2V5b2YgQmFzZUNvbmZpZylbXT4oLi4ua2V5czogSykge1xyXG4gIGNvbnN0IHsgY29uZmlnIH0gPSBsb2FkQ29uZmlnKHsgcmVxdWlyZWQ6IGtleXMgfSk7XHJcbiAgcmV0dXJuIGNvbmZpZztcclxufVxyXG5cclxuLy8gVXRpbGl0eSB0byBleHBvcnQgb25seSBuZWVkZWQga2V5cyBmb3IgY2xpZW50IHNpZGUgKGJ1aWxkIHRpbWUgcGljaylcclxuZXhwb3J0IGZ1bmN0aW9uIGNsaWVudENvbmZpZ1BpY2s8VCBleHRlbmRzIChrZXlvZiBCYXNlQ29uZmlnKVtdPihrZXlzOiBUKSB7XHJcbiAgY29uc3QgeyBjb25maWcgfSA9IGxvYWRDb25maWcoKTtcclxuICBjb25zdCBzdWJzZXQ6IFBhcnRpYWw8QmFzZUNvbmZpZz4gPSB7fTtcclxuICBrZXlzLmZvckVhY2goayA9PiB7XHJcbiAgICBjb25zdCB2ID0gY29uZmlnW2tdO1xyXG4gICAgaWYgKHYgIT09IHVuZGVmaW5lZCkgKHN1YnNldCBhcyBhbnkpW2tdID0gdjtcclxuICB9KTtcclxuICByZXR1cm4gc3Vic2V0IGFzIFBpY2s8QmFzZUNvbmZpZywgVFtudW1iZXJdPjtcclxufVxyXG5cclxuLy8gU2ltcGxlIGxvZ2dlciB0byBhdm9pZCBAdGVrdXAvc2hhcmVkIGRlcGVuZGVuY3lcclxuY29uc3QgbG9nZ2VyID0ge1xyXG4gIGluZm86IChsYWJlbDogc3RyaW5nLCBkYXRhOiBhbnkpID0+IGNvbnNvbGUubG9nKGBbJHtsYWJlbH1dYCwgZGF0YSlcclxufTtcclxuXHJcbi8vIExvZ2dpbmcgaGVscGVyXHJcbmV4cG9ydCBmdW5jdGlvbiBsb2dDb25maWcobGFiZWwgPSAnY29uZmlnOmluaXQnKSB7XHJcbiAgY29uc3QgeyByZWRhY3RlZCB9ID0gbG9hZENvbmZpZygpO1xyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXHJcbiAgbG9nZ2VyLmluZm8oYFske2xhYmVsfV1gLCByZWRhY3RlZCk7XHJcbn1cclxuIl0sIm5hbWVzIjpbImJhc2VTY2hlbWEiLCJjbGllbnRDb25maWdQaWNrIiwibG9hZENvbmZpZyIsImxvZ0NvbmZpZyIsInJlcXVpcmVDb25maWciLCJVcmwiLCJ6Iiwic3RyaW5nIiwidXJsIiwib2JqZWN0IiwiTk9ERV9FTlYiLCJlbnVtIiwiZGVmYXVsdCIsIkZMT1dfQVBJX1VSTCIsIkZMT1dfQVBJX0tFWSIsIm1pbiIsIm9wdGlvbmFsIiwiU0VDVVJFX0FQSV9VUkwiLCJTRUNVUkVfQVBJX0tFWSIsIklOQk9YX0FQSV9VUkwiLCJJTkJPWF9BUElfS0VZIiwiV0VCU0lURV9URU5BTlRfS0VZIiwiRkxPV19XU19VUkwiLCJBTlRIUk9QSUNfQVBJX0tFWSIsIkNMQVVERV9BUElfS0VZIiwiR0VNSU5JX0FQSV9LRVkiLCJHRU1JTklfTU9ERUwiLCJHRU1JTklfVEVNUEVSQVRVUkUiLCJHRU1JTklfTUFYX1RPS0VOUyIsIkxFQURfQVBJX1VSTCIsIkxFQURfQVBJX0tFWSIsIkNSTV9BUElfVVJMIiwiQ1JNX0FQSV9LRVkiLCJWT0lDRV9BUElfVVJMIiwiVk9JQ0VfQVBJX0tFWSIsIkFHRU5UUk9PTVNfQVBJX1VSTCIsIkFHRU5UUk9PTVNfQVBJX0tFWSIsIkZFQVRVUkVfSU5DSURFTlRTIiwidHJhbnNmb3JtIiwidiIsIkZFQVRVUkVfTEVBRFMiLCJGRUFUVVJFX0lOQk9YIiwiUExBVVNJQkxFX0RPTUFJTiIsIlBMQVVTSUJMRV9BUElfSE9TVCIsIk1PQklMRV9BUElfQkFTRSIsIlBYX0FQSV9QT1JUIiwicmVnZXgiLCJQWF9BVVRPX1NFRUQiLCJEQVRBQkFTRV9VUkwiLCJQWF9EQVRBQkFTRV9VUkwiLCJvcHRzIiwic291cmNlIiwicmVxdWlyZWQiLCJtYXNrIiwiYWxsb3dQcm9jZXNzRW52RmFsbGJhY2siLCJvbkVycm9yIiwicmF3IiwicHJvY2VzcyIsImVudiIsIm1pc3NpbmciLCJmaWx0ZXIiLCJrIiwiU3RyaW5nIiwibGVuZ3RoIiwibXNnIiwibWFwIiwiam9pbiIsIm0iLCJFcnJvciIsInBhcnNlZCIsInNhZmVQYXJzZSIsInN1Y2Nlc3MiLCJpc3N1ZXMiLCJlcnJvciIsImkiLCJwYXRoIiwibWVzc2FnZSIsImNvbmZpZyIsImRhdGEiLCJyZWRhY3RlZCIsIk9iamVjdCIsImZyb21FbnRyaWVzIiwiZW50cmllcyIsImluY2x1ZGVzIiwia2V5cyIsInN1YnNldCIsImZvckVhY2giLCJ1bmRlZmluZWQiLCJsb2dnZXIiLCJpbmZvIiwibGFiZWwiLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztRQVNhQTtlQUFBQTs7UUEyR0dDO2VBQUFBOztRQXJDQUM7ZUFBQUE7O1FBcURBQztlQUFBQTs7UUF0QkFDO2VBQUFBOzs7cUJBOUdFO0FBSWxCLDRFQUE0RTtBQUU1RSwyQ0FBMkM7QUFDM0MsTUFBTUMsTUFBTUMsTUFBQyxDQUFDQyxNQUFNLEdBQUdDLEdBQUc7QUFFbkIsTUFBTVIsYUFBYU0sTUFBQyxDQUFDRyxNQUFNLENBQUM7SUFDakNDLFVBQVVKLE1BQUMsQ0FBQ0ssSUFBSSxDQUFDO1FBQUM7UUFBZTtRQUFRO0tBQWEsRUFBRUMsT0FBTyxDQUFDO0lBRWhFLGdDQUFnQztJQUNoQ0MsY0FBY1IsSUFBSU8sT0FBTyxDQUFDO0lBQzFCRSxjQUFjUixNQUFDLENBQUNDLE1BQU0sR0FBR1EsR0FBRyxDQUFDLElBQUlDLFFBQVE7SUFFekMsdUNBQXVDO0lBQ3ZDQyxnQkFBZ0JaLElBQUlXLFFBQVE7SUFDNUJFLGdCQUFnQlosTUFBQyxDQUFDQyxNQUFNLEdBQUdTLFFBQVE7SUFFbkMsV0FBVztJQUNYRyxlQUFlZCxJQUFJVyxRQUFRO0lBQzNCSSxlQUFlZCxNQUFDLENBQUNDLE1BQU0sR0FBR1MsUUFBUTtJQUVsQyxnQ0FBZ0M7SUFDaENLLG9CQUFvQmYsTUFBQyxDQUFDQyxNQUFNLEdBQUdTLFFBQVE7SUFFdkMsc0JBQXNCO0lBQ3RCTSxhQUFhakIsSUFBSVcsUUFBUTtJQUV6QixlQUFlO0lBQ2ZPLG1CQUFtQmpCLE1BQUMsQ0FBQ0MsTUFBTSxHQUFHUyxRQUFRO0lBQ3RDUSxnQkFBZ0JsQixNQUFDLENBQUNDLE1BQU0sR0FBR1MsUUFBUTtJQUNuQ1MsZ0JBQWdCbkIsTUFBQyxDQUFDQyxNQUFNLEdBQUdTLFFBQVE7SUFDbkNVLGNBQWNwQixNQUFDLENBQUNDLE1BQU0sR0FBR1MsUUFBUTtJQUNqQ1csb0JBQW9CckIsTUFBQyxDQUFDQyxNQUFNLEdBQUdTLFFBQVE7SUFDdkNZLG1CQUFtQnRCLE1BQUMsQ0FBQ0MsTUFBTSxHQUFHUyxRQUFRO0lBRXRDLGtDQUFrQztJQUNsQ2EsY0FBY3hCLElBQUlXLFFBQVE7SUFDMUJjLGNBQWN4QixNQUFDLENBQUNDLE1BQU0sR0FBR1MsUUFBUTtJQUNqQ2UsYUFBYTFCLElBQUlXLFFBQVE7SUFDekJnQixhQUFhMUIsTUFBQyxDQUFDQyxNQUFNLEdBQUdTLFFBQVE7SUFDaENpQixlQUFlNUIsSUFBSVcsUUFBUTtJQUMzQmtCLGVBQWU1QixNQUFDLENBQUNDLE1BQU0sR0FBR1MsUUFBUTtJQUNsQ21CLG9CQUFvQjlCLElBQUlXLFFBQVE7SUFDaENvQixvQkFBb0I5QixNQUFDLENBQUNDLE1BQU0sR0FBR1MsUUFBUTtJQUV2QyxnQkFBZ0I7SUFDaEJxQixtQkFBbUIvQixNQUFDLENBQUNDLE1BQU0sR0FBRytCLFNBQVMsQ0FBQyxDQUFDQyxJQUFjQSxNQUFNLFFBQVF2QixRQUFRO0lBQzdFd0IsZUFBZWxDLE1BQUMsQ0FBQ0MsTUFBTSxHQUFHK0IsU0FBUyxDQUFDLENBQUNDLElBQWNBLE1BQU0sUUFBUXZCLFFBQVE7SUFDekV5QixlQUFlbkMsTUFBQyxDQUFDQyxNQUFNLEdBQUcrQixTQUFTLENBQUMsQ0FBQ0MsSUFBY0EsTUFBTSxRQUFRdkIsUUFBUTtJQUV6RSxZQUFZO0lBQ1owQixrQkFBa0JwQyxNQUFDLENBQUNDLE1BQU0sR0FBR1MsUUFBUTtJQUNyQzJCLG9CQUFvQnRDLElBQUlXLFFBQVE7SUFFaEMsa0JBQWtCO0lBQ2xCNEIsaUJBQWlCdkMsSUFBSVcsUUFBUTtJQUU3QixvREFBb0Q7SUFDcEQ2QixhQUFhdkMsTUFBQyxDQUFDQyxNQUFNLEdBQUd1QyxLQUFLLENBQUMsU0FBUzlCLFFBQVE7SUFDL0MrQixjQUFjekMsTUFBQyxDQUFDQyxNQUFNLEdBQUcrQixTQUFTLENBQUMsQ0FBQ0MsSUFBY0EsTUFBTSxRQUFRdkIsUUFBUTtJQUN4RSw2Q0FBNkM7SUFDN0NnQyxjQUFjMUMsTUFBQyxDQUFDQyxNQUFNLEdBQUdTLFFBQVE7SUFDakMsc0VBQXNFO0lBQ3RFaUMsaUJBQWlCM0MsTUFBQyxDQUFDQyxNQUFNLEdBQUdTLFFBQVE7QUFDdEM7QUFZTyxTQUFTZCxXQUFXZ0QsT0FBb0IsQ0FBQyxDQUFDO0lBQy9DLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxXQUFXLEVBQUUsRUFBRUMsT0FBTztRQUFDO1FBQWdCO1FBQWtCO1FBQXNCO1FBQWtCO1FBQXFCO1FBQWtCO1FBQWdCO1FBQWU7UUFBaUI7UUFBc0I7S0FBZ0IsRUFBRUMsMEJBQTBCLElBQUksRUFBRUMsT0FBTyxFQUFFLEdBQUdMO0lBQzVSLE1BQU1NLE1BQTBDO1FBQUUsR0FBSUYsMEJBQTBCLEFBQUNHLFFBQWdCQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQUcsR0FBSVAsVUFBVSxDQUFDLENBQUM7SUFBRTtJQUU5SCxNQUFNUSxVQUFVUCxTQUFTUSxNQUFNLENBQUNDLENBQUFBLElBQUssQ0FBQ0wsR0FBRyxDQUFDTSxPQUFPRCxHQUFHO0lBQ3BELElBQUlGLFFBQVFJLE1BQU0sRUFBRTtRQUNwQixNQUFNQyxNQUFNTCxRQUFRTSxHQUFHLENBQUNKLENBQUFBLElBQUssQ0FBQyxzQkFBc0IsRUFBRUMsT0FBT0QsSUFBSSxFQUFFSyxJQUFJLENBQUM7UUFDeEVYLFVBQVVJLFFBQVFNLEdBQUcsQ0FBQ0UsQ0FBQUEsSUFBSyxDQUFDLHNCQUFzQixFQUFFTCxPQUFPSyxJQUFJO1FBQzdELE1BQU0sSUFBSUMsTUFBTUo7SUFDbEI7SUFFQSxNQUFNSyxTQUFTckUsV0FBV3NFLFNBQVMsQ0FBQ2Q7SUFDcEMsSUFBSSxDQUFDYSxPQUFPRSxPQUFPLEVBQUU7UUFDckIsTUFBTUMsU0FBU0gsT0FBT0ksS0FBSyxDQUFDRCxNQUFNLENBQUNQLEdBQUcsQ0FBQyxDQUFDUyxJQUFXLEdBQUdBLEVBQUVDLElBQUksQ0FBQ1QsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFUSxFQUFFRSxPQUFPLEVBQUU7UUFDcEZyQixVQUFVaUI7UUFDVixNQUFNLElBQUlKLE1BQU0sNEJBQTRCSSxPQUFPTixJQUFJLENBQUM7SUFDMUQ7SUFFQSxNQUFNVyxTQUFTUixPQUFPUyxJQUFJO0lBRTFCLHVFQUF1RTtJQUN2RSxJQUFJLENBQUMsQUFBQ0QsT0FBZTdCLFlBQVksSUFBSSxBQUFDNkIsT0FBZTVCLGVBQWUsRUFBRTtRQUNuRTRCLE9BQWU3QixZQUFZLEdBQUcsQUFBQzZCLE9BQWU1QixlQUFlO0lBQ2hFLE9BQU8sSUFBSSxDQUFDLEFBQUM0QixPQUFlNUIsZUFBZSxJQUFJLEFBQUM0QixPQUFlN0IsWUFBWSxFQUFFO1FBQzFFNkIsT0FBZTVCLGVBQWUsR0FBRyxBQUFDNEIsT0FBZTdCLFlBQVk7SUFDaEU7SUFFQSxNQUFNK0IsV0FBV0MsT0FBT0MsV0FBVyxDQUFDRCxPQUFPRSxPQUFPLENBQUNMLFFBQVFaLEdBQUcsQ0FBQyxDQUFDLENBQUNKLEdBQUd0QixFQUFFLEdBQUs7WUFBQ3NCO1lBQUdSLEtBQUs4QixRQUFRLENBQUN0QixNQUEwQnRCLElBQUksbUJBQW1CQTtTQUFFO0lBQ2hKLE9BQU87UUFBRXNDO1FBQVFFO0lBQVM7QUFDNUI7QUFFTyxTQUFTM0UsY0FBOEMsR0FBR2dGLElBQU87SUFDdEUsTUFBTSxFQUFFUCxNQUFNLEVBQUUsR0FBRzNFLFdBQVc7UUFBRWtELFVBQVVnQztJQUFLO0lBQy9DLE9BQU9QO0FBQ1Q7QUFHTyxTQUFTNUUsaUJBQWlEbUYsSUFBTztJQUN0RSxNQUFNLEVBQUVQLE1BQU0sRUFBRSxHQUFHM0U7SUFDbkIsTUFBTW1GLFNBQThCLENBQUM7SUFDckNELEtBQUtFLE9BQU8sQ0FBQ3pCLENBQUFBO1FBQ1gsTUFBTXRCLElBQUlzQyxNQUFNLENBQUNoQixFQUFFO1FBQ25CLElBQUl0QixNQUFNZ0QsV0FBVyxBQUFDRixNQUFjLENBQUN4QixFQUFFLEdBQUd0QjtJQUM1QztJQUNBLE9BQU84QztBQUNUO0FBRUEsa0RBQWtEO0FBQ2xELE1BQU1HLFNBQVM7SUFDYkMsTUFBTSxDQUFDQyxPQUFlWixPQUFjYSxRQUFRQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUVGLE1BQU0sQ0FBQyxDQUFDLEVBQUVaO0FBQ2hFO0FBR08sU0FBUzNFLFVBQVV1RixRQUFRLGFBQWE7SUFDN0MsTUFBTSxFQUFFWCxRQUFRLEVBQUUsR0FBRzdFO0lBQ3JCLHNDQUFzQztJQUN0Q3NGLE9BQU9DLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRUMsTUFBTSxDQUFDLENBQUMsRUFBRVg7QUFDNUIifQ==