{"version":3,"sources":["C:\\Users\\empir\\Tekup-org\\packages\\config\\src\\index.ts"],"sourcesContent":["import { z } from 'zod';\r\n// Declare process for environments where @types/node isn't globally included (will be merged if present)\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ndeclare const process: any;\r\n// Note: relies on @types/node in the root tsconfig; if absent, add locally.\r\n\r\n// Common schema for core service endpoints\r\nconst Url = z.string().url();\r\n\r\nexport const baseSchema = z.object({\r\n  NODE_ENV: z.enum(['development', 'test', 'production']).default('development'),\r\n\r\n  // Flow API (leads & compliance)\r\n  FLOW_API_URL: Url.default('http://localhost:4000'),\r\n  FLOW_API_KEY: z.string().min(10).optional(),\r\n\r\n  // Secure Platform (incidents) â€“ future\r\n  SECURE_API_URL: Url.optional(),\r\n  SECURE_API_KEY: z.string().optional(),\r\n\r\n  // Inbox AI\r\n  INBOX_API_URL: Url.optional(),\r\n  INBOX_API_KEY: z.string().optional(),\r\n\r\n  // Website (marketing -> ingest)\r\n  WEBSITE_TENANT_KEY: z.string().optional(),\r\n\r\n  // WebSocket endpoints\r\n  FLOW_WS_URL: Url.optional(),\r\n\r\n  // AI Providers\r\n  ANTHROPIC_API_KEY: z.string().optional(),\r\n  CLAUDE_API_KEY: z.string().optional(),\r\n  GEMINI_API_KEY: z.string().optional(),\r\n  GEMINI_MODEL: z.string().optional(),\r\n  GEMINI_TEMPERATURE: z.string().optional(),\r\n  GEMINI_MAX_TOKENS: z.string().optional(),\r\n\r\n  // Internal service endpoints/keys\r\n  LEAD_API_URL: Url.optional(),\r\n  LEAD_API_KEY: z.string().optional(),\r\n  CRM_API_URL: Url.optional(),\r\n  CRM_API_KEY: z.string().optional(),\r\n  VOICE_API_URL: Url.optional(),\r\n  VOICE_API_KEY: z.string().optional(),\r\n  AGENTROOMS_API_URL: Url.optional(),\r\n  AGENTROOMS_API_KEY: z.string().optional(),\r\n\r\n  // Feature flags\r\n  FEATURE_INCIDENTS: z.string().transform((v: string) => v === 'true').optional(),\r\n  FEATURE_LEADS: z.string().transform((v: string) => v === 'true').optional(),\r\n  FEATURE_INBOX: z.string().transform((v: string) => v === 'true').optional(),\r\n\r\n  // Analytics\r\n  PLAUSIBLE_DOMAIN: z.string().optional(),\r\n  PLAUSIBLE_API_HOST: Url.optional(),\r\n\r\n  // Mobile specific\r\n  MOBILE_API_BASE: Url.optional(),\r\n\r\n  // Platform build / infra (added for centralization)\r\n  PX_API_PORT: z.string().regex(/^\\d+$/).optional(),\r\n  PX_AUTO_SEED: z.string().transform((v: string) => v === 'true').optional(),\r\n  // Canonical DB URL (preferred going forward)\r\n  DATABASE_URL: z.string().optional(),\r\n  // Legacy alias still referenced by Prisma schema (will be phased out)\r\n  PX_DATABASE_URL: z.string().optional()\r\n});\r\n\r\nexport type BaseConfig = z.infer<typeof baseSchema>;\r\n\r\nexport interface LoadOptions {\r\n  source?: Record<string, string | undefined>;\r\n  required?: (keyof BaseConfig)[];\r\n  mask?: (keyof BaseConfig)[];\r\n  allowProcessEnvFallback?: boolean;\r\n  onError?: (errors: string[]) => void;\r\n}\r\n\r\nexport function loadConfig(opts: LoadOptions = {}) {\r\n  const { source, required = [], mask = ['FLOW_API_KEY', 'SECURE_API_KEY', 'WEBSITE_TENANT_KEY', 'GEMINI_API_KEY', 'ANTHROPIC_API_KEY', 'CLAUDE_API_KEY', 'LEAD_API_KEY', 'CRM_API_KEY', 'VOICE_API_KEY', 'AGENTROOMS_API_KEY', 'INBOX_API_KEY'], allowProcessEnvFallback = true, onError } = opts;\r\n  const raw: Record<string, string | undefined> = { ...(allowProcessEnvFallback ? (process as any).env : {}), ...(source || {}) };\r\n\r\n  const missing = required.filter(k => !raw[String(k)]);\r\n  if (missing.length) {\r\n  const msg = missing.map(k => `Missing required env: ${String(k)}`).join(', ');\r\n  onError?.(missing.map(m => `Missing required env: ${String(m)}`));\r\n    throw new Error(msg);\r\n  }\r\n\r\n  const parsed = baseSchema.safeParse(raw);\r\n  if (!parsed.success) {\r\n  const issues = parsed.error.issues.map((i: any) => `${i.path.join('.')}: ${i.message}`);\r\n    onError?.(issues);\r\n    throw new Error('Invalid configuration: ' + issues.join('; '));\r\n  }\r\n\r\n  const config = parsed.data as BaseConfig;\r\n\r\n  // Bidirectional aliasing so either env var works; prefer DATABASE_URL.\r\n  if (!(config as any).DATABASE_URL && (config as any).PX_DATABASE_URL) {\r\n    (config as any).DATABASE_URL = (config as any).PX_DATABASE_URL;\r\n  } else if (!(config as any).PX_DATABASE_URL && (config as any).DATABASE_URL) {\r\n    (config as any).PX_DATABASE_URL = (config as any).DATABASE_URL;\r\n  }\r\n\r\n  const redacted = Object.fromEntries(Object.entries(config).map(([k, v]) => [k, mask.includes(k as keyof BaseConfig) && v ? '***REDACTED***' : v]));\r\n  return { config, redacted };\r\n}\r\n\r\nexport function requireConfig<K extends (keyof BaseConfig)[]>(...keys: K) {\r\n  const { config } = loadConfig({ required: keys });\r\n  return config;\r\n}\r\n\r\n// Utility to export only needed keys for client side (build time pick)\r\nexport function clientConfigPick<T extends (keyof BaseConfig)[]>(keys: T) {\r\n  const { config } = loadConfig();\r\n  const subset: Partial<BaseConfig> = {};\r\n  keys.forEach(k => {\r\n    const v = config[k];\r\n    if (v !== undefined) (subset as any)[k] = v;\r\n  });\r\n  return subset as Pick<BaseConfig, T[number]>;\r\n}\r\n\r\n// Simple logger to avoid @tekup/shared dependency\r\nconst logger = {\r\n  info: (label: string, data: any) => console.log(`[${label}]`, data)\r\n};\r\n\r\n// Logging helper\r\nexport function logConfig(label = 'config:init') {\r\n  const { redacted } = loadConfig();\r\n  // eslint-disable-next-line no-console\r\n  logger.info(`[${label}]`, redacted);\r\n}\r\n"],"names":["baseSchema","clientConfigPick","loadConfig","logConfig","requireConfig","Url","z","string","url","object","NODE_ENV","enum","default","FLOW_API_URL","FLOW_API_KEY","min","optional","SECURE_API_URL","SECURE_API_KEY","INBOX_API_URL","INBOX_API_KEY","WEBSITE_TENANT_KEY","FLOW_WS_URL","ANTHROPIC_API_KEY","CLAUDE_API_KEY","GEMINI_API_KEY","GEMINI_MODEL","GEMINI_TEMPERATURE","GEMINI_MAX_TOKENS","LEAD_API_URL","LEAD_API_KEY","CRM_API_URL","CRM_API_KEY","VOICE_API_URL","VOICE_API_KEY","AGENTROOMS_API_URL","AGENTROOMS_API_KEY","FEATURE_INCIDENTS","transform","v","FEATURE_LEADS","FEATURE_INBOX","PLAUSIBLE_DOMAIN","PLAUSIBLE_API_HOST","MOBILE_API_BASE","PX_API_PORT","regex","PX_AUTO_SEED","DATABASE_URL","PX_DATABASE_URL","opts","source","required","mask","allowProcessEnvFallback","onError","raw","process","env","missing","filter","k","String","length","msg","map","join","m","Error","parsed","safeParse","success","issues","error","i","path","message","config","data","redacted","Object","fromEntries","entries","includes","keys","subset","forEach","undefined","logger","info","label","console","log"],"mappings":"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"}