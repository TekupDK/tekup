-- RLS policies & seed data (manual migration not generated by Prisma)
-- Enable required extension
CREATE EXTENSION IF NOT EXISTS pgcrypto;

-- Ensure tables exist (Prisma manages schema separately); guards avoid errors if run after Prisma migrate
-- Enable RLS
ALTER TABLE "Tenant" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "Lead" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "LeadEvent" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "ApiKey" ENABLE ROW LEVEL SECURITY;

-- Drop existing policies if re-running (idempotent)
DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'tenant_isolation_tenant') THEN
    DROP POLICY tenant_isolation_tenant ON "Tenant";
  END IF;
  IF EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'tenant_isolation_lead') THEN
    DROP POLICY tenant_isolation_lead ON "Lead";
  END IF;
  IF EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'tenant_isolation_leadevent') THEN
    DROP POLICY tenant_isolation_leadevent ON "LeadEvent";
  END IF;
  IF EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'tenant_isolation_apikey') THEN
    DROP POLICY tenant_isolation_apikey ON "ApiKey";
  END IF;
END $$;

-- Policies
CREATE POLICY tenant_isolation_tenant ON "Tenant"
  FOR SELECT USING (id = current_setting('app.tenant_id', true)::uuid);

CREATE POLICY tenant_isolation_lead ON "Lead"
  USING ("tenantId" = current_setting('app.tenant_id', true)::uuid)
  WITH CHECK ("tenantId" = current_setting('app.tenant_id', true)::uuid);

CREATE POLICY tenant_isolation_leadevent ON "LeadEvent"
  USING ("leadId" IN (SELECT id FROM "Lead" WHERE "tenantId" = current_setting('app.tenant_id', true)::uuid));

CREATE POLICY tenant_isolation_apikey ON "ApiKey"
  FOR SELECT USING ("tenantId" = current_setting('app.tenant_id', true)::uuid);

-- Seed tenants & api keys (only if empty)
DO $$
DECLARE
  t_count INT;
BEGIN
  SELECT COUNT(*) INTO t_count FROM "Tenant";
  IF t_count = 0 THEN
    INSERT INTO "Tenant" (id, slug, name) VALUES
      (gen_random_uuid(), 'rendetalje', 'Rendetalje'),
      (gen_random_uuid(), 'foodtruck', 'Foodtruck Fiesta'),
      (gen_random_uuid(), 'tekup', 'TekUp');

    -- Create an api key for each tenant
    INSERT INTO "ApiKey" (id, "tenantId", key, active, "createdAt")
    SELECT gen_random_uuid(), id, encode(gen_random_bytes(16), 'hex'), true, now() FROM "Tenant";
  END IF;
END $$;

-- NOTE: To view generated api keys after migration run: SELECT t.slug, a.key FROM "ApiKey" a JOIN "Tenant" t ON t.id = a."tenantId";
