services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: restaurantiq-postgres
    environment:
      POSTGRES_DB: restaurantiq_dev
      POSTGRES_USER: restaurantiq_user
      POSTGRES_PASSWORD: restaurantiq_password
      POSTGRES_MULTIPLE_DATABASES: restaurantiq_test
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init-scripts:/docker-entrypoint-initdb.d:ro
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "5432:5432"
    networks:
      - restaurantiq_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U restaurantiq_user -d restaurantiq_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: restaurantiq-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf
    networks:
      - restaurantiq_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
      target: development
    container_name: restaurantiq-backend
    environment:
      NODE_ENV: development
      PORT: 4000
      DATABASE_URL: postgresql://restaurantiq_user:restaurantiq_password@postgres:5432/restaurantiq_dev
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your_jwt_secret_here
      JWT_REFRESH_SECRET: your_jwt_refresh_secret_here
      CORS_ORIGINS: http://localhost:3000,http://frontend:3000
      API_VERSION: v1
    ports:
      - "4000:4000"
      - "9229:9229" # Debug port
    volumes:
      - ./backend:/app/backend:cached
      - ./shared:/app/shared:cached
      - /app/backend/node_modules
      - backend_logs:/app/backend/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - restaurantiq_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Frontend (Next.js)
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
      target: development
    container_name: restaurantiq-frontend
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:4000/api/v1
      NEXT_PUBLIC_WS_URL: ws://localhost:4000
      NEXT_PUBLIC_APP_NAME: RestaurantIQ
      NEXT_PUBLIC_APP_VERSION: 1.0.0
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: your_nextauth_secret_here
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app/frontend:cached
      - ./shared:/app/shared:cached
      - /app/frontend/node_modules
      - /app/frontend/.next
    depends_on:
      - backend
    networks:
      - restaurantiq_network
    restart: unless-stopped

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: restaurantiq-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@restaurantiq.dev
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./docker/pgadmin/servers.json:/pgadmin4/servers.json:ro
    depends_on:
      - postgres
    networks:
      - restaurantiq_network
    restart: unless-stopped

  # Nginx reverse proxy (for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: restaurantiq-nginx
    ports:
      - "8080:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - backend
      - frontend
    networks:
      - restaurantiq_network
    profiles:
      - production
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  backend_logs:
    driver: local

networks:
  restaurantiq_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
