# Docker Compose for TekUp Job Scheduling System
# Complete containerized setup for production deployment

version: '3.8'

services:
  # TekUp CRM Web Application - Job Scheduling System
  tekup-crm-web:
    build: 
      context: .
      dockerfile: apps/tekup-crm-web/Dockerfile
    container_name: tekup-job-scheduling
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOSTNAME=0.0.0.0
      # Add any other environment variables your app needs
      - NEXT_PUBLIC_API_URL=http://localhost:4000
    volumes:
      # Optional: Mount logs directory
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - tekup-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: tekup-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - tekup-crm-web
    restart: unless-stopped
    networks:
      - tekup-network

  # PostgreSQL Database (if needed for future backend)
  postgres:
    image: postgres:15-alpine
    container_name: tekup-postgres
    environment:
      POSTGRES_DB: tekup_scheduling
      POSTGRES_USER: tekup_user
      POSTGRES_PASSWORD: tekup_secure_password_2025
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - tekup-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tekup_user -d tekup_scheduling"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (for session management and caching)
  redis:
    image: redis:7-alpine
    container_name: tekup-redis
    command: redis-server --requirepass tekup_redis_password_2025
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - tekup-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "tekup_redis_password_2025", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  tekup-network:
    driver: bridge