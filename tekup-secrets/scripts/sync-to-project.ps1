<#
.SYNOPSIS
    Sync environment variables from tekup-secrets to a specific project
    
.DESCRIPTION
    Merges .env.shared, .env.{environment}, and component-specific config files
    into a single .env file for the target project.
    
.PARAMETER Project
    The project name to sync to (e.g., "tekup-ai", "Tekup-Billy")
    
.PARAMETER Environment
    The environment to use (production or development)
    
.PARAMETER DryRun
    Show what would be synced without actually writing files
    
.EXAMPLE
    .\sync-to-project.ps1 -Project "tekup-ai" -Environment "development"
    
.EXAMPLE
    .\sync-to-project.ps1 -Project "Tekup-Billy" -Environment "production" -DryRun
#>

param(
    [Parameter(Mandatory=$true)]
    [ValidateSet("tekup-ai", "tekup-billy", "tekup-vault", "tekup-gmail-services", "tekup-chat", "RendetaljeOS")]
    [string]$Project,
    
    [Parameter(Mandatory=$false)]
    [ValidateSet("production", "development")]
    [string]$Environment = "development",
    
    [Parameter(Mandatory=$false)]
    [switch]$DryRun
)

$ErrorActionPreference = "Stop"

# Paths
$secretsRoot = "C:\Users\empir\Tekup\tekup-secrets"
$projectsRoot = "C:\Users\empir\Tekup"

# Project path mapping (updated for new Tekup-Portfolio workspace structure)
$projectPaths = @{
    "tekup-ai" = "$projectsRoot\services\tekup-ai"
    "tekup-billy" = "$projectsRoot\apps\production\tekup-billy"
    "tekup-vault" = "$projectsRoot\apps\production\tekup-vault"
    "tekup-gmail-services" = "$projectsRoot\services\tekup-gmail-services"
    "tekup-chat" = "$projectsRoot\services\tekup-ai\apps\ai-chat"  # Migrated
    "RendetaljeOS" = "$projectsRoot\apps\rendetalje\monorepo"
}

$projectPath = $projectPaths[$Project]

# Validation
if (-not (Test-Path $projectPath)) {
    Write-Error "‚ùå Project path not found: $projectPath"
    exit 1
}

Write-Host "üîê Syncing secrets to $Project ($Environment)" -ForegroundColor Cyan
Write-Host "üìÅ Target: $projectPath" -ForegroundColor Gray

# Collect environment content
$envLines = @()
$envLines += "# ==================== AUTO-GENERATED BY tekup-secrets ===================="
$envLines += "# Generated: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
$envLines += "# Environment: $Environment"
$envLines += "# DO NOT EDIT THIS FILE DIRECTLY - Edit files in C:\Users\empir\Tekup\tekup-secrets"
$envLines += ""

# 1. Add shared config
$sharedFile = Join-Path $secretsRoot ".env.shared"
if (Test-Path $sharedFile) {
    Write-Host "  ‚úÖ Loading .env.shared" -ForegroundColor Green
    $envLines += ""
    $envLines += "# ==================== SHARED CONFIG ===================="
    $envLines += Get-Content $sharedFile
}

# 2. Add environment-specific secrets
$envFile = Join-Path $secretsRoot ".env.$Environment"
if (Test-Path $envFile) {
    Write-Host "  ‚úÖ Loading .env.$Environment" -ForegroundColor Green
    $envLines += ""
    $envLines += "# ==================== $($Environment.ToUpper()) ENVIRONMENT ===================="
    $envLines += Get-Content $envFile
} else {
    Write-Warning "‚ö†Ô∏è  Environment file not found: $envFile"
}

# 3. Add component-specific configs (if they exist)
$configFiles = @(
    @{Path="config\ai-services.env"; Label="AI Services"},
    @{Path="config\databases.env"; Label="Databases"},
    @{Path="config\google-workspace.env"; Label="Google Workspace"},
    @{Path="config\apis.env"; Label="APIs"},
    @{Path="config\monitoring.env"; Label="Monitoring"}
)

foreach ($configFile in $configFiles) {
    $fullPath = Join-Path $secretsRoot $configFile.Path
    if (Test-Path $fullPath) {
        Write-Host "  ‚úÖ Loading $($configFile.Label)" -ForegroundColor Green
        $envLines += ""
        $envLines += "# ==================== $($configFile.Label.ToUpper()) ===================="
        $envLines += Get-Content $fullPath
    }
}

# Write to project (or show dry-run)
$targetEnvFile = Join-Path $projectPath ".env"

if ($DryRun) {
    Write-Host "`nüìÑ DRY RUN - Would write to: $targetEnvFile" -ForegroundColor Yellow
    Write-Host "Content preview (first 10 lines):" -ForegroundColor Gray
    $envLines | Select-Object -First 10 | ForEach-Object { Write-Host "  $_" -ForegroundColor DarkGray }
    Write-Host "  ... (total $($envLines.Count) lines)" -ForegroundColor DarkGray
} else {
    $envLines | Set-Content $targetEnvFile -Encoding UTF8
    Write-Host "`n‚úÖ Successfully synced $Environment secrets to $Project" -ForegroundColor Green
    Write-Host "üìÅ Output: $targetEnvFile" -ForegroundColor Cyan
    Write-Host "üìä Total lines: $($envLines.Count)" -ForegroundColor Gray
}

# Show summary
Write-Host "`nüìã Summary:" -ForegroundColor Cyan
Write-Host "  Project: $Project" -ForegroundColor White
Write-Host "  Environment: $Environment" -ForegroundColor White
Write-Host "  Target: $targetEnvFile" -ForegroundColor White
Write-Host "  Lines: $($envLines.Count)" -ForegroundColor White

if (-not $DryRun) {
    Write-Host "`nüí° Tip: Run 'pnpm build' or 'npm run build' in the project to verify secrets work" -ForegroundColor Yellow
}
