// =====================================================
// Rendetalje Prisma Schema for Supabase Database
// =====================================================
// Version: 1.0.0
// PostgreSQL: Supabase
// Prisma: 6.x
// Multi-tenant cleaning operations management system
// =====================================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_DATABASE_URL")
}

// =====================================================
// CUSTOM ENUMS
// =====================================================

enum UserRole {
  owner // Full system access, can manage all organizations
  admin // Can manage users and operations within organization
  employee // Can perform assigned jobs and update time entries
  customer // Can view their own jobs and communicate with team
}

enum JobStatus {
  scheduled // Job is scheduled but not confirmed
  confirmed // Customer has confirmed the job
  in_progress // Team member is actively working on the job
  completed // Job has been finished successfully
  cancelled // Job was cancelled
  rescheduled // Job was moved to a different time
}

enum ServiceType {
  standard // Regular cleaning service
  deep // Deep cleaning service
  window // Window cleaning service
  moveout // Move out cleaning service
  office // Office cleaning service
}

// =====================================================
// CORE BUSINESS MODELS
// =====================================================

// Organizations table (multi-tenant support)
// RLS Policy: Users can only access their own organization
model Organization {
  id                String   @id @default(uuid()) @db.Uuid
  name              String
  email             String?
  phone             String?
  address           Json?    @db.JsonB // Full address object
  settings          Json     @default("{}") @db.JsonB // Organization preferences
  subscription_plan String   @default("basic")
  created_at        DateTime @default(now()) @map("created_at") @db.Timestamptz
  updated_at        DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  users              User[]
  customers          Customer[]
  team_members       TeamMember[]
  jobs               Job[]
  recurring_jobs     RecurringJob[]
  customer_messages  CustomerMessage[]
  chat_sessions      ChatSession[]
  quality_checklists QualityChecklist[]
  notifications      Notification[]
  audit_logs         AuditLog[]

  @@map("organizations")
}

// Users table (all user types)
// RLS Policy: Users can access users in their organization
// RLS Policy: Users can update their own profile
model User {
  id              String    @id @default(uuid()) @db.Uuid
  organization_id String?   @db.Uuid
  email           String    @unique
  name            String
  role            UserRole
  phone           String?
  avatar_url      String?
  settings        Json      @default("{}") @db.JsonB // User preferences
  is_active       Boolean   @default(true)
  last_login_at   DateTime? @db.Timestamptz
  created_at      DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updated_at      DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  organization            Organization?          @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  customer                Customer?
  team_member             TeamMember?
  customer_messages       CustomerMessage[]
  chat_sessions           ChatSession[]
  job_quality_assessments JobQualityAssessment[]
  notifications           Notification[]
  audit_logs              AuditLog[]

  @@index([organization_id])
  @@index([email])
  @@map("users")
}

// Customers table
// RLS Policy: Organization members can access customers
// RLS Policy: Customers can access their own data
model Customer {
  id                 String   @id @default(uuid()) @db.Uuid
  organization_id    String   @db.Uuid
  user_id            String?  @unique @db.Uuid
  name               String
  email              String?
  phone              String?
  address            Json     @db.JsonB // Full address object (required)
  preferences        Json     @default("{}") @db.JsonB // Customer preferences
  total_jobs         Int      @default(0)
  total_revenue      Decimal  @default(0) @db.Decimal(10, 2)
  satisfaction_score Decimal? @db.Decimal(3, 2) // 1.00 to 5.00
  notes              String?
  is_active          Boolean  @default(true)
  created_at         DateTime @default(now()) @map("created_at") @db.Timestamptz
  updated_at         DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  organization      Organization      @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  user              User?             @relation(fields: [user_id], references: [id], onDelete: SetNull)
  jobs              Job[]
  recurring_jobs    RecurringJob[]
  customer_messages CustomerMessage[]
  customer_reviews  CustomerReview[]

  @@index([organization_id])
  @@map("customers")
}

// Team members table
// RLS Policy: Organization members can view team members
// RLS Policy: Team members can update their own data
model TeamMember {
  id                  String    @id @default(uuid()) @db.Uuid
  user_id             String    @unique @db.Uuid
  organization_id     String    @db.Uuid
  employee_id         String? // Internal employee ID
  skills              String[]  @default([]) // Array of skills
  hourly_rate         Decimal?  @db.Decimal(8, 2)
  availability        Json      @default("{}") @db.JsonB // Weekly availability schedule
  performance_metrics Json      @default("{}") @db.JsonB // Performance data
  is_active           Boolean   @default(true)
  hire_date           DateTime? @db.Date
  created_at          DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updated_at          DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  organization    Organization    @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  job_assignments JobAssignment[]
  time_entries    TimeEntry[]

  @@map("team_members")
}

// Jobs table (core entity)
// RLS Policy: Organization members can view jobs
// RLS Policy: Employees can view and update assigned jobs
// RLS Policy: Customers can view their own jobs
model Job {
  id                   String      @id @default(uuid()) @db.Uuid
  organization_id      String      @db.Uuid
  customer_id          String      @db.Uuid
  job_number           String      @unique // Human-readable job number (auto-generated)
  service_type         ServiceType
  status               JobStatus   @default(scheduled)
  scheduled_date       DateTime    @db.Timestamptz
  estimated_duration   Int // minutes
  actual_duration      Int?
  location             Json        @db.JsonB // Address and GPS coordinates
  special_instructions String?
  checklist            Json        @default("[]") @db.JsonB // Job checklist items
  photos               Json        @default("[]") @db.JsonB // Job photos
  customer_signature   String? // Base64 encoded signature
  quality_score        Int?        @db.SmallInt // 1-5 rating
  profitability        Json?       @db.JsonB // Cost breakdown and profit calculation
  recurring_job_id     String?     @db.Uuid // Link to recurring job template
  parent_job_id        String?     @db.Uuid // For rescheduled jobs
  invoice_id           String? // Billy.dk invoice ID
  created_at           DateTime    @default(now()) @map("created_at") @db.Timestamptz
  updated_at           DateTime    @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  organization            Organization           @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  customer                Customer               @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  recurring_job           RecurringJob?          @relation(fields: [recurring_job_id], references: [id])
  parent_job              Job?                   @relation("JobReschedule", fields: [parent_job_id], references: [id])
  rescheduled_jobs        Job[]                  @relation("JobReschedule")
  job_assignments         JobAssignment[]
  time_entries            TimeEntry[]
  customer_messages       CustomerMessage[]
  job_quality_assessments JobQualityAssessment[]
  customer_reviews        CustomerReview[]

  @@index([organization_id])
  @@index([customer_id])
  @@index([scheduled_date])
  @@index([status])
  @@map("jobs")
}

// Job assignments (many-to-many between jobs and team members)
// RLS Policy: Organization members can view job assignments
model JobAssignment {
  id             String   @id @default(uuid()) @db.Uuid
  job_id         String   @db.Uuid
  team_member_id String   @db.Uuid
  role           String   @default("cleaner") // 'lead', 'cleaner', 'supervisor'
  assigned_at    DateTime @default(now()) @db.Timestamptz

  // Relations
  job         Job        @relation(fields: [job_id], references: [id], onDelete: Cascade)
  team_member TeamMember @relation(fields: [team_member_id], references: [id], onDelete: Cascade)

  @@unique([job_id, team_member_id])
  @@index([job_id])
  @@index([team_member_id])
  @@map("job_assignments")
}

// Time tracking
// RLS Policy: Organization members can view time entries
// RLS Policy: Team members can manage their own time entries
model TimeEntry {
  id             String    @id @default(uuid()) @db.Uuid
  job_id         String    @db.Uuid
  team_member_id String    @db.Uuid
  start_time     DateTime  @db.Timestamptz
  end_time       DateTime? @db.Timestamptz
  break_duration Int       @default(0) // minutes
  notes          String?
  location       Json?     @db.JsonB // GPS coordinates for verification
  created_at     DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updated_at     DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  job         Job        @relation(fields: [job_id], references: [id], onDelete: Cascade)
  team_member TeamMember @relation(fields: [team_member_id], references: [id], onDelete: Cascade)

  @@index([job_id])
  @@index([team_member_id])
  @@map("time_entries")
}

// Recurring job templates
// RLS Policy: Organization members can access recurring jobs
model RecurringJob {
  id                   String      @id @default(uuid()) @db.Uuid
  organization_id      String      @db.Uuid
  customer_id          String      @db.Uuid
  service_type         ServiceType
  frequency            String // 'weekly', 'biweekly', 'monthly'
  day_of_week          Int? // 0-6 (Sunday-Saturday)
  time_of_day          String? // TIME format
  estimated_duration   Int
  location             Json        @db.JsonB // Address and GPS coordinates
  special_instructions String?
  checklist            Json        @default("[]") @db.JsonB // Job checklist items
  is_active            Boolean     @default(true)
  next_scheduled_date  DateTime?   @db.Timestamptz
  created_at           DateTime    @default(now()) @map("created_at") @db.Timestamptz
  updated_at           DateTime    @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  customer     Customer     @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  jobs         Job[]

  @@map("recurring_jobs")
}

// Customer communications
// RLS Policy: Organization members can access customer messages
// RLS Policy: Customers can access their own messages
model CustomerMessage {
  id              String   @id @default(uuid()) @db.Uuid
  organization_id String   @db.Uuid
  customer_id     String   @db.Uuid
  job_id          String?  @db.Uuid
  sender_id       String?  @db.Uuid
  sender_type     String // 'customer', 'employee', 'system'
  message_type    String   @default("text") // 'text', 'photo', 'file'
  content         String
  attachments     Json     @default("[]") @db.JsonB // File attachments
  is_read         Boolean  @default(false)
  created_at      DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  customer     Customer     @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  job          Job?         @relation(fields: [job_id], references: [id], onDelete: SetNull)
  sender       User?        @relation(fields: [sender_id], references: [id], onDelete: SetNull)

  @@map("customer_messages")
}

// AI Friday chat sessions
// RLS Policy: Users can access their own chat sessions
model ChatSession {
  id              String   @id @default(uuid()) @db.Uuid
  user_id         String   @db.Uuid
  organization_id String   @db.Uuid
  context         String // 'owner', 'employee', 'customer'
  title           String?
  metadata        Json     @default("{}") @db.JsonB // Session metadata
  created_at      DateTime @default(now()) @map("created_at") @db.Timestamptz
  updated_at      DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  organization Organization  @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  messages     ChatMessage[]

  @@index([user_id])
  @@map("chat_sessions")
}

// AI Friday chat messages
// RLS Policy: Users can access messages from their sessions
model ChatMessage {
  id         String   @id @default(uuid()) @db.Uuid
  session_id String   @db.Uuid
  role       String   @db.VarChar(20) // 'user' or 'assistant'
  content    String   @db.Text
  metadata   Json     @default("{}") @db.JsonB // Message metadata
  created_at DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  session ChatSession @relation(fields: [session_id], references: [id], onDelete: Cascade)

  @@index([session_id])
  @@map("chat_messages")
}

// Quality control checklists
// RLS Policy: Organization members can access quality checklists
model QualityChecklist {
  id              String      @id @default(uuid()) @db.Uuid
  organization_id String      @db.Uuid
  service_type    ServiceType
  name            String
  items           Json        @db.JsonB // Array of checklist items
  is_active       Boolean     @default(true)
  created_at      DateTime    @default(now()) @map("created_at") @db.Timestamptz
  updated_at      DateTime    @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  organization Organization           @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  assessments  JobQualityAssessment[]

  @@map("quality_checklists")
}

// Job quality assessments
// RLS Policy: Organization members can view quality assessments
// RLS Policy: Team members can create assessments for their jobs
model JobQualityAssessment {
  id              String   @id @default(uuid()) @db.Uuid
  job_id          String   @db.Uuid
  checklist_id    String   @db.Uuid
  assessed_by     String?  @db.Uuid
  completed_items Json     @db.JsonB // Completed checklist items with photos
  overall_score   Int? // 1-5 rating
  notes           String?
  created_at      DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  job       Job              @relation(fields: [job_id], references: [id], onDelete: Cascade)
  checklist QualityChecklist @relation(fields: [checklist_id], references: [id], onDelete: Cascade)
  assessor  User?            @relation(fields: [assessed_by], references: [id], onDelete: SetNull)

  @@map("job_quality_assessments")
}

// Customer reviews and ratings
// RLS Policy: Organization members can view customer reviews
// RLS Policy: Customers can create reviews for their jobs
model CustomerReview {
  id          String   @id @default(uuid()) @db.Uuid
  job_id      String   @db.Uuid
  customer_id String   @db.Uuid
  rating      Int // 1-5 rating
  review_text String?
  photos      Json     @default("[]") @db.JsonB // Review photos
  is_public   Boolean  @default(true)
  created_at  DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  job      Job      @relation(fields: [job_id], references: [id], onDelete: Cascade)
  customer Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)

  @@map("customer_reviews")
}

// Notifications
// RLS Policy: Users can access their own notifications
model Notification {
  id              String   @id @default(uuid()) @db.Uuid
  organization_id String   @db.Uuid
  user_id         String   @db.Uuid
  type            String // 'job_assigned', 'job_completed', 'payment_received', etc.
  title           String
  message         String
  data            Json     @default("{}") @db.JsonB // Additional notification data
  is_read         Boolean  @default(false)
  created_at      DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([is_read])
  @@map("notifications")
}

// Audit log for important actions
// RLS Policy: Owners can access audit logs for their organization
model AuditLog {
  id              String   @id @default(uuid()) @db.Uuid
  organization_id String   @db.Uuid
  user_id         String?  @db.Uuid
  action          String
  entity_type     String
  entity_id       String?  @db.Uuid
  old_values      Json?    @db.JsonB
  new_values      Json?    @db.JsonB
  ip_address      String?  @db.Inet
  user_agent      String?  @db.Text
  created_at      DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  user         User?        @relation(fields: [user_id], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

// =====================================================
// INDEXES FOR PERFORMANCE
// =====================================================

// Note: Indexes are defined within each model below for optimal query performance
