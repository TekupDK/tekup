// =====================================================
// Tekup Database - Prisma Schema
// =====================================================
// Version: 1.0.0
// PostgreSQL: 16
// Prisma: 6.x
// =====================================================

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "postgresqlExtensions"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgvector(map: "vector"), uuid_ossp(map: "uuid-ossp")]
  schemas    = ["vault", "billy", "renos", "crm", "flow", "shared"]
}

// =====================================================
// VAULT SCHEMA (TekupVault)
// =====================================================

model VaultDocument {
  id         String   @id @default(uuid()) @db.Uuid
  source     String   // 'github', 'supabase', 'render'
  repository String   @db.VarChar(255)
  path       String   @db.Text
  content    String   @db.Text
  metadata   Json     @default("{}")
  sha        String?  @db.VarChar(255)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz

  embedding VaultEmbedding?

  @@unique([source, repository, path])
  @@index([source])
  @@index([repository])
  @@index([updatedAt])
  @@map("documents")
  @@schema("vault")
}

model VaultEmbedding {
  id         String   @id @default(uuid()) @db.Uuid
  documentId String   @unique @map("document_id") @db.Uuid
  embedding  Unsupported("vector(1536)") // pgvector extension
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz

  document VaultDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("embeddings")
  @@schema("vault")
}

model VaultSyncStatus {
  id           String    @id @default(uuid()) @db.Uuid
  source       String
  repository   String    @db.VarChar(255)
  status       String    @default("pending") // 'pending', 'in_progress', 'success', 'error'
  lastSyncAt   DateTime? @map("last_sync_at") @db.Timestamptz
  errorMessage String?   @map("error_message") @db.Text
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  @@unique([source, repository])
  @@index([status])
  @@map("sync_status")
  @@schema("vault")
}

// =====================================================
// BILLY SCHEMA (Tekup-Billy MCP)
// =====================================================

model BillyOrganization {
  id                 String    @id @default(uuid()) @db.Uuid
  name               String
  billyApiKey        String    @map("billy_api_key") @db.Text // Encrypted
  billyOrgId         String    @unique @map("billy_organization_id")
  createdAt          DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt          DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  settings           Json      @default("{}")
  isActive           Boolean   @default(true) @map("is_active")
  apiKeyRotatedAt    DateTime  @default(now()) @map("api_key_rotated_at") @db.Timestamptz

  users          BillyUser[]
  cachedInvoices BillyCachedInvoice[]
  cachedCustomers BillyCachedCustomer[]
  cachedProducts BillyCachedProduct[]
  auditLogs      BillyAuditLog[]
  usageMetrics   BillyUsageMetric[]
  rateLimits     BillyRateLimit[]

  @@index([isActive])
  @@map("organizations")
  @@schema("billy")
}

model BillyUser {
  id             String   @id @default(uuid()) @db.Uuid
  email          String
  organizationId String   @map("organization_id") @db.Uuid
  role           String   @default("user") // 'admin', 'user', 'readonly'
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz
  lastLoginAt    DateTime? @map("last_login_at") @db.Timestamptz
  isActive       Boolean  @default(true) @map("is_active")
  metadata       Json     @default("{}")

  organization BillyOrganization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  auditLogs    BillyAuditLog[]

  @@unique([email, organizationId])
  @@index([organizationId])
  @@map("users")
  @@schema("billy")
}

model BillyCachedInvoice {
  id             String   @id @default(uuid()) @db.Uuid
  organizationId String   @map("organization_id") @db.Uuid
  billyId        String   @map("billy_id")
  data           Json
  cachedAt       DateTime @default(now()) @map("cached_at") @db.Timestamptz
  expiresAt      DateTime @map("expires_at") @db.Timestamptz

  organization BillyOrganization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, billyId])
  @@index([organizationId])
  @@index([expiresAt])
  @@map("cached_invoices")
  @@schema("billy")
}

model BillyCachedCustomer {
  id             String   @id @default(uuid()) @db.Uuid
  organizationId String   @map("organization_id") @db.Uuid
  billyId        String   @map("billy_id")
  data           Json
  cachedAt       DateTime @default(now()) @map("cached_at") @db.Timestamptz
  expiresAt      DateTime @map("expires_at") @db.Timestamptz

  organization BillyOrganization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, billyId])
  @@index([organizationId])
  @@index([expiresAt])
  @@map("cached_customers")
  @@schema("billy")
}

model BillyCachedProduct {
  id             String   @id @default(uuid()) @db.Uuid
  organizationId String   @map("organization_id") @db.Uuid
  billyId        String   @map("billy_id")
  data           Json
  cachedAt       DateTime @default(now()) @map("cached_at") @db.Timestamptz
  expiresAt      DateTime @map("expires_at") @db.Timestamptz

  organization BillyOrganization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, billyId])
  @@index([organizationId])
  @@index([expiresAt])
  @@map("cached_products")
  @@schema("billy")
}

model BillyAuditLog {
  id             String   @id @default(uuid()) @db.Uuid
  organizationId String?  @map("organization_id") @db.Uuid
  userId         String?  @map("user_id") @db.Uuid
  toolName       String   @map("tool_name")
  action         String
  resourceType   String?  @map("resource_type")
  resourceId     String?  @map("resource_id")
  inputParams    Json?    @map("input_params")
  outputData     Json?    @map("output_data")
  success        Boolean
  errorMessage   String?  @map("error_message") @db.Text
  durationMs     Int?     @map("duration_ms")
  ipAddress      String?  @map("ip_address")
  userAgent      String?  @map("user_agent") @db.Text
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz

  organization BillyOrganization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  user         BillyUser?         @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([organizationId])
  @@index([userId])
  @@index([toolName])
  @@index([createdAt])
  @@map("audit_logs")
  @@schema("billy")
}

model BillyUsageMetric {
  id             String   @id @default(uuid()) @db.Uuid
  organizationId String   @map("organization_id") @db.Uuid
  date           DateTime @db.Date
  hour           Int      @db.SmallInt
  toolName       String   @map("tool_name")
  callCount      Int      @default(0) @map("call_count")
  successCount   Int      @default(0) @map("success_count")
  errorCount     Int      @default(0) @map("error_count")
  avgDurationMs  Int?     @map("avg_duration_ms")
  cacheHitRate   Decimal? @map("cache_hit_rate") @db.Decimal(5, 2)
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz

  organization BillyOrganization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, date, hour, toolName])
  @@index([organizationId])
  @@index([date])
  @@map("usage_metrics")
  @@schema("billy")
}

model BillyRateLimit {
  id             String   @id @default(uuid()) @db.Uuid
  organizationId String   @map("organization_id") @db.Uuid
  endpoint       String
  windowStart    DateTime @map("window_start") @db.Timestamptz
  requestCount   Int      @default(0) @map("request_count")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz

  organization BillyOrganization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, endpoint, windowStart])
  @@index([organizationId])
  @@index([windowStart])
  @@map("rate_limits")
  @@schema("billy")
}

// =====================================================
// RENOS SCHEMA (Tekup Google AI - RenOS)
// =====================================================

// Chat System
model RenosChatSession {
  id        String              @id @default(cuid())
  userId    String?
  channel   String?
  locale    String?
  createdAt DateTime            @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime            @updatedAt @map("updated_at") @db.Timestamptz
  messages  RenosChatMessage[]

  @@map("chat_sessions")
  @@schema("renos")
}

model RenosChatMessage {
  id        String            @id @default(cuid())
  sessionId String            @map("session_id")
  role      String
  content   String            @db.Text
  timestamp DateTime          @default(now()) @db.Timestamptz
  session   RenosChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
  @@schema("renos")
}

// User Management
model RenosUser {
  id           String    @id @default(cuid())
  email        String    @unique
  name         String
  phone        String?
  passwordHash String    @map("password_hash")
  role         String    @default("employee")
  isActive     Boolean   @default(true) @map("is_active")
  lastLoginAt  DateTime? @map("last_login_at") @db.Timestamptz
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  teamMember                RenosTeamMember?
  submittedCorrections      RenosTimeCorrection[] @relation("CorrectionSubmitter")
  approvedCorrections       RenosTimeCorrection[] @relation("CorrectionApprover")
  rejectedCorrections       RenosTimeCorrection[] @relation("CorrectionRejecter")

  @@index([email])
  @@index([role])
  @@map("users")
  @@schema("renos")
}

// Team Management
model RenosTeamMember {
  id                 String   @id @default(cuid())
  userId             String   @unique @map("user_id")
  employeeId         String   @unique @map("employee_id")
  skills             String[]
  hourlyRate         Float?   @map("hourly_rate")
  availability       Json     @default("{}")
  performanceMetrics Json     @default("{}") @map("performance_metrics")
  isActive           Boolean  @default(true) @map("is_active")
  hireDate           DateTime? @map("hire_date") @db.Date
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt          DateTime @updatedAt @map("updated_at") @db.Timestamptz

  user        RenosUser       @relation(fields: [userId], references: [id], onDelete: Cascade)
  timeEntries RenosTimeEntry[]

  @@index([userId])
  @@index([employeeId])
  @@index([isActive])
  @@map("team_members")
  @@schema("renos")
}

model RenosTimeEntry {
  id             String    @id @default(cuid())
  teamMemberId   String    @map("team_member_id")
  leadId         String?   @map("lead_id")
  bookingId      String?   @map("booking_id")
  startTime      DateTime  @map("start_time") @db.Timestamptz
  endTime        DateTime? @map("end_time") @db.Timestamptz
  breakDuration  Int       @default(0) @map("break_duration")
  notes          String?   @db.Text
  location       Json?
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  teamMember  RenosTeamMember      @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)
  corrections RenosTimeCorrection[]

  @@index([teamMemberId])
  @@index([leadId])
  @@index([bookingId])
  @@index([startTime])
  @@map("time_entries")
  @@schema("renos")
}

model RenosTimeCorrection {
  id                     String    @id @default(cuid())
  originalEntryId        String    @map("original_entry_id")
  originalStartTime      DateTime  @map("original_start_time") @db.Timestamptz
  originalEndTime        DateTime? @map("original_end_time") @db.Timestamptz
  originalBreakDuration  Int       @map("original_break_duration")
  correctedStartTime     DateTime  @map("corrected_start_time") @db.Timestamptz
  correctedEndTime       DateTime? @map("corrected_end_time") @db.Timestamptz
  correctedBreakDuration Int       @map("corrected_break_duration")
  reason                 String    @db.Text
  status                 String    @default("pending")
  submittedBy            String    @map("submitted_by")
  approvedBy             String?   @map("approved_by")
  approvedAt             DateTime? @map("approved_at") @db.Timestamptz
  rejectedBy             String?   @map("rejected_by")
  rejectedAt             DateTime? @map("rejected_at") @db.Timestamptz
  rejectionReason        String?   @map("rejection_reason") @db.Text
  createdAt              DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt              DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  originalEntry RenosTimeEntry @relation(fields: [originalEntryId], references: [id], onDelete: Cascade)
  submitter     RenosUser      @relation("CorrectionSubmitter", fields: [submittedBy], references: [id])
  approver      RenosUser?     @relation("CorrectionApprover", fields: [approvedBy], references: [id])
  rejecter      RenosUser?     @relation("CorrectionRejecter", fields: [rejectedBy], references: [id])

  @@index([originalEntryId])
  @@index([submittedBy])
  @@index([status])
  @@index([createdAt])
  @@map("time_corrections")
  @@schema("renos")
}

// Lead Management
model RenosLead {
  id               String              @id @default(cuid())
  sessionId        String?             @map("session_id")
  customerId       String?             @map("customer_id")
  source           String?
  name             String?
  email            String?
  phone            String?
  address          String?
  squareMeters     Float?              @map("square_meters")
  rooms            Int?
  taskType         String?             @map("task_type")
  preferredDates   String[]            @map("preferred_dates")
  status           String              @default("new")
  emailThreadId    String?             @map("email_thread_id")
  followUpAttempts Int                 @default(0) @map("follow_up_attempts")
  lastFollowUpDate DateTime?           @map("last_follow_up_date") @db.Timestamptz
  idempotencyKey   String?             @unique @map("idempotency_key")
  
  // Firecrawl Enrichment
  companyName      String?             @map("company_name")
  industry         String?
  estimatedSize    String?             @map("estimated_size")
  estimatedValue   Float?              @map("estimated_value")
  enrichmentData   Json?               @map("enrichment_data")
  lastEnriched     DateTime?           @map("last_enriched") @db.Timestamptz
  
  // Lead Scoring
  score            Int?                @default(0)
  priority         String?             @default("medium")
  lastScored       DateTime?           @map("last_scored") @db.Timestamptz
  scoreMetadata    Json?               @map("score_metadata")
  
  createdAt        DateTime            @default(now()) @map("created_at") @db.Timestamptz
  updatedAt        DateTime            @updatedAt @map("updated_at") @db.Timestamptz
  
  bookings         RenosBooking[]
  conversations    RenosConversation[]
  customer         RenosCustomer?      @relation(fields: [customerId], references: [id])
  quotes           RenosQuote[]
  emailResponses   RenosEmailResponse[]
  escalations      RenosEscalation[]

  @@index([email, createdAt])
  @@index([estimatedValue])
  @@index([score, priority])
  @@map("leads")
  @@schema("renos")
}

model RenosQuote {
  id             String       @id @default(cuid())
  leadId         String       @map("lead_id")
  hourlyRate     Float        @map("hourly_rate")
  estimatedHours Float        @map("estimated_hours")
  subtotal       Float
  vatRate        Float        @map("vat_rate")
  total          Float
  notes          String?      @db.Text
  validUntil     DateTime?    @map("valid_until") @db.Timestamptz
  status         String       @default("draft")
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime     @updatedAt @map("updated_at") @db.Timestamptz
  lead           RenosLead    @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@map("quotes")
  @@schema("renos")
}

model RenosBooking {
  id                String                   @id @default(cuid())
  customerId        String?                  @map("customer_id")
  leadId            String?                  @map("lead_id")
  quoteId           String?                  @map("quote_id")
  serviceType       String?                  @map("service_type")
  address           String?
  scheduledAt       DateTime                 @default(now()) @map("scheduled_at") @db.Timestamptz
  estimatedDuration Int                      @default(120) @map("estimated_duration")
  startTime         DateTime?                @map("start_time") @db.Timestamptz
  endTime           DateTime?                @map("end_time") @db.Timestamptz
  status            String                   @default("scheduled")
  calendarEventId   String?                  @map("calendar_event_id")
  calendarLink      String?                  @map("calendar_link")
  notes             String?                  @db.Text

  // Time Tracking
  actualStartTime DateTime?                  @map("actual_start_time") @db.Timestamptz
  actualEndTime   DateTime?                  @map("actual_end_time") @db.Timestamptz
  actualDuration  Int?                       @map("actual_duration")
  timeVariance    Int?                       @map("time_variance")
  efficiencyScore Float?                     @map("efficiency_score")
  timeNotes       String?                    @map("time_notes") @db.Text
  timerStatus     String                     @default("not_started") @map("timer_status")

  createdAt DateTime                         @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime                         @updatedAt @map("updated_at") @db.Timestamptz

  customer    RenosCustomer?               @relation(fields: [customerId], references: [id])
  lead        RenosLead?                   @relation(fields: [leadId], references: [id], onDelete: Cascade)
  planBooking RenosCleaningPlanBooking?
  breaks      RenosBreak[]
  invoices    RenosInvoice[]

  @@index([customerId])
  @@index([leadId])
  @@index([scheduledAt])
  @@index([status])
  @@index([timerStatus])
  @@map("bookings")
  @@schema("renos")
}

model RenosCustomer {
  id            String                  @id @default(cuid())
  name          String
  email         String?                 @unique
  phone         String?
  address       String?
  companyName   String?                 @map("company_name")
  notes         String?                 @db.Text
  status        String                  @default("active")
  tags          String[]
  totalLeads    Int                     @default(0) @map("total_leads")
  totalBookings Int                     @default(0) @map("total_bookings")
  totalRevenue  Float                   @default(0) @map("total_revenue")
  lastContactAt DateTime?               @map("last_contact_at") @db.Timestamptz
  createdAt     DateTime                @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime                @updatedAt @map("updated_at") @db.Timestamptz
  
  conversations RenosConversation[]
  leads         RenosLead[]
  emailThreads  RenosEmailThread[]
  bookings      RenosBooking[]
  cleaningPlans RenosCleaningPlan[]

  @@index([email])
  @@index([status])
  @@map("customers")
  @@schema("renos")
}

model RenosConversation {
  id            String             @id @default(cuid())
  customerId    String?            @map("customer_id")
  leadId        String?            @map("lead_id")
  subject       String?
  channel       String             @default("email")
  status        String             @default("active")
  gmailThreadId String?            @unique @map("gmail_thread_id")
  createdAt     DateTime           @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime           @updatedAt @map("updated_at") @db.Timestamptz
  closedAt      DateTime?          @map("closed_at") @db.Timestamptz
  
  customer      RenosCustomer?     @relation(fields: [customerId], references: [id])
  lead          RenosLead?         @relation(fields: [leadId], references: [id])
  messages      RenosEmailMessage[] @relation("ConversationMessages")

  @@index([customerId])
  @@index([leadId])
  @@index([gmailThreadId])
  @@index([status])
  @@map("conversations")
  @@schema("renos")
}

// Email System
model RenosEmailIngestRun {
  id            String    @id @default(cuid())
  startedAt     DateTime  @default(now()) @map("started_at") @db.Timestamptz
  finishedAt    DateTime? @map("finished_at") @db.Timestamptz
  status        String    @default("running")
  totalEmails   Int       @default(0) @map("total_emails")
  newEmails     Int       @default(0) @map("new_emails")
  updatedEmails Int       @default(0) @map("updated_emails")
  errors        Int       @default(0)
  errorLog      Json?     @map("error_log")
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz

  @@map("email_ingest_runs")
  @@schema("renos")
}

model RenosEmailThread {
  id            String             @id @default(cuid())
  gmailThreadId String             @unique @map("gmail_thread_id")
  customerId    String?            @map("customer_id")
  subject       String
  snippet       String?            @db.Text
  lastMessageAt DateTime           @map("last_message_at") @db.Timestamptz
  participants  String[]
  messageCount  Int                @default(0) @map("message_count")
  labels        String[]
  isMatched     Boolean            @default(false) @map("is_matched")
  matchedAt     DateTime?          @map("matched_at") @db.Timestamptz
  matchedBy     String?            @map("matched_by")
  confidence    Float?
  createdAt     DateTime           @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime           @updatedAt @map("updated_at") @db.Timestamptz

  customer RenosCustomer?       @relation(fields: [customerId], references: [id])
  messages RenosEmailMessage[]

  @@index([customerId])
  @@index([gmailThreadId])
  @@index([lastMessageAt])
  @@index([isMatched])
  @@map("email_threads")
  @@schema("renos")
}

model RenosEmailMessage {
  id             String              @id @default(cuid())
  gmailMessageId String?             @unique @map("gmail_message_id")
  gmailThreadId  String              @map("gmail_thread_id")
  threadId       String?             @map("thread_id")
  from           String
  to             String[]
  subject        String?
  body           String              @db.Text
  bodyPreview    String?             @map("body_preview") @db.Text
  direction      String              @default("inbound")
  status         String              @default("delivered")
  isAiGenerated  Boolean             @default(false) @map("is_ai_generated")
  aiModel        String?             @map("ai_model")
  sentAt         DateTime            @map("sent_at") @db.Timestamptz
  createdAt      DateTime            @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime            @updatedAt @map("updated_at") @db.Timestamptz
  conversationId String?             @map("conversation_id")

  thread       RenosEmailThread?     @relation(fields: [threadId], references: [id], onDelete: Cascade)
  conversation RenosConversation?    @relation("ConversationMessages", fields: [conversationId], references: [id])

  @@index([threadId])
  @@index([conversationId])
  @@index([gmailMessageId])
  @@index([sentAt])
  @@index([direction])
  @@map("email_messages")
  @@schema("renos")
}

model RenosEmailResponse {
  id             String    @id @default(cuid())
  leadId         String    @map("lead_id")
  recipientEmail String    @map("recipient_email")
  subject        String
  body           String    @db.Text
  status         String    @default("pending")
  gmailThreadId  String?   @map("gmail_thread_id")
  gmailMessageId String?   @map("gmail_message_id")
  sentAt         DateTime? @map("sent_at") @db.Timestamptz
  rejectedReason String?   @map("rejected_reason") @db.Text
  aiModel        String?   @map("ai_model")
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  lead RenosLead @relation(fields: [leadId], references: [id])

  @@index([leadId])
  @@index([status])
  @@map("email_responses")
  @@schema("renos")
}

model RenosEscalation {
  id              String    @id @default(cuid())
  leadId          String    @map("lead_id")
  customerEmail   String    @map("customer_email")
  customerName    String?   @map("customer_name")
  threadId        String    @map("thread_id")
  severity        String
  conflictScore   Int       @map("conflict_score")
  matchedKeywords String[]  @map("matched_keywords")
  emailSnippet    String    @map("email_snippet") @db.Text
  escalatedAt     DateTime  @default(now()) @map("escalated_at") @db.Timestamptz
  escalatedBy     String    @map("escalated_by")
  jonasNotified   Boolean   @default(false) @map("jonas_notified")
  resolvedAt      DateTime? @map("resolved_at") @db.Timestamptz
  resolution      String?   @db.Text
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  lead RenosLead @relation(fields: [leadId], references: [id])

  @@index([leadId])
  @@index([severity])
  @@index([escalatedAt])
  @@map("escalations")
  @@schema("renos")
}

// Cleaning Plans
model RenosCleaningPlan {
  id                String                      @id @default(cuid())
  customerId        String                      @map("customer_id")
  name              String
  description       String?                     @db.Text
  serviceType       String                      @map("service_type")
  frequency         String                      @default("once")
  isTemplate        Boolean                     @default(false) @map("is_template")
  isActive          Boolean                     @default(true) @map("is_active")
  estimatedDuration Int                         @default(120) @map("estimated_duration")
  estimatedPrice    Float?                      @map("estimated_price")
  squareMeters      Float?                      @map("square_meters")
  address           String?
  notes             String?                     @db.Text
  createdAt         DateTime                    @default(now()) @map("created_at") @db.Timestamptz
  updatedAt         DateTime                    @updatedAt @map("updated_at") @db.Timestamptz

  customer     RenosCustomer                 @relation(fields: [customerId], references: [id], onDelete: Cascade)
  tasks        RenosCleaningTask[]
  planBookings RenosCleaningPlanBooking[]

  @@index([customerId])
  @@index([serviceType])
  @@index([isActive])
  @@index([isTemplate])
  @@map("cleaning_plans")
  @@schema("renos")
}

model RenosCleaningTask {
  id            String            @id @default(cuid())
  planId        String            @map("plan_id")
  name          String
  description   String?           @db.Text
  category      String
  estimatedTime Int               @default(15) @map("estimated_time")
  isRequired    Boolean           @default(true) @map("is_required")
  isCompleted   Boolean           @default(false) @map("is_completed")
  sortOrder     Int               @default(0) @map("sort_order")
  pricePerTask  Float?            @map("price_per_task")
  createdAt     DateTime          @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime          @updatedAt @map("updated_at") @db.Timestamptz

  plan RenosCleaningPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([planId])
  @@index([category])
  @@map("cleaning_tasks")
  @@schema("renos")
}

model RenosCleaningPlanBooking {
  id             String            @id @default(cuid())
  planId         String            @map("plan_id")
  bookingId      String            @unique @map("booking_id")
  completedTasks String[]          @map("completed_tasks")
  actualDuration Int?              @map("actual_duration")
  notes          String?           @db.Text
  createdAt      DateTime          @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime          @updatedAt @map("updated_at") @db.Timestamptz

  plan    RenosCleaningPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  booking RenosBooking      @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([planId])
  @@index([bookingId])
  @@map("cleaning_plan_bookings")
  @@schema("renos")
}

// Time Tracking
model RenosBreak {
  id        String    @id @default(cuid())
  bookingId String    @map("booking_id")
  startTime DateTime  @map("start_time") @db.Timestamptz
  endTime   DateTime? @map("end_time") @db.Timestamptz
  duration  Int?
  reason    String?
  notes     String?   @db.Text
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  booking RenosBooking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@index([startTime])
  @@map("breaks")
  @@schema("renos")
}

// Invoicing
model RenosInvoice {
  id              String                 @id @default(cuid())
  invoiceNumber   String                 @unique @map("invoice_number")
  bookingId       String?                @map("booking_id")
  customerId      String                 @map("customer_id")
  customerName    String                 @map("customer_name")
  customerEmail   String?                @map("customer_email")
  customerAddress String?                @map("customer_address") @db.Text

  issueDate DateTime @default(now()) @map("issue_date") @db.Timestamptz
  dueDate   DateTime @map("due_date") @db.Timestamptz
  status    String   @default("draft")

  subtotal  Float
  vatRate   Float @default(25.0) @map("vat_rate")
  vatAmount Float @map("vat_amount")
  total     Float

  paidAt        DateTime? @map("paid_at") @db.Timestamptz
  paidAmount    Float?    @map("paid_amount")
  paymentMethod String?   @map("payment_method")
  paymentRef    String?   @map("payment_ref")

  billyInvoiceId String?   @unique @map("billy_invoice_id")
  billyContactId String?   @map("billy_contact_id")
  billySyncedAt  DateTime? @map("billy_synced_at") @db.Timestamptz
  billyPdfUrl    String?   @map("billy_pdf_url")

  notes          String?   @db.Text
  internalNotes  String?   @map("internal_notes") @db.Text
  sentAt         DateTime? @map("sent_at") @db.Timestamptz
  reminderSentAt DateTime? @map("reminder_sent_at") @db.Timestamptz
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  booking   RenosBooking?           @relation(fields: [bookingId], references: [id])
  lineItems RenosInvoiceLineItem[]

  @@index([customerId])
  @@index([bookingId])
  @@index([status])
  @@index([dueDate])
  @@index([invoiceNumber])
  @@map("invoices")
  @@schema("renos")
}

model RenosInvoiceLineItem {
  id          String        @id @default(cuid())
  invoiceId   String        @map("invoice_id")
  description String
  quantity    Float         @default(1.0)
  unitPrice   Float         @map("unit_price")
  amount      Float
  sortOrder   Int           @default(0) @map("sort_order")
  createdAt   DateTime      @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime      @updatedAt @map("updated_at") @db.Timestamptz

  invoice RenosInvoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
  @@map("invoice_line_items")
  @@schema("renos")
}

// Analytics & Tracking
model RenosAnalytics {
  id        String   @id @default(cuid())
  date      DateTime @db.Date
  metric    String
  value     Float
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  @@unique([date, metric])
  @@map("analytics")
  @@schema("renos")
}

model RenosTaskExecution {
  id              String   @id @default(cuid())
  taskType        String   @map("task_type")
  taskPayload     Json     @map("task_payload")
  status          String
  result          Json?
  error           String?  @db.Text
  duration        Int?
  traceId         String?  @map("trace_id")
  sessionId       String?  @map("session_id")
  userId          String?  @map("user_id")
  intent          String?
  confidence      Float?
  correctionType  String?  @map("correction_type")
  executedAt      DateTime @default(now()) @map("executed_at") @db.Timestamptz
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz

  @@index([taskType, status])
  @@index([executedAt])
  @@index([traceId])
  @@index([sessionId])
  @@map("task_executions")
  @@schema("renos")
}

// Competitor Analysis
model RenosCompetitorPricing {
  id          String   @id @default(cuid())
  competitor  String
  websiteUrl  String   @map("website_url")
  pricingData Json     @map("pricing_data")
  scrapedAt   DateTime @default(now()) @map("scraped_at") @db.Timestamptz
  creditsUsed Int      @default(1) @map("credits_used")

  @@index([competitor, scrapedAt])
  @@map("competitor_pricing")
  @@schema("renos")
}

// Service Catalog
model RenosService {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  price       Float
  duration    Int
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz

  @@map("services")
  @@schema("renos")
}

model RenosLabel {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  @@map("labels")
  @@schema("renos")
}


// ====================================================

// =====================================================
// CRM SCHEMA (Tekup-org CRM)
// =====================================================


// ===================================
// CONTACTS & COMPANIES
// ===================================

model CrmContact {
  id           String    @id @default(cuid())
  firstName    String
  lastName     String
  email        String?   @unique
  phone        String?
  mobile       String?
  title        String?   // Job title
  
  // Company relation
  companyId    String?
  company      CrmCompany? @relation(fields: [companyId], references: [id])
  
  // Social & web
  linkedIn     String?
  twitter      String?
  website      String?
  
  // Address
  address      String?
  city         String?
  postalCode   String?
  country      String?   @default("Denmark")
  
  // Lifecycle
  status       String    @default("active") // active, inactive, lead
  source       String?   // website, referral, cold_outreach, etc.
  owner        String?   // User ID who owns this contact
  
  // Engagement
  lastContactAt DateTime?
  nextFollowUp  DateTime?
  
  // Notes & metadata
  notes        String?   @db.Text
  tags         String[]  @default([])
  customFields Json?
  
  // Timestamps
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Relations
  deals        CrmDeal[]
  activities   CrmActivity[]
  emails       CrmEmail[]
  tasks        CrmTask[]
  
  @@index([email])
  @@index([companyId])
  @@index([status])
  @@index([owner])
  @@schema("crm")
}

model CrmCompany {
  id           String    @id @default(cuid())
  name         String
  website      String?
  industry     String?
  size         String?   // 1-10, 11-50, 51-200, etc.
  revenue      Float?
  
  // Contact info
  email        String?
  phone        String?
  
  // Address
  address      String?
  city         String?
  postalCode   String?
  country      String?   @default("Denmark")
  
  // Business info
  vatNumber    String?
  registrationNumber String?
  
  // Relationship
  status       String    @default("active") // active, inactive, prospect, customer
  owner        String?   // User ID
  
  // Engagement
  lastContactAt DateTime?
  
  // Notes & metadata
  notes        String?   @db.Text
  tags         String[]  @default([])
  customFields Json?
  
  // Timestamps
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Relations
  contacts     CrmContact[]
  deals        CrmDeal[]
  activities   CrmActivity[]
  
  @@index([name])
  @@index([status])
  @@index([owner])
  @@schema("crm")
}

// ===================================
// DEALS & PIPELINE
// ===================================

model CrmDeal {
  id           String    @id @default(cuid())
  title        String
  value        Float
  currency     String    @default("DKK")
  
  // Pipeline
  stage        String    @default("qualification") // qualification, proposal, negotiation, closed_won, closed_lost
  pipeline     String    @default("sales") // sales, partnerships, etc.
  probability  Int?      // 0-100%
  
  // Relations
  contactId    String?
  contact      CrmContact? @relation(fields: [contactId], references: [id])
  companyId    String?
  company      CrmCompany? @relation(fields: [companyId], references: [id])
  
  // Ownership
  owner        String    // User ID
  
  // Dates
  expectedCloseDate DateTime?
  actualCloseDate   DateTime?
  
  // Status
  status       String    @default("open") // open, won, lost
  lostReason   String?
  
  // Notes & metadata
  description  String?   @db.Text
  tags         String[]  @default([])
  customFields Json?
  
  // Timestamps
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Relations
  activities   CrmActivity[]
  products     CrmDealProduct[]
  
  @@index([stage])
  @@index([status])
  @@index([owner])
  @@index([contactId])
  @@index([companyId])
  @@index([expectedCloseDate])
  @@schema("crm")
}

model CrmDealProduct {
  id           String    @id @default(cuid())
  dealId       String
  deal         CrmDeal   @relation(fields: [dealId], references: [id], onDelete: Cascade)
  
  productName  String
  quantity     Int       @default(1)
  unitPrice    Float
  discount     Float     @default(0)
  total        Float
  
  description  String?   @db.Text
  
  createdAt    DateTime  @default(now())
  
  @@index([dealId])
  @@schema("crm")
}

// ===================================
// ACTIVITIES & ENGAGEMENT
// ===================================

model CrmActivity {
  id           String    @id @default(cuid())
  type         String    // call, email, meeting, note, task_completed
  subject      String?
  description  String?   @db.Text
  
  // Relations
  contactId    String?
  contact      CrmContact? @relation(fields: [contactId], references: [id])
  companyId    String?
  company      CrmCompany? @relation(fields: [companyId], references: [id])
  dealId       String?
  deal         CrmDeal?    @relation(fields: [dealId], references: [id])
  
  // Ownership
  owner        String    // User ID
  
  // Duration (for calls/meetings)
  durationMinutes Int?
  
  // Outcome
  outcome      String?   // successful, unsuccessful, no_answer, etc.
  
  // Timestamp
  occurredAt   DateTime  @default(now())
  createdAt    DateTime  @default(now())
  
  @@index([contactId])
  @@index([companyId])
  @@index([dealId])
  @@index([occurredAt])
  @@index([owner])
  @@schema("crm")
}

model CrmEmail {
  id           String    @id @default(cuid())
  
  // Email details
  subject      String
  body         String    @db.Text
  from         String
  to           String[]
  cc           String[]  @default([])
  bcc          String[]  @default([])
  
  // Direction
  direction    String    // inbound, outbound
  
  // Status
  status       String    @default("sent") // draft, sent, delivered, opened, clicked, bounced
  
  // Tracking
  openedAt     DateTime?
  clickedAt    DateTime?
  
  // Relations
  contactId    String?
  contact      CrmContact? @relation(fields: [contactId], references: [id])
  
  // External IDs
  externalId   String?   // Gmail message ID, etc.
  threadId     String?
  
  // Timestamps
  sentAt       DateTime?
  createdAt    DateTime  @default(now())
  
  @@index([contactId])
  @@index([direction])
  @@index([status])
  @@schema("crm")
}

model CrmTask {
  id           String    @id @default(cuid())
  title        String
  description  String?   @db.Text
  
  // Assignment
  assignedTo   String    // User ID
  
  // Relations
  contactId    String?
  contact      CrmContact? @relation(fields: [contactId], references: [id])
  
  // Status
  status       String    @default("todo") // todo, in_progress, done, cancelled
  priority     String    @default("medium") // low, medium, high, urgent
  
  // Dates
  dueDate      DateTime?
  completedAt  DateTime?
  
  // Timestamps
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  @@index([assignedTo])
  @@index([contactId])
  @@index([status])
  @@index([dueDate])
  @@schema("crm")
}

// ===================================
// ANALYTICS & REPORTING
// ===================================

model CrmMetric {
  id           String    @id @default(cuid())
  date         DateTime  @db.Date
  metric       String    // deals_created, deals_won, deals_lost, revenue, etc.
  value        Float
  metadata     Json?
  
  createdAt    DateTime  @default(now())
  
  @@unique([date, metric])
  @@index([date])
  @@index([metric])
  @@schema("crm")
}


// ====================================================

// =====================================================
// FLOW SCHEMA (Flow API)
// =====================================================


// ===================================
// WORKFLOWS & TEMPLATES
// ===================================

model FlowWorkflow {
  id           String    @id @default(cuid())
  name         String
  description  String?   @db.Text
  
  // Template or instance
  isTemplate   Boolean   @default(false)
  templateId   String?
  
  // Status
  status       String    @default("draft") // draft, active, paused, archived
  
  // Configuration
  trigger      Json      // Trigger configuration
  nodes        Json      // Workflow nodes/steps
  edges        Json      // Connections between nodes
  
  // Execution settings
  timeout      Int       @default(3600) // seconds
  retryAttempts Int      @default(3)
  
  // Ownership
  owner        String    // User ID
  
  // Statistics
  executionCount Int     @default(0)
  successCount   Int     @default(0)
  failureCount   Int     @default(0)
  avgDurationMs  Int?
  
  // Timestamps
  lastExecutedAt DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Relations
  executions   FlowExecution[]
  schedules    FlowSchedule[]
  
  @@index([status])
  @@index([owner])
  @@index([isTemplate])
  @@schema("flow")
}

// ===================================
// EXECUTIONS & RUNS
// ===================================

model FlowExecution {
  id           String    @id @default(cuid())
  workflowId   String
  workflow     FlowWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  
  // Execution info
  status       String    @default("running") // running, completed, failed, cancelled
  
  // Input/Output
  input        Json?
  output       Json?
  error        String?   @db.Text
  
  // Steps
  currentStep  String?
  completedSteps String[] @default([])
  failedStep   String?
  
  // Timing
  startedAt    DateTime  @default(now())
  completedAt  DateTime?
  durationMs   Int?
  
  // Metadata
  triggeredBy  String?   // manual, schedule, webhook, event
  metadata     Json?
  
  // Relations
  steps        FlowExecutionStep[]
  logs         FlowExecutionLog[]
  
  @@index([workflowId])
  @@index([status])
  @@index([startedAt])
  @@schema("flow")
}

model FlowExecutionStep {
  id           String    @id @default(cuid())
  executionId  String
  execution    FlowExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)
  
  // Step info
  stepId       String    // Node ID from workflow
  stepName     String
  stepType     String    // action, condition, loop, etc.
  
  // Status
  status       String    @default("pending") // pending, running, completed, failed, skipped
  
  // Input/Output
  input        Json?
  output       Json?
  error        String?   @db.Text
  
  // Timing
  startedAt    DateTime?
  completedAt  DateTime?
  durationMs   Int?
  
  // Retries
  attemptNumber Int      @default(1)
  maxAttempts  Int      @default(3)
  
  createdAt    DateTime  @default(now())
  
  @@index([executionId])
  @@index([status])
  @@schema("flow")
}

model FlowExecutionLog {
  id           String    @id @default(cuid())
  executionId  String
  execution    FlowExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)
  
  // Log details
  level        String    // debug, info, warn, error
  message      String    @db.Text
  data         Json?
  
  // Context
  stepId       String?
  timestamp    DateTime  @default(now())
  
  @@index([executionId])
  @@index([level])
  @@index([timestamp])
  @@schema("flow")
}

// ===================================
// SCHEDULING
// ===================================

model FlowSchedule {
  id           String    @id @default(cuid())
  workflowId   String
  workflow     FlowWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  
  // Schedule configuration
  name         String
  description  String?
  
  // Cron expression or interval
  cronExpression String?
  intervalMinutes Int?
  
  // Status
  isActive     Boolean   @default(true)
  
  // Execution window
  timezone     String    @default("Europe/Copenhagen")
  startDate    DateTime?
  endDate      DateTime?
  
  // Limits
  maxRuns      Int?      // Maximum number of runs (null = unlimited)
  currentRuns  Int       @default(0)
  
  // Timestamps
  lastRun      DateTime?
  nextRun      DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  @@index([workflowId])
  @@index([isActive])
  @@index([nextRun])
  @@schema("flow")
}

// ===================================
// INTEGRATIONS & WEBHOOKS
// ===================================

model FlowWebhook {
  id           String    @id @default(cuid())
  workflowId   String
  
  // Webhook details
  name         String
  url          String    @unique // Generated webhook URL
  method       String    @default("POST") // POST, GET, etc.
  
  // Security
  secret       String?   // Webhook secret for verification
  allowedIps   String[]  @default([])
  
  // Status
  isActive     Boolean   @default(true)
  
  // Statistics
  requestCount Int       @default(0)
  lastRequestAt DateTime?
  
  // Timestamps
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  @@index([workflowId])
  @@index([isActive])
  @@schema("flow")
}

model FlowIntegration {
  id           String    @id @default(cuid())
  
  // Integration details
  name         String    // slack, email, http, database, etc.
  type         String
  
  // Configuration
  config       Json      // Connection details, credentials, etc.
  
  // Status
  status       String    @default("active") // active, inactive, error
  lastError    String?   @db.Text
  
  // Ownership
  owner        String    // User ID
  
  // Statistics
  usageCount   Int       @default(0)
  lastUsedAt   DateTime?
  
  // Timestamps
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  @@index([owner])
  @@index([type])
  @@index([status])
  @@schema("flow")
}

// ===================================
// VARIABLES & STATE
// ===================================

model FlowVariable {
  id           String    @id @default(cuid())
  workflowId   String?   // null = global variable
  
  // Variable details
  key          String
  value        String    @db.Text
  type         String    @default("string") // string, number, boolean, json
  
  // Security
  isSecret     Boolean   @default(false)
  encrypted    Boolean   @default(false)
  
  // Description
  description  String?
  
  // Timestamps
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  @@unique([workflowId, key])
  @@index([workflowId])
  @@schema("flow")
}

// ===================================
// ANALYTICS
// ===================================

model FlowMetric {
  id           String    @id @default(cuid())
  date         DateTime  @db.Date
  
  // Metrics
  metric       String    // executions, success_rate, avg_duration, etc.
  value        Float
  
  // Context
  workflowId   String?
  metadata     Json?
  
  createdAt    DateTime  @default(now())
  
  @@unique([date, metric, workflowId])
  @@index([date])
  @@index([metric])
  @@index([workflowId])
  @@schema("flow")
}


// ====================================================

// =====================================================
// SHARED SCHEMA (Cross-app resources)
// =====================================================

model SharedUser {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  name      String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  @@map("users")
  @@schema("shared")
}

model SharedAuditLog {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String?  @map("user_id") @db.Uuid
  action       String
  resourceType String   @map("resource_type")
  resourceId   String   @map("resource_id")
  metadata     Json     @default("{}")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz

  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
  @@schema("shared")
}
