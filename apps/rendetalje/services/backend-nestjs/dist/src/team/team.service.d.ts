import { BaseService } from '../common/services/base.service';
import { SupabaseService } from '../supabase/supabase.service';
import { TeamMember } from './entities/team-member.entity';
import { TimeEntry } from './entities/time-entry.entity';
import { CreateTeamMemberDto, CreateTimeEntryDto, UpdateTimeEntryDto, TeamFiltersDto, TimeEntryFiltersDto } from './dto';
import { PaginatedResponseDto } from '../common/dto/pagination.dto';
export declare class TeamService extends BaseService<TeamMember> {
    protected readonly supabaseService: SupabaseService;
    protected tableName: string;
    protected searchFields: string[];
    constructor(supabaseService: SupabaseService);
    findAllWithFilters(organizationId: string, filters: TeamFiltersDto): Promise<PaginatedResponseDto<TeamMember>>;
    create(createTeamMemberDto: CreateTeamMemberDto, organizationId: string): Promise<TeamMember>;
    getTeamMemberSchedule(teamMemberId: string, organizationId: string, dateFrom?: string, dateTo?: string): Promise<any>;
    getTeamMemberPerformance(teamMemberId: string, organizationId: string): Promise<any>;
    createTimeEntry(createTimeEntryDto: CreateTimeEntryDto, organizationId: string): Promise<TimeEntry>;
    findTimeEntries(organizationId: string, filters: TimeEntryFiltersDto): Promise<PaginatedResponseDto<TimeEntry>>;
    updateTimeEntry(id: string, updateTimeEntryDto: UpdateTimeEntryDto, organizationId: string): Promise<TimeEntry>;
    deleteTimeEntry(id: string, organizationId: string): Promise<void>;
    getTeamPerformanceReport(organizationId: string): Promise<any>;
    private validateUser;
    private validateJobAssignment;
    private validateTimeEntryAccess;
    private checkTimeEntryOverlap;
    private generateEmployeeId;
    private getDefaultPerformanceMetrics;
    private calculateTotalHours;
    private calculateAverageRating;
    private calculateAverageJobDuration;
    private calculateAverageQualityScore;
    private calculateTeamAverages;
    private getFilteredCount;
    private getTimeEntriesCount;
}
