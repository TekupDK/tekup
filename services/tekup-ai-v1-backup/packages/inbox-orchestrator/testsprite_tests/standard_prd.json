{
  "meta": {
    "project": "Friday AI",
    "date": "2025-10-29",
    "prepared_by": "Generated by TestSprite"
  },
  "product_overview": "Friday AI is an intelligent assistant for lead management, quote generation, booking, and customer service that leverages Google Gemini AI to automate parsing, reply generation, and calendar interactions with optimized token usage and rich business rule enforcement.",
  "core_goals": [
    "Automate lead extraction and parsing from Gmail threads to speed up lead management.",
    "Generate contextually accurate and memory-enforced AI replies for email threads.",
    "Provide an intelligent chat interface supporting natural language queries for leads, bookings, and calendar management.",
    "Implement business rule enforcement to ensure replies comply with company policies and reduce manual errors.",
    "Optimize token usage for AI requests to improve cost efficiency and maintain fast response times.",
    "Log detailed performance metrics including token counts, latency, and intent distribution."
  ],
  "key_features": [
    "Lead Parsing API to extract structured lead data like contact info, property details, and lead source.",
    "AI Reply Generation with 24 business memories enforcing policies such as time validation and quote formatting.",
    "Intelligent Chat API with intent detection to handle leads, bookings, quote generation, and follow-ups.",
    "Approve and Send API enabling approved replies to be sent with optional label management.",
    "Health Check API to verify service operational status.",
    "Token Optimization reducing average AI token usage by 35-45% using selective memory injection and response formatting.",
    "Response Templates inspired by Shortwave.ai for compact, clear reply outputs.",
    "Metrics Logging to capture tokens, latency, and cost details per request.",
    "Business Rules Enforcement ensuring replies comply with lead sources, timing constraints, and pricing calculations."
  ],
  "user_flow_summary": [
    "Lead Management Flow: User queries for new leads → System searches Gmail and parses leads → Responds with a formatted lead summary and actionable next steps.",
    "Reply Generation Flow: User requests reply generation for an email thread → System validates date/time → Searches existing correspondence → Detects intent and selects relevant business rules → Generates AI reply with enforced memories → Returns reply recommendation with warnings.",
    "Booking Suggestion Flow: User requests booking a time slot → System checks calendar for availability → Suggests open slots → Validates date/time constraints → Presents booking options.",
    "Approve and Send Flow: User approves AI-generated reply → Sends reply through API → Optionally adds/removes email labels → Confirms send status.",
    "Chat Interaction Flow: User sends natural language query → Intent detector identifies action → AI processes query with selected memories and token-optimized prompt → Returns formatted reply with metrics and actions performed."
  ],
  "validation_criteria": [
    "All 5 core API endpoints respond with correct status and data formats under valid requests.",
    "Lead parsing accuracy meets or exceeds 95% based on test dataset.",
    "AI-generated replies strictly enforce 24 predefined business rules with no violations allowed.",
    "Token usage reduced by 35-45% compared to baseline without optimizations.",
    "Average response latency per request remains below 500ms.",
    "Cost per AI request remains below 0.002 DKK on average.",
    "Test coverage for unit and integration tests achieves 75-85%.",
    "Shortwave.ai style formatting produces clear, concise AI responses verified in end-to-end workflows.",
    "Intent detection accuracy exceeds 85% in identifying user requests.",
    "System maintains high operational availability verified via health check endpoint."
  ],
  "code_summary": {
    "tech_stack": [
      "TypeScript",
      "Node.js",
      "Express.js",
      "Google Gemini AI",
      "Jest"
    ],
    "features": [
      {
        "name": "Health Check API",
        "description": "Simple health check endpoint to verify service is running",
        "files": [
          "src/index.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Friday AI - Health Check",
            "version": "1.0.0"
          },
          "paths": {
            "/health": {
              "get": {
                "summary": "Health check endpoint",
                "responses": {
                  "200": {
                    "description": "Service is healthy",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "ok": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Lead Parser Test API",
        "description": "Test endpoint for lead parsing functionality with mock data",
        "files": [
          "src/index.ts",
          "src/leadParser.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Friday AI - Lead Parser Test",
            "version": "1.0.0"
          },
          "paths": {
            "/test/parser": {
              "get": {
                "summary": "Test lead parser with mock email thread data",
                "responses": {
                  "200": {
                    "description": "Successfully parsed lead",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "success": {
                              "type": "boolean"
                            },
                            "parsed": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                },
                                "source": {
                                  "type": "string"
                                },
                                "contact": {
                                  "type": "object",
                                  "properties": {
                                    "email": {
                                      "type": "string"
                                    },
                                    "phone": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "bolig": {
                                  "type": "object",
                                  "properties": {
                                    "sqm": {
                                      "type": "number"
                                    },
                                    "type": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "address": {
                                  "type": "string"
                                },
                                "status": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "500": {
                    "description": "Parser test failed",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "error": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Generate Reply API",
        "description": "Generate AI-powered reply recommendations for email threads with memory enforcement",
        "files": [
          "src/index.ts",
          "src/promptTraining.ts",
          "src/memoryRules.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Friday AI - Generate Reply",
            "version": "1.0.0"
          },
          "paths": {
            "/generate-reply": {
              "post": {
                "summary": "Generate safe reply recommendation for email thread",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "threadId"
                        ],
                        "properties": {
                          "threadId": {
                            "type": "string",
                            "description": "Gmail thread ID"
                          },
                          "policy": {
                            "type": "object",
                            "properties": {
                              "searchBeforeSend": {
                                "type": "boolean",
                                "default": true,
                                "description": "Search for existing communication before generating reply"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Reply recommendation generated",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "recommendation": {
                              "type": "string",
                              "description": "Generated reply text"
                            },
                            "warnings": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "description": "Memory rule violations or warnings"
                            },
                            "shouldSend": {
                              "type": "boolean",
                              "description": "Whether the reply is safe to send"
                            }
                          }
                        }
                      }
                    }
                  },
                  "400": {
                    "description": "Invalid input",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "error": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Approve and Send API",
        "description": "Approve and send email reply with optional label management",
        "files": [
          "src/index.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Friday AI - Approve and Send",
            "version": "1.0.0"
          },
          "paths": {
            "/approve-and-send": {
              "post": {
                "summary": "Send approved reply and manage labels",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "threadId",
                          "body"
                        ],
                        "properties": {
                          "threadId": {
                            "type": "string",
                            "description": "Gmail thread ID"
                          },
                          "body": {
                            "type": "string",
                            "description": "Reply body text"
                          },
                          "labels": {
                            "type": "object",
                            "properties": {
                              "add": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "description": "Labels to add"
                              },
                              "remove": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "description": "Labels to remove"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Email sent successfully",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "ok": {
                              "type": "boolean"
                            },
                            "data": {
                              "type": "object"
                            },
                            "error": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "500": {
                    "description": "Send failed",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "error": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Chat API",
        "description": "Intelligent chat endpoint with intent detection, token optimization, and response formatting",
        "files": [
          "src/index.ts",
          "src/utils/intentDetector.ts",
          "src/formatters/responseTemplates.ts",
          "src/monitoring/metricsLogger.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Friday AI - Chat",
            "version": "1.0.0"
          },
          "paths": {
            "/chat": {
              "post": {
                "summary": "Chat with Friday AI - intelligent lead and calendar management",
                "description": "Processes natural language queries, detects intent, searches emails/calendar, and returns formatted responses with metrics",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "required": [
                          "message"
                        ],
                        "properties": {
                          "message": {
                            "type": "string",
                            "description": "User message/query",
                            "example": "Hvad har vi fået af nye leads i dag?"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Chat response with formatted data",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "reply": {
                              "type": "string",
                              "description": "Formatted response (Shortwave.ai style)"
                            },
                            "actions": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "args": {
                                    "type": "object"
                                  }
                                }
                              },
                              "description": "Actions performed (search_email, get_calendar_events)"
                            },
                            "metrics": {
                              "type": "object",
                              "properties": {
                                "intent": {
                                  "type": "string",
                                  "enum": [
                                    "lead_processing",
                                    "booking",
                                    "quote_generation",
                                    "conflict_resolution",
                                    "follow_up",
                                    "calendar_query",
                                    "general",
                                    "unknown"
                                  ]
                                },
                                "tokens": {
                                  "type": "number",
                                  "description": "Total tokens used"
                                },
                                "latency": {
                                  "type": "string",
                                  "description": "Response time in milliseconds"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "400": {
                    "description": "Invalid input - message required",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "error": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "500": {
                    "description": "Chat processing failed",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "error": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    ]
  }
}
